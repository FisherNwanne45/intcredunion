var apply = apply || {};
firstErrorMessage = "";

/**
 * Namespace all apply form JavaScript
 */
apply.events = function () {

    /**
     * Event handler for find address buttons 
     */

    var wireApplicationTypeRadioClick = function () {
        $('.applytype').change(function () {

            var jointAccount = $("input[name='IsJointApplication']:checked").val();
            var isLoanProduct = $('#IsLoanProduct').attr("value");
            var isSoftSearch = $('#IsSoftSearch').attr("value");
            var $annualIncomeBeforeTax = $('#AnnualIncomeBeforeTax').parent('.form-row');
            var $timeAtBank = $('.js-time-at-bank');

            if (jointAccount === "True") {
                $('#JointInfoMsg').attr('style', 'display: block;');

                if (isLoanProduct) {
                    $('#SingleInfoMsg').attr('style', 'display: none;');
                    $('#fieldGetQuote').attr('style', 'display: none;');
                    var $partnerAnnualIncomeBeforeTax = $('#PartnerAnnualIncomeBeforeTax').parent('.form-row');
                    $timeAtBank.insertBefore($partnerAnnualIncomeBeforeTax);
                    $annualIncomeBeforeTax.insertAfter($timeAtBank);
                    hideSectionsBelowAboutYou(false);
                    $(".js-loan-aboutyou-section :input").prop("disabled", false);
                    $("#yourFinancialDetails :input").prop("disabled", false);
                }

                $('input[name$="JointApplicant"]').val("True");
                $('#yourdetails').show();
                $('#JointApplicant_AnnualIncome').show();
            }
            else {
                $('#JointInfoMsg').attr('style', 'display: none;');
                
                if (isLoanProduct && isSoftSearch) { // SingleAndSoftSearch
                    $('#SingleInfoMsg').attr('style', 'display: block;');
                    $('#fieldGetQuote').attr('style', 'display: block;');
                    var $residentialStatus = $('#ResidentialStatus').parent('.form-row');
                    $annualIncomeBeforeTax.insertAfter($residentialStatus);
                    $timeAtBank.insertAfter($annualIncomeBeforeTax);
                    hideSectionsBelowAboutYou(true);
                }

                $('input[name$="JointApplicant"]').val("False");
                $('#yourdetails').hide();
                $('#JointApplicant_AnnualIncome').hide();
            }
        });
    };

    var wireAddressFindButtonClick = function () {
        $('.address-supply-lookup').click(function () { //add click event to lookup button
            var $whichAddress = $(this).closest('.address-section');
            var $thisFindButton = $(this); //add local reference to object
            var isBFPO = IsBFPO($whichAddress);
            removePostcodeErrorMessage($whichAddress);
            removeBFPOErrorMessage($whichAddress);
            removeBFPOCodeFieldHighlight($whichAddress);

            var errMsg = 'Please complete your ' + (isBFPO ? 'BFPO code' : 'postcode') + ' and use the buttons below to find your address or <a class="address-supply-manual">fill your address in manually</a>.';
            if (!apply.validation.validateAddressForLookup($whichAddress)) { //If fails validation then show alert and exit function 
                $whichAddress.find('.bfpo-address-find').each(function () { //hide lookup fields from user
                });
                apply.uifunctions.showAlert($whichAddress.closest('.address-section').find('.address-section-error'), errMsg, false);
                return false;
            }

            if ($thisFindButton.text() != '') {
                $thisFindButton.data('original-text', $thisFindButton.text()); //set original text for button in data attribute
            }

            if (isBFPO) {
                $('#AddressSubType').val('BFPO');
                var valid = apply.validation.validateField($('#AddressBfpoCode'), { "highlight": true, "quiet": false });
                if (valid) {

                    $thisFindButton.html('<i class="icon-spinner icon-spin"></i>'); //replace text for button with loading icon (using font awesome web font)
                    $thisFindButton.addClass('disabled'); //add disabled class to button
                    $thisFindButton.prop('disabled', true); //add disabled property to button

                    doBFPOAddressLookup($whichAddress, $thisFindButton);
                    $('.bfpo-address-find').hide();
                } else {
                    $('#Postcode_span1').attr('style', 'display: block;');
                }
            }
            else {
                $thisFindButton.html('<i class="icon-spinner icon-spin"></i>'); //replace text for button with loading icon (using font awesome web font)
                $thisFindButton.addClass('disabled'); //add disabled class to button
                $thisFindButton.prop('disabled', true); //add disabled property to button
                doAddressLookup($whichAddress, $thisFindButton);
            }
            // ReSharper restore UnusedParameter
            return false;
        });
    };

    var extactPartialAddressFromValueString = function ($textValue) {
        indexOfTilda = $textValue.indexOf("~");
        return $textValue.substring(indexOfTilda + 1);
    }
    var extactAddressIDFromValueString = function ($textValue) {
        indexOfTilda = $textValue.indexOf("~");
        return $textValue.substring(0, indexOfTilda);
    }


    function removePostcodeErrorMessage($whichAddress) {
        // REMOVE error message "BFPOCode does not exit" from the relevant BFPOCode field         

        var whatAddressSection = $whichAddress.attr('id');

        if (whatAddressSection == "currentAddress") {  //CURRENT ADDRESS
            apply.uifunctions.showAlert($whichAddress.find('#CurrentAddress_AddressPostcode_span'), "", false);
            $('#CurrentAddress_AddressPostcode_span').attr('data-validation-valid', 'CurrentAddress.AddressPostcode'); //add new attribute
            $('#CurrentAddress_AddressPostcode_span').removeAttr("data-validation-error"); //remove attribute
            $('#CurrentAddress_AddressPostcode_span').attr('style', 'display: none;'); //add new style attribute

            apply.uifunctions.showAlert($whichAddress.find('#Postcode_span'), "", false);
            $('#Postcode_span').attr('data-validation-valid', 'CurrentAddress.AddressPostcode'); //add new attribute
            $('#Postcode_span').removeAttr("data-validation-error"); //remove attribute
            $('#Postcode_span').attr('style', 'display: none;'); //add new style attribute

            // for edit address details ONLY
            apply.uifunctions.showAlert($whichAddress.find('#Postcode_span'), "", false);
            $('#Postcode_span').attr('data-validation-valid', 'Postcode'); //add new attribute
            $('#Postcode_span').removeAttr("data-validation-error"); //remove attribute
            $('#Postcode_span').attr('style', 'display: none;'); //add new style attribute
        }
        if (whatAddressSection == "previousAddress") {  //PREVIOUS ADDRESS
            var $postcode = $whichAddress.find('.address-postcode input');
            $postcode.data('changed', false).removeClass('validation-error-highlight');
            $postcode.closest('.form-row').find("span.help-block")
                .removeAttr('data-validation-error')
                .attr('data-validation-valid', 'PreviousAddress.AddressPostcode')
                .css("display", "none");
        }


        if (whatAddressSection == "earlierPreviousAddress") {  //EARLIER ADDRESS
            apply.uifunctions.showAlert($whichAddress.find('#EarlierPreviousAddress_AddressPostcode_span'), "", false);
            $('#EarlierPreviousAddress_AddressPostcode_span').attr('data-validation-valid', 'EarlierPreviousAddress.AddressPostcode'); //add new attribute
            $('#EarlierPreviousAddress_AddressPostcode_span').removeAttr("data-validation-error"); //remove attribute
            $('#EarlierPreviousAddress_AddressPostcode_span').attr('style', 'display: none;'); //add new style attribute
        }

        if (whatAddressSection == "jacurrentAddress") {  //CURRENT ADDRESS
            apply.uifunctions.showAlert($whichAddress.find('#JACurrentAddress_AddressPostcode_span'), "", false);
            $('#JACurrentAddress_AddressPostcode_span').attr('data-validation-valid', 'JACurrentAddress.AddressPostcode'); //add new attribute
            $('#JACurrentAddress_AddressPostcode_span').removeAttr("data-validation-error"); //remove attribute
            $('#JACurrentAddress_AddressPostcode_span').attr('style', 'display: none;'); //add new style attribute
        }
        if (whatAddressSection == "japreviousAddress") {  //PREVIOUS ADDRESS
            apply.uifunctions.showAlert($whichAddress.find('#JAPreviousAddress_AddressPostcode_span'), "", false);
            $('#JAPreviousAddress_AddressPostcode_span').attr('data-validation-valid', 'JAPreviousAddress.AddressPostcode'); //add new attribute
            $('#JAPreviousAddress_AddressPostcode_span').removeAttr("data-validation-error"); //remove attribute
            $('#JAPreviousAddress_AddressPostcode_span').attr('style', 'display: none;'); //add new style attribute
        }
        if (whatAddressSection == "jaearlierPreviousAddress") {  //EARLIER ADDRESS
            apply.uifunctions.showAlert($whichAddress.find('#JAEarlierPreviousAddress_AddressPostcode_span'), "", false);
            $('#JAEarlierPreviousAddress_AddressPostcode_span').attr('data-validation-valid', 'JAEarlierPreviousAddress.AddressPostcode'); //add new attribute
            $('#JAEarlierPreviousAddress_AddressPostcode_span').removeAttr("data-validation-error"); //remove attribute
            $('#JAEarlierPreviousAddress_AddressPostcode_span').attr('style', 'display: none;'); //add new style attribute
        }

    }

    var addRequired = function () {
        if ($('form').length) {
        }
    }


    var doAddressLookup = function ($whichAddress, $thisFindButton) {
        $addressNotShown = $whichAddress.find('.address-not-shown');
        $addressNotShown.removeClass('bfpo-address-supply-manual');
        $addressNotShown.addClass('address-supply-manual');
        var isPostcodeFormatValid = false;
        var whatAddressSection = $whichAddress.attr('id');
        if (whatAddressSection == "currentAddress") {  //CURRENT ADDRESS
            isPostcodeFormatValid = apply.validation.validateField($('#CurrentAddress_AddressPostcode'), { "highlight": true, "quiet": false });
        }
        else if (whatAddressSection == "previousAddress") {  //PREVIOUS ADDRESS
            isPostcodeFormatValid = apply.validation.validateField($('#PreviousAddress_AddressPostcode'), { "highlight": true, "quiet": false });
        }

        else if (whatAddressSection == "earlierPreviousAddress") {  //EARLIER ADDRESS
            isPostcodeFormatValid = apply.validation.validateField($('#EarlierPreviousAddress_AddressPostcode'), { "highlight": true, "quiet": false });
        }
        else {
            var $addressPostCodeElement = $whichAddress.find("[id$='AddressPostcode']");
            isPostcodeFormatValid = apply.validation.validateField($addressPostCodeElement, { "highlight": true, "quiet": false });
        }

        if (isPostcodeFormatValid) {
            var flatNo = $whichAddress.find('.address-details input[name$=FlatNumber]').val(); //house number
            var houseNumber = $whichAddress.find('.address-details input[name$=HouseNumber]').val();
            if (houseNumber == undefined) {
                houseNumber = $whichAddress.find('.address-details input[name$=BuildingNumber]').val();
            }
            var houseName = $whichAddress.find('.address-details input[name$=HouseName]').val();
            if (houseName == undefined) {
                houseName = $whichAddress.find('.address-details input[name$=BuildingName]').val();
            }
            var postCode = $whichAddress.find('.address-postcode input[name$=Postcode]').val(); //post code
            var bFPOCode = $whichAddress.find('.address-postcode input[name$=BFPOCode]').val(); //BFPOCode

            $.get( //AJAX request to post code lookup service
                applyConfig.baseUrl + 'servicing/service/getaddress', //url of PostCode lookup]
                { HouseNumber: houseNumber, HouseName: houseName, Postcode: postCode, FlatNumber: flatNo, BfpoCode: bFPOCode }, //parameters passed to PostCode lookup
                function (result) { //success handler
                    var $addressSelect;
                    resolvedAddresses = result; //get result

                    var postcodeRetrunsNoResults;
                    if (resolvedAddresses.ResponseStatus === "Success") {
                        //REMOVE error message "Postcode does not exit" from the relevant Postcode field 
                        removePostcodeErrorMessage($whichAddress);

                        //new functionality to handle multiple partial addresses(to the DDL) and/or one definite address(to the fields) from the backend **************
                        if (resolvedAddresses.ExtendedProperties != null && resolvedAddresses.ExtendedProperties.length > 1) {  // there are multiple addresses
                            apply.uifunctions.removeAlert($whichAddress.find('.address-section-error'));

                            $addressSelect = $whichAddress.find('.address-lookup-select select');
                            $addressSelect.empty().append('<option value="">(select one)</option>');

                            for (var i = 0; i < resolvedAddresses.ExtendedProperties.length; i++) { //iterate through addresses
                                var text = "";
                                var partialAddressId = "";
                                if (resolvedAddresses.ExtendedProperties[i].Value !== "") {
                                    text += extactPartialAddressFromValueString(resolvedAddresses.ExtendedProperties[i].Value);
                                    partialAddressId = extactAddressIDFromValueString(resolvedAddresses.ExtendedProperties[i].Value);
                                    if (text != "" && partialAddressId != "") {
                                        $whichAddress.find('.address-lookup-select select').append($("<option></option>").attr("value", partialAddressId).text(text)); //append as new option in select box
                                    }
                                }
                            }
                            apply.validation.validateGroup($whichAddress, { removeOnly: true }); //validate new address

                            $whichAddress.find('.address-lookup-select').attr('data-searchtype', 'postcode');
                            $whichAddress.find('.address-lookup-select').data('collapsible').show(); //show lookup select
                            $whichAddress.find('.address-details, .address-postcode, .address-find').each(function () { //hide lookup fields from user
                                $(this).data('collapsible').hide(0);
                            });
                        }
                        else {
                            // there maybe only one address
                            if (resolvedAddresses.Addresses != null) {
                                if (resolvedAddresses.Addresses.length > 0) { //if one address returned, populate address details with single address

                                    var arr = [resolvedAddresses.Addresses[0].BuildingNumber, resolvedAddresses.Addresses[0].SuiteNumber, resolvedAddresses.Addresses[0].BuildingName];
                                    var arrResult = $.grep(arr, function (n) {
                                        return (n);
                                    });
                                    //if having one of three numbers
                                    if (arrResult.length > 0) {
                                        populateAddress(resolvedAddresses.Addresses[0], $whichAddress, flatNo);
                                        apply.validation.validateGroup($whichAddress, { removeOnly: true }); //validate new address
                                    }
                                    else {
                                        postcodeRetrunsNoResults = true;
                                    }
                                }
                            }
                        }

                        if (postcodeRetrunsNoResults) {

                            //if no addresses returned, then show alert to the user and restore lookup button to original state
                            var errorAddressMessage = 'We cannot find an address to match these details, please try again.';

                            // ADD Postcode error message for non existing postcode
                            var whatAddressSection = $whichAddress.attr('id');
                            if (whatAddressSection === "currentAddress") { //CURRENT ADDRESS

                                if ($('#AddressSubType').val() != undefined) { //For Edit details address ONLY

                                    apply.uifunctions.showAlert($('#Postcode_span'), errorAddressMessage, false);

                                    $('#Postcode_span').attr('data-validation-error', 'Postcode');
                                    $('#Postcode_span').removeAttr("style"); //remove attribute
                                    $('#Postcode_span').removeAttr("data-validation-valid"); //remove attribute

                                    $('#Postcode_span1').removeAttr("data-validation-valid"); //remove attribute
                                    $('#Postcode_span1').attr('data-validation-error', 'Postcode'); //add new attribute
                                }
                                else {
                                    var $CurrentAddressAddressPostcodeSpan = $whichAddress.find('#CurrentAddress_AddressPostcode_span');
                                    var $CurrentAddressAddressPostcodeSpan1 = $whichAddress.find('#CurrentAddress_AddressPostcode_span1');

                                    apply.uifunctions.showAlert($CurrentAddressAddressPostcodeSpan, errorAddressMessage, false);

                                    $CurrentAddressAddressPostcodeSpan.attr('data-validation-error', 'CurrentAddress.AddressPostcode');
                                    $CurrentAddressAddressPostcodeSpan.removeAttr("style"); //remove attribute
                                    $CurrentAddressAddressPostcodeSpan.removeAttr("data-validation-valid"); //remove attribute

                                    $CurrentAddressAddressPostcodeSpan1.attr('data-validation-error', 'CurrentAddress.AddressPostcode'); //add new attribute
                                    $CurrentAddressAddressPostcodeSpan1.removeAttr("data-validation-valid"); //remove attribute
                                }

                            }
                            else if (whatAddressSection === "previousAddress") {
                                //Previous Address
                                var $PreviousAddressAddressPostcodeSpan = $whichAddress.find('#PreviousAddress_AddressPostcode_span');
                                var $PreviousAddressAddressPostcodeSpan1 = $whichAddress.find('#PreviousAddress_AddressPostcode_span1');

                                var $postcode = $whichAddress.find('[name$="AddressPostcode"]');

                                apply.uifunctions.showAlert($PreviousAddressAddressPostcodeSpan, errorAddressMessage, false);
                                $PreviousAddressAddressPostcodeSpan.attr('data-validation-error', 'PreviousAddress.AddressPostcode');
                                $PreviousAddressAddressPostcodeSpan.removeAttr("style"); //remove attribute
                                $PreviousAddressAddressPostcodeSpan.removeAttr("data-validation-valid"); //remove attribute
                                $PreviousAddressAddressPostcodeSpan1.attr('data-validation-error', $postcode.attr('name'));
                                $PreviousAddressAddressPostcodeSpan1.removeAttr('data-validation-valid');
                            }
                            else if (whatAddressSection === "achCurrentAddress") {
                                var $AchCurrentAddressAddressPostcodeSpan = $whichAddress.find('#AchCurrentAddress_AddressPostcode_span');
                                apply.uifunctions.showAlert($AchCurrentAddressAddressPostcodeSpan, errorAddressMessage, false);
                                $AchCurrentAddressAddressPostcodeSpan.attr('data-validation-error', 'AchCurrentAddress.AddressPostcode');
                                $AchCurrentAddressAddressPostcodeSpan.removeAttr("style"); //remove attribute
                                $AchCurrentAddressAddressPostcodeSpan.removeAttr("data-validation-valid"); //remove attribute
                            }

                            else if (whatAddressSection === "achPreviousAddress") {
                                var $AchPreviousAddressAddressPostcodeSpan = $whichAddress.find('#AchPreviousAddress_AddressPostcode_span');
                                apply.uifunctions.showAlert($AchPreviousAddressAddressPostcodeSpan, errorAddressMessage, false);
                                $AchPreviousAddressAddressPostcodeSpan.attr('data-validation-error', 'AchPreviousAddress.AddressPostcode');
                                $AchPreviousAddressAddressPostcodeSpan.removeAttr("style"); //remove attribute
                                $AchPreviousAddressAddressPostcodeSpan.removeAttr("data-validation-valid"); //remove attribute
                            }

                            else if (whatAddressSection === "earlierPreviousAddress") {  //EARLIER ADDRESS  
                                apply.uifunctions.showAlert($whichAddress.find('#EarlierPreviousAddress_AddressPostcode_span'), errorAddressMessage, false);
                                $('#EarlierPreviousAddress_AddressPostcode_span').removeAttr('style');
                                $('#EarlierPreviousAddress_AddressPostcode_span').attr('data-validation-error', 'EarlierPreviousAddress.AddressPostcode'); //add new attribute
                                $('#EarlierPreviousAddress_AddressPostcode_span').removeAttr("data-validation-valid"); //remove attribute
                            }

                            else {
                                var $postcode = $whichAddress.find('[name$="AddressPostcode"]');
                                var $postcodeStatus = $whichAddress.find('[id$="AddressPostcode_span"]');
                                apply.uifunctions.showAlert($postcodeStatus, errorAddressMessage, false);
                                $postcodeStatus.attr('data-validation-error', $postcode.attr('name'));
                                $postcodeStatus.removeAttr('data-validation-valid');
                            }
                        }
                        else {
                            //REMOVE error message "Postcode does not exit" from the relevant Postcode field
                            removePostcodeErrorMessage($whichAddress);
                            $thisFindButton.hide();
                            $whichAddress.find('.address-back').data('collapsible').show();
                        }

                        restoreLookupButton($whichAddress, $thisFindButton);

                    } // if the status is NOT successfull
                    else if (resolvedAddresses.ResponseStatus === "SuccessOneAddress") {
                        if (resolvedAddresses.Addresses != null) {
                            if (resolvedAddresses.Addresses.length > 0) {
                                var resolvedAddress = resolvedAddresses.Addresses[0];
                                if (resolvedAddress.AddressLine1 != null) {
                                    //REMOVE error message "Postcode does not exit" from the relevant Postcode field 
                                    removePostcodeErrorMessage($whichAddress);

                                    populateAddress(resolvedAddress, $whichAddress);

                                    $thisFindButton.hide();
                                    $whichAddress.find('.address-back').data('collapsible').show();
                                    restoreLookupButton($whichAddress, $thisFindButton);
                                }
                            }
                        }
                    }
                    else {
                        //if no addresses returned, then show alert to the user and restore lookup button to original state
                        var errorMessage = 'An unknown error has occurred. Please try again or enter your full address manually.';
                        if (resolvedAddresses.ResponseStatus === "InvalidPostCodeFormat") {
                            errorMessage = 'The postcode has an invalid format. Please try again';
                        } else if (resolvedAddresses.ResponseStatus === "Failed") {
                            errorMessage = 'We cannot find an address to match these details, please try again.';
                        }
                        else if (resolvedAddresses.ResponseStatus === "NotFound") {
                            errorMessage = 'An address for the details entered could not be found. Please try again or enter your address manually.';
                        }
                        // ADD Postcode error message for non existing postcode  
                        var whatAddressSection = $whichAddress.attr('id');
                        if (whatAddressSection == "currentAddress") {  //CURRENT ADDRESS
                            apply.uifunctions.showAlert($whichAddress.find('#CurrentAddress_AddressPostcode_span'), errorMessage, false);
                            $('#CurrentAddress_AddressPostcode_span').attr('data-validation-error', 'CurrentAddress.AddressPostcode'); //add new attribute
                            $('#CurrentAddress_AddressPostcode_span').removeAttr("data-validation-valid"); //remove attribute
                            apply.uifunctions.showAlert($whichAddress.find('#Postcode_span'), errorMessage, false);
                            $('#Postcode_span').attr('data-validation-error', 'CurrentAddress.AddressPostcode'); //add new attribute
                            $('#Postcode_span').removeAttr("data-validation-valid"); //remove attribute

                        }
                        else if (whatAddressSection == "previousAddress") {  //PREVIOUS ADDRESS  
                            apply.uifunctions.showAlert($whichAddress.find('#PreviousAddress_AddressPostcode_span'), errorMessage, false);
                            $('#PreviousAddress_AddressPostcode_span').attr('data-validation-error', 'PreviousAddress.AddressPostcode'); //add new attribute
                            $('#PreviousAddress_AddressPostcode_span').removeAttr("data-validation-valid"); //remove attribute
                        }


                        else if (whatAddressSection === "achCurrentAddress") {  //ACH CURRENT ADDRESS
                            apply.uifunctions.showAlert($whichAddress.find('#AchCurrentAddress_AddressPostcode_span'), errorMessage, false);
                            $('#AchCurrentAddress_AddressPostcode_span').attr('data-validation-error', 'AchCurrentAddress.AddressPostcode'); //add new attribute
                            $('#AchCurrentAddress_AddressPostcode_span').removeAttr("data-validation-valid"); //remove attribute
                            apply.uifunctions.showAlert($whichAddress.find('#Postcode_span'), errorMessage, false);
                            $('#Postcode_span').attr('data-validation-error', 'AchCurrentAddress.AddressPostcode'); //add new attribute
                            $('#Postcode_span').removeAttr("data-validation-valid"); //remove attribute

                        }
                        else if (whatAddressSection === "achPreviousAddress") {  //ACH PREVIOUS ADDRESS  
                            apply.uifunctions.showAlert($whichAddress.find('#AchPreviousAddress_AddressPostcode_span'), errorMessage, false);
                            $('#AchPreviousAddress_AddressPostcode_span').attr('data-validation-error', 'AchPreviousAddress.AddressPostcode'); //add new attribute
                            $('#AchPreviousAddress_AddressPostcode_span').removeAttr("data-validation-valid"); //remove attribute
                        }


                        else if (whatAddressSection == "earlierPreviousAddress") {  //EARLIER ADDRESS  
                            apply.uifunctions.showAlert($whichAddress.find('#EarlierPreviousAddress_AddressPostcode_span'), errorMessage, false);
                            $('#EarlierPreviousAddress_AddressPostcode_span').attr('data-validation-error', 'EarlierPreviousAddress.AddressPostcode'); //add new attribute
                            $('#EarlierPreviousAddress_AddressPostcode_span').removeAttr("data-validation-valid"); //remove attribute
                        }

                        else if (whatAddressSection == "jacurrentAddress") {  //CURRENT ADDRESS 
                            apply.uifunctions.showAlert($whichAddress.find('#JACurrentAddress_AddressPostcode_span'), errorMessage, false);
                            $('#JACurrentAddress_AddressPostcode_span').attr('data-validation-error', 'JACurrentAddress.AddressPostcode'); //add new attribute
                            $('#JACurrentAddress_AddressPostcode_span').removeAttr("data-validation-valid"); //remove attribute
                        }
                        else if (whatAddressSection == "japreviousAddress") {  //PREVIOUS ADDRESS 
                            apply.uifunctions.showAlert($whichAddress.find('#JAPreviousAddress_AddressPostcode_span'), errorMessage, false);
                            $('#JAPreviousAddress_AddressPostcode_span').attr('data-validation-error', 'JAPreviousAddress.AddressPostcode'); //add new attribute
                            $('#JAPreviousAddress_AddressPostcode_span').removeAttr("data-validation-valid"); //remove attribute
                        }
                        else if (whatAddressSection == "jaearlierPreviousAddress") {  //EARLIER ADDRESS 
                            apply.uifunctions.showAlert($whichAddress.find('#JAEarlierPreviousAddress_AddressPostcode_span'), errorMessage, false);
                            $('#JAEarlierPreviousAddress_AddressPostcode_span').attr('data-validation-error', 'JAEarlierPreviousAddress.AddressPostcode'); //add new attribute
                            $('#JAEarlierPreviousAddress_AddressPostcode_span').removeAttr("data-validation-valid"); //remove attribute
                        }
                        else {
                            var $postcode = $whichAddress.find('[name$="AddressPostcode"]');
                            var $postcodeStatus = $whichAddress.find('[id$="AddressPostcode_span"]');
                            apply.uifunctions.showAlert($postcodeStatus, errorMessage, false);
                            $postcodeStatus.attr('data-validation-error', $postcode.attr('name'));
                            $postcodeStatus.removeAttr('data-validation-valid');
                        }

                        restoreLookupButton($whichAddress, $thisFindButton);
                    }
                },
                "json" //format of ajax result
                // ReSharper disable UnusedParameter
            ).fail(function (xhr, status, error) { //on ajax fail, show error and restore lookup button to original state
                apply.uifunctions.showAlert($whichAddress.find('.address-section-error'), '<i class="icon-warning-sign icon-2x"></i> The Postcode lookup service is not available at the moment. Please try again. If the problem still persists, please <a class="address-supply-manual" href="#">enter your full address manually</a>.');
                restoreLookupButton($whichAddress, $thisFindButton);
            });
        }
        else {
            restoreLookupButton($whichAddress, $thisFindButton);
        }
    }

    function removeBFPOErrorMessage($whichAddress) {
        // REMOVE error message "BFPOCode does not exit" from the relevant BFPOCode field         

        var whatAddressSection = $whichAddress.attr('id');

        if (whatAddressSection === "currentAddress") {  //CURRENT ADDRESS
            apply.uifunctions.showAlert($whichAddress.find('#CurrentAddress_AddressBFPOCode_span'), "", false);
            $('#CurrentAddress_AddressBFPOCode_span').attr('data-validation-valid', 'CurrentAddress.AddressBFPOCode'); //add new attribute
            $('#CurrentAddress_AddressBFPOCode_span').removeAttr("data-validation-error"); //remove attribute
            $('#CurrentAddress_AddressBFPOCode_span').attr('style', 'display: none;'); //add new style attribute
            apply.uifunctions.showAlert($whichAddress.find('#CurrentAddress_AddressBFPOCode_span1'), "", false);
            $('#CurrentAddress_AddressBFPOCode_span1').attr('data-validation-valid', 'CurrentAddress.AddressBFPOCode'); //add new attribute
            $('#CurrentAddress_AddressBFPOCode_span1').removeAttr("data-validation-error"); //remove attribute
            $('#CurrentAddress_AddressBFPOCode_span1').attr('style', 'display: none;'); //add new style attribute

            var $bfpoCodeInput = $whichAddress.find(".bfpo-code input[name$='AddressBFPOCode']");
            var isBfpoCodeValid = apply.validation.validateField($bfpoCodeInput, { removeOnly: true });
            if (isBfpoCodeValid) {
                $bfpoCodeInput.closest('.form-row').find("span.help-block").css("display", "block");
                apply.validation.validateField($whichAddress.find('.bfpo-details input[name$=AddressBFPOLocation3]'), { "highlight": true, "quiet": false });
            }

            //For Edit details address ONLY
            apply.uifunctions.showAlert($whichAddress.find('#AddressBfpoCode_span'), "", false);
            $('#AddressBfpoCode_span').attr('data-validation-valid', 'AddressBfpoCode'); //add new attribute
            $('#AddressBfpoCode_span').removeAttr("data-validation-error"); //remove attribute
            $('#AddressBfpoCode_span').attr('style', 'display: none;'); //add new style attribute
            apply.uifunctions.showAlert($whichAddress.find('#AddressBfpoCode_span1'), "", false);
            $('#AddressBfpoCode_span1').attr('data-validation-valid', 'AddressBfpoCode'); //add new attribute
            $('#AddressBfpoCode_span1').removeAttr("data-validation-error"); //remove attribute
            if ($whichAddress.find('#AddressBfpoCode').val() == '') {
                $('#AddressBfpoCode_span1').attr('style', 'display: none;'); //add new style attribute
            } else {
                $('#AddressBfpoCode_span1').attr('style', 'display: block;');
            }

            //***** remove the message *******************            
            $('#currentAddress').children().filter(":not(#jacurrentAddress)").find('span[data-validation-error]').text("");
            $('#currentAddress').children().filter(":not(#jacurrentAddress)").find('span[data-validation-error]').attr('style', 'display: none;');
            $('#currentAddress').children().filter(":not(#jacurrentAddress)").find('input.validation-error-highlight').removeClass("validation-error-highlight");
            $('#currentAddress').children().filter(":not(#jacurrentAddress)").find('select.validation-error-highlight').removeClass("validation-error-highlight");

        }
        if (whatAddressSection == "previousAddress") {  //PREVIOUS ADDRESS
            var $bfpocode = $whichAddress.find('.bfpo-code input');
            $bfpocode.data('changed', false).removeClass('validation-error-highlight');
            $bfpocode.closest('.form-row').find("span.help-block")
                .removeAttr('data-validation-error')
                .attr('data-validation-valid', 'PreviousAddress.AddressBFPOCode')
                .css("display", "none");

            var isBfpoCodeValid = apply.validation.validateField($bfpocode, { removeOnly: true });
            if (isBfpoCodeValid) {
                $bfpocode.closest('.form-row').find("span.help-block").css("display", "block");
                apply.validation.validateField($whichAddress.find('.bfpo-details input[name$=AddressBFPOLocation3]'), { "highlight": true, "quiet": false });
            }
        }



        //*****************************ACH BFPO *************************//
        if (whatAddressSection === "achCurrentAddress") {  //CURRENT ADDRESS
            apply.uifunctions.showAlert($whichAddress.find('#AchCurrentAddress_AddressBFPOCode_span'), "", false);
            $('#AchCurrentAddress_AddressBFPOCode_span').attr('data-validation-valid', 'AchCurrentAddress.AddressBFPOCode'); //add new attribute
            $('#AchCurrentAddress_AddressBFPOCode_span').removeAttr("data-validation-error"); //remove attribute
            $('#AchCurrentAddress_AddressBFPOCode_span').attr('style', 'display: none;'); //add new style attribute

            apply.uifunctions.showAlert($whichAddress.find('#achCurrentAddress_AddressBFPOCode_span1'), "", false);

            $('#AchCurrentAddress_AddressBFPOCode_span1').attr('data-validation-valid', 'AchCurrentAddress.AddressBFPOCode'); //add new attribute
            $('#AchCurrentAddress_AddressBFPOCode_span1').removeAttr("data-validation-error"); //remove attribute
            $('#AchCurrentAddress_AddressBFPOCode_span1').attr('style', 'display: none;'); //add new style attribute

            var $bfpoCodeInput = $whichAddress.find(".bfpo-code input[name$='AddressBFPOCode']");
            var isBfpoCodeValid = apply.validation.validateField($bfpoCodeInput, { removeOnly: true });
            if (isBfpoCodeValid) {
                $bfpoCodeInput.closest('.form-row').find("span.help-block").css("display", "block");
                apply.validation.validateField($whichAddress.find('.bfpo-details input[name$=AddressBFPOLocation3]'), { "highlight": true, "quiet": false });
            }

            //For Edit details address ONLY
            apply.uifunctions.showAlert($whichAddress.find('#AddressBfpoCode_span'), "", false);
            $('#AddressBfpoCode_span').attr('data-validation-valid', 'AddressBfpoCode'); //add new attribute
            $('#AddressBfpoCode_span').removeAttr("data-validation-error"); //remove attribute
            $('#AddressBfpoCode_span').attr('style', 'display: none;'); //add new style attribute
            apply.uifunctions.showAlert($whichAddress.find('#AddressBfpoCode_span1'), "", false);
            $('#AddressBfpoCode_span1').attr('data-validation-valid', 'AddressBfpoCode'); //add new attribute
            $('#AddressBfpoCode_span1').removeAttr("data-validation-error"); //remove attribute
            if ($whichAddress.find('#AddressBfpoCode').val() == '') {
                $('#AddressBfpoCode_span1').attr('style', 'display: none;'); //add new style attribute
            } else {
                $('#AddressBfpoCode_span1').attr('style', 'display: block;');
            }

            //***** remove the message *******************            
            $('#AchCurrentAddress').children().filter(":not(#jacurrentAddress)").find('span[data-validation-error]').text("");
            $('#AchCurrentAddress').children().filter(":not(#jacurrentAddress)").find('span[data-validation-error]').attr('style', 'display: none;');
            $('#AchCurrentAddress').children().filter(":not(#jacurrentAddress)").find('input.validation-error-highlight').removeClass("validation-error-highlight");
            $('#AchCurrentAddress').children().filter(":not(#jacurrentAddress)").find('select.validation-error-highlight').removeClass("validation-error-highlight");
        }

        if (whatAddressSection == "achPreviousAddress") {  //PREVIOUS ADDRESS
            var $bfpocode = $whichAddress.find('.bfpo-code input');
            $bfpocode.data('changed', false).removeClass('validation-error-highlight');
            $bfpocode.closest('.form-row').find("span.help-block")
                .removeAttr('data-validation-error')
                .attr('data-validation-valid', 'AchPreviousAddress.AddressBFPOCode')
                .css("display", "none");

            var isBfpoCodeValid = apply.validation.validateField($bfpocode, { removeOnly: true });
            if (isBfpoCodeValid) {
                $bfpocode.closest('.form-row').find("span.help-block").css("display", "block");
                apply.validation.validateField($whichAddress.find('.bfpo-details input[name$=AddressBFPOLocation3]'), { "highlight": true, "quiet": false });
            }

            //***** remove the message ******************* 
            $('#AchPreviousAddress_AddressPostcode').removeClass("validation-error-highlight");
            $("#AchPreviousAddress").children().filter(":not(#jacurrentAddress)").find("span[data-validation-error]").text("");
            $("#AchPreviousAddress").children().filter(":not(#jacurrentAddress)").find("span[data-validation-error]").attr("style", "display: none;");
            $("#AchPreviousAddress").children().filter(":not(#jacurrentAddress)").find('input.validation-error-highlight').removeClass("validation-error-highlight");
            $("#AchPreviousAddress").children().filter(":not(#jacurrentAddress)").find('select.validation-error-highlight').removeClass("validation-error-highlight");
        }
        //*************************END ACH BFPO *************************//


        if (whatAddressSection == "earlierPreviousAddress") {  //EARLIER ADDRESS
            apply.uifunctions.showAlert($whichAddress.find('#EarlierPreviousAddress_AddressBFPOCode_span'), "", false);
            $('#EarlierPreviousAddress_AddressBFPOCode_span').attr('data-validation-valid', 'EarlierPreviousAddress.AddressBFPOCode'); //add new attribute  
            $('#EarlierPreviousAddress_AddressBFPOCode_span').removeAttr("data-validation-error"); //remove attribute
            $('#EarlierPreviousAddress_AddressBFPOCode_span').attr('style', 'display: none;'); //add new style attribute

            var $bfpoCodeInput = $whichAddress.find(".bfpo-code input[name$='AddressBFPOCode']");
            var isBfpoCodeValid = apply.validation.validateField($bfpoCodeInput, { removeOnly: true });
            if (isBfpoCodeValid) {
                $bfpoCodeInput.closest('.form-row').find("span.help-block").css("display", "block");
                apply.validation.validateField($whichAddress.find('.bfpo-details input[name$=AddressBFPOLocation3]'), { "highlight": true, "quiet": false });
            }

            apply.uifunctions.showAlert($whichAddress.find('#EarlierPreviousAddress_AddressBFPOCode_span1'), "", false);
            $('#EarlierPreviousAddress_AddressBFPOCode_span1').attr('data-validation-valid', 'EarlierPreviousAddress.AddressBFPOCode'); //add new attribute  
            $('#EarlierPreviousAddress_AddressBFPOCode_span1').removeAttr("data-validation-error"); //remove attribute
            $('#EarlierPreviousAddress_AddressBFPOCode_span1').attr('style', 'display: none;'); //add new style attribute

            //***** remove the message *******************            
            $('#earlierPreviousAddress').children().filter(":not(#jaearlierPreviousAddress)").find('span[data-validation-error]').text("");
            $('#earlierPreviousAddress').children().filter(":not(#jaearlierPreviousAddress)").find('span[data-validation-error]').attr('style', 'display: none;');
            $('#earlierPreviousAddress').children().filter(":not(#jaearlierPreviousAddress)").find('input.validation-error-highlight').removeClass("validation-error-highlight");
            $('#earlierPreviousAddress').children().filter(":not(#jaearlierPreviousAddress)").find('select.validation-error-highlight').removeClass("validation-error-highlight");
        }

        if (whatAddressSection == "jacurrentAddress") {  //CURRENT ADDRESS
            apply.uifunctions.showAlert($whichAddress.find('#JACurrentAddress_AddressBFPOCode_span'), "", false);
            $('#JACurrentAddress_AddressBFPOCode_span').attr('data-validation-valid', 'JACurrentAddress.AddressBFPOCode'); //add new attribute
            $('#JACurrentAddress_AddressBFPOCode_span').removeAttr("data-validation-error"); //remove attribute
            $('#JACurrentAddress_AddressBFPOCode_span').attr('style', 'display: none;'); //add new style attribute

            var $bfpoCodeInput = $whichAddress.find(".bfpo-code input[name$='AddressBFPOCode']");
            var isBfpoCodeValid = apply.validation.validateField($bfpoCodeInput, { removeOnly: true });
            if (isBfpoCodeValid) {
                $bfpoCodeInput.closest('.form-row').find("span.help-block").css("display", "block");
                apply.validation.validateField($whichAddress.find('.bfpo-details input[name$=AddressBFPOLocation3]'), { "highlight": true, "quiet": false });
            }

            apply.uifunctions.showAlert($whichAddress.find('#JACurrentAddress_AddressBFPOCode_span1'), "", false);
            $('#JACurrentAddress_AddressBFPOCode_span1').attr('data-validation-valid', 'JACurrentAddress.AddressBFPOCode'); //add new attribute
            $('#JACurrentAddress_AddressBFPOCode_span1').removeAttr("data-validation-error"); //remove attribute
            $('#JACurrentAddress_AddressBFPOCode_span1').attr('style', 'display: none;'); //add new style attribute
            //***** remove the message *******************
            $("#jacurrentAddress span[data-validation-error]").text("");
            $('#jacurrentAddress span[data-validation-error]').attr('style', 'display: none;'); //add new style attribute
            $('#jacurrentAddress input.validation-error-highlight').removeClass("validation-error-highlight"); //remove attribute            
            $('#jacurrentAddress select.validation-error-highlight').removeClass("validation-error-highlight"); //remove attribute
        }
        if (whatAddressSection == "japreviousAddress") {  //PREVIOUS ADDRESS
            apply.uifunctions.showAlert($whichAddress.find('#JAPreviousAddress_AddressBFPOCode_span'), "", false);
            $('#JAPreviousAddress_AddressBFPOCode_span').attr('data-validation-valid', 'JAPreviousAddress.AddressBFPOCode'); //add new attribute
            $('#JAPreviousAddress_AddressBFPOCode_span').removeAttr("data-validation-error"); //remove attribute
            $('#JAPreviousAddress_AddressBFPOCode_span').attr('style', 'display: none;'); //add new style attribute

            var $bfpoCodeInput = $whichAddress.find(".bfpo-code input[name$='AddressBFPOCode']");
            var isBfpoCodeValid = apply.validation.validateField($bfpoCodeInput, { removeOnly: true });
            if (isBfpoCodeValid) {
                $bfpoCodeInput.closest('.form-row').find("span.help-block").css("display", "block");
                apply.validation.validateField($whichAddress.find('.bfpo-details input[name$=AddressBFPOLocation3]'), { "highlight": true, "quiet": false });
            }

            apply.uifunctions.showAlert($whichAddress.find('#JAPreviousAddress_AddressBFPOCode_span1'), "", false);
            $('#JAPreviousAddress_AddressBFPOCode_span1').attr('data-validation-valid', 'JAPreviousAddress.AddressBFPOCode'); //add new attribute
            $('#JAPreviousAddress_AddressBFPOCode_span1').removeAttr("data-validation-error"); //remove attribute
            $('#JAPreviousAddress_AddressBFPOCode_span1').attr('style', 'display: none;'); //add new style attribute

            //***** remove the message *******************
            $("#japreviousAddress span[data-validation-error]").text("");
            $('#japreviousAddress span[data-validation-error]').attr('style', 'display: none;'); //add new style attribute
            $('#japreviousAddress input.validation-error-highlight').removeClass("validation-error-highlight"); //remove attribute            
            $('#japreviousAddress select.validation-error-highlight').removeClass("validation-error-highlight"); //remove attribute
        }
        if (whatAddressSection == "jaearlierPreviousAddress") {  //EARLIER ADDRESS
            apply.uifunctions.showAlert($whichAddress.find('#JAEarlierPreviousAddress_AddressBFPOCode_span'), "", false);
            $('#JAEarlierPreviousAddress_AddressBFPOCode_span').attr('data-validation-valid', 'JAEarlierPreviousAddress.AddressBFPOCode'); //add new attribute
            $('#JAEarlierPreviousAddress_AddressBFPOCode_span').removeAttr("data-validation-error"); //remove attribute
            $('#JAEarlierPreviousAddress_AddressBFPOCode_span').attr('style', 'display: none;'); //add new style attribute

            var $bfpoCodeInput = $whichAddress.find(".bfpo-code input[name$='AddressBFPOCode']");
            var isBfpoCodeValid = apply.validation.validateField($bfpoCodeInput, { removeOnly: true });
            if (isBfpoCodeValid) {
                $bfpoCodeInput.closest('.form-row').find("span.help-block").css("display", "block");
                apply.validation.validateField($whichAddress.find('.bfpo-details input[name$=AddressBFPOLocation3]'), { "highlight": true, "quiet": false });
            }

            apply.uifunctions.showAlert($whichAddress.find('#JAEarlierPreviousAddress_AddressBFPOCode_span1'), "", false);
            $('#JAEarlierPreviousAddress_AddressBFPOCode_span1').attr('data-validation-valid', 'JAEarlierPreviousAddress.AddressBFPOCode'); //add new attribute
            $('#JAEarlierPreviousAddress_AddressBFPOCode_span1').removeAttr("data-validation-error"); //remove attribute
            $('#JAEarlierPreviousAddress_AddressBFPOCode_span1').attr('style', 'display: none;'); //add new style attribute

            //***** remove the message *******************
            $("#jaearlierPreviousAddress span[data-validation-error]").text("");
            $('#jaearlierPreviousAddress span[data-validation-error]').attr('style', 'display: none;'); //add new style attribute
            $('#jaearlierPreviousAddress input.validation-error-highlight').removeClass("validation-error-highlight"); //remove attribute            
            $('#jaearlierPreviousAddress select.validation-error-highlight').removeClass("validation-error-highlight"); //remove attribute
        }
    }

    function removeNextAddressValidation($whichAddress) {
        // REMOVE all error validation icons/text 
        var whatAddressSection = $whichAddress.attr('id');
        if (whatAddressSection == "previousAddress") {  //PREVIOUS ADDRESS
            $("#previousAddress span[data-validation-error]").text("");
            $whichAddress.find('#PreviousAddress_AddressFlatNumber, #PreviousAddress_AddressHouseNumber, #PreviousAddress_AddressHouseName, #PreviousAddress_AddressPostcode').each(function () {

                if ($(this).hasClass('validation-error-highlight')) {
                    $(this).next("span.help-block").removeAttr("data-validation-error");
                    $(this).next("span.help-block").attr("data-validation-valid", $(this).attr('name'));
                    $(this).next("span.help-block").attr("style", 'display: none;');
                    $(this).removeClass("validation-error-highlight");
                }
                $("#PreviousAddress_AddressPostcode_span").attr("style", 'display: none;');
            });

        }

        if (whatAddressSection === "achPreviousAddress") {  //PREVIOUS ADDRESS
            $("#AchPreviousAddress span[data-validation-error]").text("");
            $whichAddress.find('#AchPreviousAddress_AddressFlatNumber, #AchPreviousAddress_AddressHouseNumber, #AchPreviousAddress_AddressHouseName, #AchPreviousAddress_AddressPostcode').each(function () {

                if ($(this).hasClass('validation-error-highlight')) {
                    $(this).next("span.help-block").removeAttr("data-validation-error");
                    $(this).next("span.help-block").attr("data-validation-valid", $(this).attr('name'));
                    $(this).next("span.help-block").attr("style", 'display: none;');
                    $(this).removeClass("validation-error-highlight");
                }
                $("#AchPreviousAddress_AddressPostcode_span").attr("style", 'display: none;');
            });

        }

        if (whatAddressSection == "earlierPreviousAddress") {  //EARLIER ADDRESS

            $("#earlierPreviousAddress span[data-validation-error]").text("");
            $whichAddress.find('#EarlierPreviousAddress_AddressFlatNumber, #EarlierPreviousAddress_AddressHouseNumber, #EarlierPreviousAddress_AddressHouseName, #EarlierPreviousAddress_AddressPostcode').each(function () {

                if ($(this).hasClass('validation-error-highlight')) {
                    $(this).next("span.help-block").removeAttr("data-validation-error");
                    $(this).next("span.help-block").attr("data-validation-valid", $(this).attr('name'));
                    $(this).next("span.help-block").attr("style", 'display: none;');
                    $(this).removeClass("validation-error-highlight");
                }

                $("#EarlierPreviousAddress_AddressPostcode_span").attr("style", 'display: none;');

            });
        }
    }

    var validatePostcodeOrBFPOCodeForFindAddress = function ($whichAddress, valid) {
        $whichAddress.each(function () {
            var isBFPO = IsBFPO($(this));
            if (isBFPO) {
                var textVal = $(this).find('input[name$=AddressBFPOCode]').val();

                if (!textVal.match(/\S/)) {
                } else {

                    var elementBFPOCode = $(this).find('input[name$=AddressBFPOCode]');
                    var findAddressButton = $(this).find('.address-supply-lookup');
                    var myElementDetails = $(this).find('#bfpodetails');

                    if (findAddressButton.is(':visible') && myElementDetails.is(':hidden')) {
                        apply.validation.validateField(elementBFPOCode, { "highlight": true, "quiet": false });
                        var bfpoError = $("form").find("[{0}=\"{2}\"], [{1}=\"{2}\"]".format("data-validation-error", "data-validation-valid", elementBFPOCode.attr('name')));
                        $(bfpoError).attr('data-validation-error', elementBFPOCode.attr('name'));
                        $(bfpoError).removeAttr('data-validation-valid');
                        $(bfpoError).text('Please click ' + "'" + "Find address" + "'" + '.');
                        elementBFPOCode.addClass('validation-error-highlight');
                        valid = false;
                    }
                }
            }
            //normal address
            var postcodeVal = $(this).find('input[name$=AddressPostcode]').val();
            if (!postcodeVal.match(/\S/)) {
            } else {
                var postcodeElement = $(this).find('input[name$=AddressPostcode]');
                var findAddressButton = $(this).find('.address-supply-lookup');
                var myElementDetails = $(this).find('#Postcode_details');

                if (findAddressButton.is(':visible') && myElementDetails.is(':hidden')) {
                    apply.validation.validateField(postcodeElement, { "highlight": true, "quiet": false });
                    var postcodeError = $("form").find("[{0}=\"{2}\"], [{1}=\"{2}\"]".format("data-validation-error", "data-validation-valid", postcodeElement.attr('name')));
                    $(postcodeError).attr('data-validation-error', postcodeElement.attr('name'));
                    $(postcodeError).removeAttr('data-validation-valid');
                    $(postcodeError).text('Please click ' + "'" + "Find address" + "'" + '.');
                    postcodeElement.addClass('validation-error-highlight');
                    valid = false;
                }
            }
        });
        return valid;
    };



    var BFPOAddresses = ""; // GLOBAL VARIABLE
    var doBFPOAddressLookup = function ($whichAddress, $thisFindButton) {
        $addressNotShown = $whichAddress.find('.address-not-shown');
        $addressNotShown.removeClass('address-supply-manual');
        $addressNotShown.addClass('bfpo-address-supply-manual');
        var isBFPOCodeFormatValid = false;
        var whatAddressSection = $whichAddress.attr('id');
        if ($('#AddressSubType').val() != undefined) { //For Edit details address ONLY
            isBFPOCodeFormatValid = apply.validation.validateField($('#AddressBfpoCode'), { "highlight": true, "quiet": false });
        }

        if (whatAddressSection == "currentAddress") {  //CURRENT ADDRESS
            isBFPOCodeFormatValid = apply.validation.validateField($('#CurrentAddress_AddressBFPOCode'), { "highlight": true, "quiet": false });
        }
        else if (whatAddressSection == "previousAddress") {  //PREVIOUS ADDRESS
            isBFPOCodeFormatValid = apply.validation.validateField($('#PreviousAddress_AddressBFPOCode'), { "highlight": true, "quiet": false });
        }
        else if (whatAddressSection == "achCurrentAddress") {  //CURRENT ADDRESS
            isBFPOCodeFormatValid = apply.validation.validateField($('#AchCurrentAddress_AddressBFPOCode'), { "highlight": true, "quiet": false });
        }

        else if (whatAddressSection == "achPreviousAddress") {  //EARLIER ADDRESS
            isBFPOCodeFormatValid = apply.validation.validateField($('#AchPreviousAddress_AddressBFPOCode'), { "highlight": true, "quiet": false });
        }

        else if (whatAddressSection == "earlierPreviousAddress") {  //EARLIER ADDRESS
            isBFPOCodeFormatValid = apply.validation.validateField($('#EarlierPreviousAddress_AddressBFPOCode'), { "highlight": true, "quiet": false });
        }
        else {
            var $addressBFPOCodeElement = $whichAddress.find("[id$='AddressBFPOCode']");
            isBFPOCodeFormatValid = apply.validation.validateField($addressBFPOCodeElement, { "highlight": true, "quiet": false });
        }

        if (isBFPOCodeFormatValid) {
            var bFPOCode = $whichAddress.find('input[name$=AddressBFPOCode]').val(); //BFPO code
            if ($('#AddressSubType').val() != undefined) {
                bFPOCode = $whichAddress.find('input[name$=AddressBfpoCode]').val(); // For EDIT DETAILS only
            }

            var houseNumber = $whichAddress.find('.address-details input[name$=HouseNumber]').val(); //house number
            var houseName = $whichAddress.find('.address-details input[name$=HouseName]').val(); //house name
            var postCode = $whichAddress.find('.address-postcode input[name$=Postcode]').val(); //post code
            var flatNo = "";
            $.get( //AJAX request to BFPO code lookup service
                applyConfig.baseUrl + 'servicing/service/getaddress', //url of BFPOCode lookup]
                { HouseNumber: houseNumber, HouseName: houseName, Postcode: postCode, FlatNumber: flatNo, BfpoCode: bFPOCode }, //parameters passed to PostCode lookup
                function (result) { //success handler
                    var $addressSelect;
                    resolvedAddresses = result; //get result
                    if (resolvedAddresses.ResponseStatus === "Success") {

                        BFPOAddresses = resolvedAddresses.Addresses;
                        apply.uifunctions.removeAlert($whichAddress.find('.address-section-error'));

                        var x = resolvedAddresses.ExtendedProperties;

                        if (typeof x == 'undefined') { //if one address returned, populate address details with single address
                            populateBFPOAddress(resolvedAddresses.Addresses[0], $whichAddress);
                            apply.validation.validateGroup($whichAddress, { removeOnly: true }); //validate new address
                        } else { //if more than one address returned...
                            $addressSelect = $whichAddress.find('.address-lookup-select select');
                            $addressSelect.empty().append('<option value="">(select one)</option>');
                            $whichAddress.find('.address-living, .bfpo-code').each(function () {
                                $(this).data('collapsible').hide();
                            });

                            for (var i = 0; i < resolvedAddresses.ExtendedProperties.length; i++) { //iterate through addresses
                                var text = "";
                                var partialAddressId = "";
                                if (resolvedAddresses.ExtendedProperties[i].Value !== "") {
                                    text += extactPartialAddressFromValueString(resolvedAddresses.ExtendedProperties[i].Value);
                                    partialAddressId = extactAddressIDFromValueString(resolvedAddresses.ExtendedProperties[i].Value);
                                    if (text != "" && partialAddressId != "") {
                                        $whichAddress.find('.address-lookup-select select').append($("<option></option>").attr("value", partialAddressId).text(text)); //append as new option in select box
                                    }
                                }
                            }
                            apply.validation.validateGroup($whichAddress, { removeOnly: true }); //validate new address

                            $whichAddress.find('.address-lookup-select').attr('data-searchtype', 'bfpocode');
                            $whichAddress.find('.address-lookup-select').data('collapsible').show(); //show lookup select
                            $whichAddress.find('.address-details, .address-postcode, .bfpo-address-find').each(function () { //hide lookup fields from user
                                $(this).data('collapsible').hide(0);
                            });
                        }
                        // REMOVE error message "BFPOCode does not exit" from the relevant BFPOCode field 
                        removeBFPOErrorMessage($whichAddress);

                        $thisFindButton.hide();
                        restoreLookupButton($whichAddress, $thisFindButton);
                    }
                    else if (resolvedAddresses.ResponseStatus === "SuccessOneAddress") {
                        if (resolvedAddresses.Addresses != null) {
                            if (resolvedAddresses.Addresses.length > 0) {
                                // REMOVE error message "BFPOCode does not exit" from the relevant BFPOCode field 
                                removeBFPOErrorMessage($whichAddress);

                                var resolvedAddress = resolvedAddresses.Addresses[0];
                                populateBFPOAddress(resolvedAddress, $whichAddress);
                                $thisFindButton.hide();
                                $whichAddress.find('.address-back').data('collapsible').show();
                                restoreLookupButton($whichAddress, $thisFindButton);
                            }
                        }
                    }
                    else {
                        //if no addresses returned, then show alert to the user and restore lookup button to original state
                        var errorMessage = 'An unknown error has occurred. Please try again or enter your full address manually.';
                        if (resolvedAddresses.ResponseStatus === "InvalidBFPOCodeFormat") {
                            errorMessage = 'The BFPO code has an invalid format. Please try again. ';
                        } else if (resolvedAddresses.ResponseStatus === "Failed") {
                            errorMessage = 'No address has been found for this BFPO postcode. Please try again or enter it manually.';
                        }
                        //ADD BFPO error message for non existing code 
                        var whatAddressSection = $whichAddress.attr('id');
                        if (whatAddressSection == "currentAddress") {  //CURRENT ADDRESS
                            apply.uifunctions.showAlert($whichAddress.find('#CurrentAddress_AddressBFPOCode_span'), errorMessage, false);
                            $('#CurrentAddress_AddressBFPOCode_span').attr('data-validation-error', 'CurrentAddress.AddressBFPOCode'); //add new attribute
                            $('#CurrentAddress_AddressBFPOCode_span').removeAttr("data-validation-valid"); //remove attribute
                            apply.uifunctions.showAlert($whichAddress.find('#CurrentAddress_AddressBFPOCode_span1'), errorMessage, false);
                            $('#CurrentAddress_AddressBFPOCode_span1').attr('data-validation-error', 'CurrentAddress.AddressBFPOCode'); //add new attribute
                            $('#CurrentAddress_AddressBFPOCode_span1').removeAttr("data-validation-valid"); //remove attribute
                            // *** edit address details ONLY ***
                            apply.uifunctions.showAlert($whichAddress.find('#AddressBfpoCode_span'), errorMessage, false);
                            $('#AddressBfpoCode_span').attr('data-validation-error', 'AddressBfpoCode'); //add new attribute
                            $('#AddressBfpoCode_span').removeAttr("data-validation-valid"); //remove attribute
                            apply.uifunctions.showAlert($whichAddress.find('#AddressBfpoCode_span1'), errorMessage, false);
                            $('#AddressBfpoCode_span1').attr('data-validation-error', 'AddressBfpoCode'); //add new attribute
                            $('#AddressBfpoCode_span1').removeAttr("data-validation-valid"); //remove attribute
                        }
                        else if (whatAddressSection == "previousAddress") {  //PREVIOUS ADDRESS  
                            apply.uifunctions.showAlert($whichAddress.find('#PreviousAddress_AddressBFPOCode_span'), errorMessage, false);
                            $('#PreviousAddress_AddressBFPOCode_span').attr('data-validation-error', 'PreviousAddress.AddressBFPOCode'); //add new attribute
                            $('#PreviousAddress_AddressBFPOCode_span').removeAttr("data-validation-valid"); //remove attribute

                            apply.uifunctions.showAlert($whichAddress.find('#PreviousAddress_AddressBFPOCode_span1'), errorMessage, false);
                            $('#PreviousAddress_AddressBFPOCode_span1').attr('data-validation-error', 'PreviousAddress.AddressBFPOCode'); //add new attribute
                            $('#PreviousAddress_AddressBFPOCode_span1').removeAttr("data-validation-valid"); //remove attribute
                        }


                        if (whatAddressSection == "achCurrentAddress") {  //ACH CURRENT ADDRESS
                            apply.uifunctions.showAlert($whichAddress.find('#AchCurrentAddress_AddressBFPOCode_span'), errorMessage, false);
                            $('#AchCurrentAddress_AddressBFPOCode_span').attr('data-validation-error', 'CurrentAddress.AddressBFPOCode'); //add new attribute
                            $('#AchCurrentAddress_AddressBFPOCode_span').removeAttr("data-validation-valid"); //remove attribute
                            apply.uifunctions.showAlert($whichAddress.find('#CurrentAddress_AddressBFPOCode_span1'), errorMessage, false);
                            $('#AchCurrentAddress_AddressBFPOCode_span1').attr('data-validation-error', 'CurrentAddress.AddressBFPOCode'); //add new attribute
                            $('#AchCurrentAddress_AddressBFPOCode_span1').removeAttr("data-validation-valid"); //remove attribute
                            // *** edit address details ONLY ***
                            apply.uifunctions.showAlert($whichAddress.find('#AddressBfpoCode_span'), errorMessage, false);
                            $('#AddressBfpoCode_span').attr('data-validation-error', 'AddressBfpoCode'); //add new attribute
                            $('#AddressBfpoCode_span').removeAttr("data-validation-valid"); //remove attribute
                            apply.uifunctions.showAlert($whichAddress.find('#AddressBfpoCode_span1'), errorMessage, false);
                            $('#AddressBfpoCode_span1').attr('data-validation-error', 'AddressBfpoCode'); //add new attribute
                            $('#AddressBfpoCode_span1').removeAttr("data-validation-valid"); //remove attribute
                        }
                        else if (whatAddressSection == "achPreviousAddress") {  //ACH PREVIOUS ADDRESS  
                            apply.uifunctions.showAlert($whichAddress.find('#AchPreviousAddress_AddressBFPOCode_span'), errorMessage, false);
                            $('#AchPreviousAddress_AddressBFPOCode_span').attr('data-validation-error', 'AchPreviousAddress.AddressBFPOCode'); //add new attribute
                            $('#AchPreviousAddress_AddressBFPOCode_span').removeAttr("data-validation-valid"); //remove attribute

                            apply.uifunctions.showAlert($whichAddress.find('#AchPreviousAddress_AddressBFPOCode_span1'), errorMessage, false);
                            $('#AchPreviousAddress_AddressBFPOCode_span1').attr('data-validation-error', 'AchPreviousAddress.AddressBFPOCode'); //add new attribute
                            $('#AchPreviousAddress_AddressBFPOCode_span1').removeAttr("data-validation-valid"); //remove attribute
                        }

                        else if (whatAddressSection == "earlierPreviousAddress") {  //EARLIER ADDRESS  
                            apply.uifunctions.showAlert($whichAddress.find('#EarlierPreviousAddress_AddressBFPOCode_span'), errorMessage, false);
                            $('#EarlierPreviousAddress_AddressBFPOCode_span').attr('data-validation-error', 'EarlierPreviousAddress.AddressBFPOCode'); //add new attribute
                            $('#EarlierPreviousAddress_AddressBFPOCode_span').removeAttr("data-validation-valid"); //remove attribute

                            apply.uifunctions.showAlert($whichAddress.find('#EarlierPreviousAddress_AddressBFPOCode_span1'), errorMessage, false);
                            $('#EarlierPreviousAddress_AddressBFPOCode_span1').attr('data-validation-error', 'EarlierPreviousAddress.AddressBFPOCode'); //add new attribute
                            $('#EarlierPreviousAddress_AddressBFPOCode_span1').removeAttr("data-validation-valid"); //remove attribute
                        }

                        else if (whatAddressSection == "jacurrentAddress") {  //CURRENT ADDRESS 
                            apply.uifunctions.showAlert($whichAddress.find('#JACurrentAddress_AddressBFPOCode_span'), errorMessage, false);
                            $('#JACurrentAddress_AddressBFPOCode_span').attr('data-validation-error', 'JACurrentAddress.AddressBFPOCode'); //add new attribute
                            $('#JACurrentAddress_AddressBFPOCode_span').removeAttr("data-validation-valid"); //remove attribute
                            apply.uifunctions.showAlert($whichAddress.find('#JACurrentAddress_AddressBFPOCode_span1'), errorMessage, false);
                            $('#JACurrentAddress_AddressBFPOCode_span1').attr('data-validation-error', 'JACurrentAddress.AddressBFPOCode'); //add new attribute
                            $('#JACurrentAddress_AddressBFPOCode_span1').removeAttr("data-validation-valid"); //remove attribute
                        }
                        else if (whatAddressSection == "japreviousAddress") {  //PREVIOUS ADDRESS 
                            apply.uifunctions.showAlert($whichAddress.find('#JAPreviousAddress_AddressBFPOCode_span'), errorMessage, false);
                            $('#JAPreviousAddress_AddressBFPOCode_span').attr('data-validation-error', 'JAPreviousAddress.AddressBFPOCode'); //add new attribute
                            $('#JAPreviousAddress_AddressBFPOCode_span').removeAttr("data-validation-valid"); //remove attribute

                            apply.uifunctions.showAlert($whichAddress.find('#JAPreviousAddress_AddressBFPOCode_span1'), errorMessage, false);
                            $('#JAPreviousAddress_AddressBFPOCode_span1').attr('data-validation-error', 'JAPreviousAddress.AddressBFPOCode'); //add new attribute
                            $('#JAPreviousAddress_AddressBFPOCode_span1').removeAttr("data-validation-valid"); //remove attribute
                        }
                        else if (whatAddressSection == "jaearlierPreviousAddress") {  //EARLIER ADDRESS 
                            apply.uifunctions.showAlert($whichAddress.find('#JAEarlierPreviousAddress_AddressBFPOCode_span'), errorMessage, false);
                            $('#JAEarlierPreviousAddress_AddressBFPOCode_span').attr('data-validation-error', 'JAEarlierPreviousAddress.AddressBFPOCode'); //add new attribute
                            $('#JAEarlierPreviousAddress_AddressBFPOCode_span').removeAttr("data-validation-valid"); //remove attribute

                            apply.uifunctions.showAlert($whichAddress.find('#JAEarlierPreviousAddress_AddressBFPOCode_span1'), errorMessage, false);
                            $('#JAEarlierPreviousAddress_AddressBFPOCode_span1').attr('data-validation-error', 'JAEarlierPreviousAddress.AddressBFPOCode'); //add new attribute
                            $('#JAEarlierPreviousAddress_AddressBFPOCode_span1').removeAttr("data-validation-valid"); //remove attribute
                        }
                        else {
                            var $bfpocode = $whichAddress.find('input[name$="AddressBFPOCode"]');
                            var $bfpocodeStatus = $whichAddress.find('[id$="AddressBFPOCode_span"]');
                            apply.uifunctions.showAlert($bfpocodeStatus, errorMessage, false);
                            $bfpocodeStatus.attr('data-validation-error', $bfpocode.attr('name')); //add new attribute
                            $bfpocodeStatus.removeAttr("data-validation-valid"); //remove attribute
                            var $bfpocodeStatus1 = $whichAddress.find('[id$="AddressBFPOCode_span1"]');
                            apply.uifunctions.showAlert($bfpocodeStatus1, errorMessage, false);
                            $bfpocodeStatus1.attr('data-validation-error', $bfpocode.attr('name')); //add new attribute
                            $bfpocodeStatus1.removeAttr("data-validation-valid"); //remove attribute
                        }

                        restoreLookupButton($whichAddress, $thisFindButton);
                    }
                },
                "json" //format of ajax result
                // ReSharper disable UnusedParameter
            ).fail(function (xhr, status, error) { //on ajax fail, show error and restore lookup button to original state
                apply.uifunctions.showAlert($whichAddress.find('.address-section-error'), '<i class="icon-warning-sign icon-2x"></i> The BFPO code lookup service is not available at the moment. Please try again. If the problem still persists, please <a class="address-supply-manual" href="#">enter your full address manually</a>.');
                restoreLookupButton($whichAddress, $thisFindButton);
            });
        }
        else {
            restoreLookupButton($whichAddress, $thisFindButton);
        }
    }

    var restoreLookupButton = function ($whichAddress, $thisFindButton) {
        $thisFindButton.html($thisFindButton.data('original-text'));
        $thisFindButton.removeClass('disabled');
        $thisFindButton.prop('disabled', false);
    };

    var checkingCust = false;
    var checkCustomerComplete = false;
    var $nextButton = null;

    var ShowCustomerCheckLightBox = function ($clickedButton) {
        $nextButton = $clickedButton;
        $.magnificPopup.open({
            items: {
                src: '#existing-customer',
            },
            type: 'inline',
            modal: true,
            callbacks: {
            },
            closeOnBgClick: false
        }, 0);
    }

    var showMinAnnualIncomeLightBox = function ($textbox) {
        $.magnificPopup.open({
            items: {
                src: '#min-annual-income-lightbox',
            },
            type: 'inline',
            modal: true,
            autoFocusLast: true,
            callbacks: {
                afterClose: function () {
                    var $amendBtnClicked = $('#amendBtnClicked');

                    if ($amendBtnClicked.val() == "1") { // Amend
                        $textbox.focus();
                        $amendBtnClicked.val('');
                    } else {    // Continue
                        var $nextTextbox = $textbox.parent().next();
                        if ($nextTextbox.attr('style') == 'display: block;') {
                            $nextTextbox = $nextTextbox.find('input').first();
                        } else {
                            var $allTextboxes = $textbox.parentsUntil('.sa-container').find('input');
                            if ($textbox.attr('id') == 'PartnerAnnualIncomeBeforeTax') {
                                $nextTextbox = $allTextboxes.filter('#MonthlyMortgageOrRent').first();
                            } else {
                                $nextTextbox = $nextTextbox.next().find('input').first();
                            }
                        }

                        $nextTextbox.focus();
                        clearValidationMsg($nextTextbox, "Continue");
                        $amendBtnClicked.val('');
                    }
                }
            },
            closeOnBgClick: false
        }, 0);
    }

    var showMaxAnnualIncomeLightBox = function ($textbox) {
        $.magnificPopup.open({
            items: {
                src: '#max-annual-income-lightbox',
            },
            type: 'inline',
            modal: true,
            autoFocusLast: true,
            callbacks: {
                afterClose: function () {
                    var $amendBtnClicked = $('#amendBtnClicked');

                    if ($amendBtnClicked.val() == "1") {
                        $textbox.focus();
                        $amendBtnClicked.val('');
                    } else {
                        var $nextTextbox = $textbox.parent().next();
                        if ($nextTextbox.attr('style') == 'display: block;') {
                            $nextTextbox = $nextTextbox.find('input').first();
                        } else {
                            var $allTextboxes = $textbox.parentsUntil('.sa-container').find('input');
                            if ($textbox.attr('id') == 'PartnerAnnualIncomeBeforeTax') {
                                $nextTextbox = $allTextboxes.filter('#MonthlyMortgageOrRent').first();
                            } else {
                                $nextTextbox = $nextTextbox.next().find('input').first();
                            }
                        }
                        $nextTextbox.focus();
                        clearValidationMsg($nextTextbox);
                        $amendBtnClicked.val('');
                    }
                }
            },
            closeOnBgClick: false
        }, 0);
    }

    var clearValidationMsg = function ($textbox) {
        var $nextTextbox;
        var $span;

        $nextTextbox = $textbox;
        $span = $nextTextbox.next();
        if ($span.attr('aria-invalid') == "true")   // red inputbox highlighted and validation msg shown
        {
            $nextTextbox.attr('class', '');
            $span.attr('aria-invalid', 'false');
            $span.siblings().attr('aria-invalid', 'false');
            $span.attr('style', 'display: none;');
        }
    }

    function compress(data) {
        var serialized = data.serializeArray();

        // remove form field that are not part of the "ApplicationFormViewModel" ; else automatic model binding fails in codbehind
        serializeRemove(serialized, "__RequestVerificationToken");

        var s = '';
        var data = {};
        for (s in serialized) {
            data[serialized[s]['name']] = serialized[s]['value'];
        }
        return data;
    }

    var serializeRemove = function (thisArray, thisName) {
        "use strict";
        $.each(thisArray, function (index, item) {
            if (item != null && item.name == thisName) {
                delete thisArray[index];
            }
        });
    }

    function validateRadio($container) {
        var names = {};
        $('input[data-validate]:radio').each(function () { // find unique names
            names[$(this).attr('name')] = true;
        });
        var count = 0;
        $.each(names, function () { // then count them
            count++;
        });

        apply.uifunctions.showAlert($container.find('.idiq-section-error'), '');
        if ($('input[data-validate]:radio:checked').length != count) {
            var errorMessage = 'Please answer all the questions below';
            apply.uifunctions.showAlert($container.find('.idiq-section-error'), errorMessage);
            return false;
        }
        return true;
    }


    /**
         * Event handler for address selection (resulting from multiple possible addresses on address lookup)
         */
    var resolvedAddresses = {};

    var wireAddressChooseComboClick = function () {
        $('.address-lookup-select select').change(function () { //add change event to select box
            var addressIndex = this.selectedIndex - 1; //get selected index                       
            var $whichAddress = $(this).closest('.address-section');
            $whichAddress.find('.address-lookup-select').removeAttr("data-searchtype");
            var addressId = $whichAddress.find('.address-lookup-select select').val();
            var houseNumber = $whichAddress.find('.address-details input[name$=HouseNumber]').val(); //house number

            var flatNumber = $whichAddress.find('.address-details input[name$=FlatNumber]').val(); //house number
            var postCode = $whichAddress.find('.address-postcode input[name$=Postcode]').val(); //post code
            var bFPOCode = $whichAddress.find('input[name$=AddressBFPOCode]').val(); //BFPO code
            if ($('#AddressSubType').val() != undefined) {
                bFPOCode = $whichAddress.find('input[name$=AddressBfpoCode]').val(); //BFPO code for Edit details ONLY
            }
            if (bFPOCode != "") {
                var selectedPostCode = $whichAddress.find('.address-lookup-select select option:selected').text(); // get the text value for the option selected which has correct bfpo code
                if (selectedPostCode != "") {
                    var postCodeArr = selectedPostCode.split(",");
                    if (postCodeArr != null && postCodeArr.length > 0 && postCodeArr[0] != null) {
                        var postCodeVal = postCodeArr[0].replace("BFPO", "").trim();
                        if (postCodeVal != "" && !isNaN(postCodeVal)) {
                            bFPOCode = postCodeVal;
                        }
                    }
                }
            }
            $.get( //AJAX request to get full address by id
                applyConfig.baseUrl + 'servicing/service/getfulladdress',
                { AddressId: addressId, HouseNumber: houseNumber, PostCode: postCode, BFPOCode: bFPOCode, FlatNumber: flatNumber }, //parameters passed to PostCode lookup
                function (result) { //success handler
                    var $addressSelect;
                    resolvedAddresses = result; //get result
                    if (resolvedAddresses.ResponseStatus === "Success") {
                        if (resolvedAddresses.Addresses != null) {
                            if (resolvedAddresses.Addresses.length > 0) {
                                var resolvedAddress = resolvedAddresses.Addresses[0];
                                if (bFPOCode != "" && bFPOCode != null) {
                                    $('<i class="icon-spinner icon-spin"></i>').insertBefore(populateBFPOAddress(resolvedAddress, $whichAddress)); //add loading icon after when addess is populated
                                } else {
                                    $('<i class="icon-spinner icon-spin"></i>').insertBefore(populateAddress(resolvedAddress, $whichAddress)); //add loading icon after when addess is populated
                                }
                            }
                        }
                    }
                },
                "json" //format of ajax result
            ).fail(function (xhr, status, error) { //on ajax fail, show error and restore lookup button to original state
                apply.uifunctions.showAlert($whichAddress.find('.address-section-error'), '<i class="icon-warning-sign icon-2x"></i> The Postcode lookup service is not available at the moment. Please try again. If the problem still persists, please <a class="address-supply-manual" href="#">enter your full address manually</a>.');
                restoreLookupButton($whichAddress, $thisFindButton);
            });
        });
    };


    //*** Hide and Show Joint applicant address based on the the check box being checked or not ***********************
    var wireJointApplicantSameAddressAsMainClick = function () {
        $('#JACopyAddressFromMainApplicant').change(function () {

            var $currentAddressElement = $('#jacurrentAddress');
            var $previousAddressElement = $('#japreviousAddress');
            var $earlierPreviousAddress = $('#jaearlierPreviousAddress');

            if ($currentAddressElement == undefined || $currentAddressElement.length == 0) {
                $currentAddressElement = $('#currentAddress');
                $previousAddressElement = $('#previousAddress');
                $earlierPreviousAddress = $('#earlierPreviousAddress');
            }

            var valueOfCheckBox = $('#JACopyAddressFromMainApplicant').prop('checked') ? 1 : 0;
            if (valueOfCheckBox == 0) {

                // Clear the previously loaded address
                $currentAddressElement.find("[id$='CurrentAddress_AddressFlatNumber']").val('').prop('readonly', false);
                $currentAddressElement.find("[id$='CurrentAddress_AddressHouseNumber']").val('').prop('readonly', false);
                $currentAddressElement.find("[id$='CurrentAddress_AddressHouseName']").val('').prop('readonly', false);
                $currentAddressElement.find("[id$='CurrentAddress_AddressLine1']").val('').prop('readonly', false);
                $currentAddressElement.find("[id$='CurrentAddress_AddressLine2']").val('').prop('readonly', false);
                $currentAddressElement.find("[id$='CurrentAddress_AddressTown']").val('').prop('readonly', false);
                $currentAddressElement.find("[id$='CurrentAddress_AddressCounty']").val('').prop('readonly', false);
                $currentAddressElement.find("[id$='CurrentAddress_AddressPostcode']").val('').prop('readonly', false);
                $currentAddressElement.find("[id$='CurrentAddress_AddressBFPOLocation1']").val('').prop('readonly', false);
                $currentAddressElement.find("[id$='CurrentAddress_AddressBFPOLocation2']").val('').prop('readonly', false);
                $currentAddressElement.find("[id$='CurrentAddress_AddressBFPOLocation3']").val('').prop('readonly', false);
                $currentAddressElement.find("[id$='CurrentAddress_AddressBFPOLocation4']").val('').prop('readonly', false);
                $currentAddressElement.find("[id$='CurrentAddress_AddressBFPOCode']").val('').prop('readonly', false);
                $currentAddressElement.find("[id$='CurrentAddress_AddressStartLivingMonth']").val('').prop('readonly', false);
                $currentAddressElement.find("[id$='CurrentAddress_AddressStartLivingYear']").val('').prop('readonly', false);
                $currentAddressElement.find("[id$='CurrentAddress_IsAddressBFPOFormat']").val('').prop('readonly', false);
                $currentAddressElement.find("[id$='CurrentAddress_HasBeenLoadedFromLookup']").val('').prop('readonly', false);

                $previousAddressElement.find("[id$='PreviousAddress_AddressFlatNumber']").val('').prop('readonly', false);
                $previousAddressElement.find("[id$='PreviousAddress_AddressHouseNumber']").val('').prop('readonly', false);
                $previousAddressElement.find("[id$='PreviousAddress_AddressHouseName']").val('').prop('readonly', false);
                $previousAddressElement.find("[id$='PreviousAddress_AddressLine1']").val('').prop('readonly', false);
                $previousAddressElement.find("[id$='PreviousAddress_AddressLine2']").val('').prop('readonly', false);
                $previousAddressElement.find("[id$='PreviousAddress_AddressTown']").val('').prop('readonly', false);
                $previousAddressElement.find("[id$='PreviousAddress_AddressCounty']").val('').prop('readonly', false);
                $previousAddressElement.find("[id$='PreviousAddress_AddressPostcode']").val('').prop('readonly', false);
                $previousAddressElement.find("[id$='PreviousAddress_AddressBFPOLocation1']").val('').prop('readonly', false);
                $previousAddressElement.find("[id$='PreviousAddress_AddressBFPOLocation2']").val('').prop('readonly', false);
                $previousAddressElement.find("[id$='PreviousAddress_AddressBFPOLocation3']").val('').prop('readonly', false);
                $previousAddressElement.find("[id$='PreviousAddress_AddressBFPOLocation4']").val('').prop('readonly', false);
                $previousAddressElement.find("[id$='PreviousAddress_AddressBFPOCode']").val('').prop('readonly', false);
                $previousAddressElement.find("[id$='PreviousAddress_AddressStartLivingMonth']").val('').prop('readonly', false);
                $previousAddressElement.find("[id$='PreviousAddress_AddressStartLivingYear']").val('').prop('readonly', false);
                $previousAddressElement.find("[id$='PreviousAddress_IsAddressBFPOFormat']").val('').prop('readonly', false);
                $previousAddressElement.find("[id$='PreviousAddress_HasBeenLoadedFromLookup']").val('').prop('readonly', false);

                $earlierPreviousAddress.find("[id$='EarlierPreviousAddress_AddressFlatNumber']").val('').prop('readonly', false);
                $earlierPreviousAddress.find("[id$='EarlierPreviousAddress_AddressHouseNumber']").val('').prop('readonly', false);
                $earlierPreviousAddress.find("[id$='EarlierPreviousAddress_AddressHouseName']").val('').prop('readonly', false);
                $earlierPreviousAddress.find("[id$='EarlierPreviousAddress_AddressLine1']").val('').prop('readonly', false);
                $earlierPreviousAddress.find("[id$='EarlierPreviousAddress_AddressLine2']").val('').prop('readonly', false);
                $earlierPreviousAddress.find("[id$='EarlierPreviousAddress_AddressTown']").val('').prop('readonly', false);
                $earlierPreviousAddress.find("[id$='EarlierPreviousAddress_AddressCounty']").val('').prop('readonly', false);
                $earlierPreviousAddress.find("[id$='EarlierPreviousAddress_AddressPostcode']").val('').prop('readonly', false);
                $earlierPreviousAddress.find("[id$='EarlierPreviousAddress_AddressBFPOLocation1']").val('').prop('readonly', false);
                $earlierPreviousAddress.find("[id$='EarlierPreviousAddress_AddressBFPOLocation2']").val('').prop('readonly', false);
                $earlierPreviousAddress.find("[id$='EarlierPreviousAddress_AddressBFPOLocation3']").val('').prop('readonly', false);
                $earlierPreviousAddress.find("[id$='EarlierPreviousAddress_AddressBFPOLocation4']").val('').prop('readonly', false);
                $earlierPreviousAddress.find("[id$='EarlierPreviousAddress_AddressBFPOCode']").val('').prop('readonly', false);
                $earlierPreviousAddress.find("[id$='EarlierPreviousAddress_AddressStartLivingMonth']").val('').prop('readonly', false);
                $earlierPreviousAddress.find("[id$='EarlierPreviousAddress_AddressStartLivingYear']").val('').prop('readonly', false);
                $earlierPreviousAddress.find("[id$='EarlierPreviousAddress_IsAddressBFPOFormat']").val('').prop('readonly', false);
                $earlierPreviousAddress.find("[id$='EarlierPreviousAddress_HasBeenLoadedFromLookup']").val('').prop('readonly', false);

                //// we show the joint applicant address section  


                $currentAddressElement.find('.bfpo-code').each(function () {
                    if ($(this).css('display') === 'none') {
                        $currentAddressElement.find('.address-postcode, .address-find').each(function () {
                            $(this).data('collapsible').show();
                        });
                    }
                });


                //}
                $currentAddressElement.find('.address-living').each(function () {
                    $(this).data('collapsible').hide();
                });
                if ($currentAddressElement.data('collapsible') != null)
                    $currentAddressElement.data('collapsible').show();

                enableFindAddressButton($currentAddressElement);

                $currentAddressElement.find("[id$='CurrentAddress_AddressStartLivingMonth']").change();
                $currentAddressElement.find("[id$='CurrentAddress_AddressStartLivingYear']").change();
                //previous to previous address
                $previousAddressElement.find("[id$='PreviousAddress_AddressStartLivingMonth']").change();
                $previousAddressElement.find("[id$='PreviousAddress_AddressStartLivingYear']").change();
            }
            else {
                //// we hide the joint applicant address section
                $currentAddressElement.find('.address-details, .address-postcode, .address-find, .address-back, .bfpo-details, .bfpo-address-lookup-select, .bfpo-code, .bfpo-address-find, .address-lookup-select, .address-living').each(function () {
                    $(this).data('collapsible').hide();
                });

                if ($currentAddressElement.data('collapsible') != null) {
                    $currentAddressElement.data('collapsible').hide();
                }

                if ($previousAddressElement.data('collapsible') != null) {
                    $previousAddressElement.data('collapsible').hide(); //hide next address
                }
                if ($earlierPreviousAddress.data('collapsible') != null) {
                    $earlierPreviousAddress.data('collapsible').hide(); //hide earlierprevious address
                }

                //if ($currentAddressElement.attr('id') == 'currentAddress') { // savings application
                //    $currentAddressElement.find('.address-living').each(function () {
                //        $(this).data('collapsible').show();
                //    });
                //}
            }

        });
    };

    //****************Validation for the direct debit T&C checkbox click in credit cards****************************************
    var wireDirectDebitTermsAndCondCheckboxClick = function () {
        $('#GuranteeAccepted').click(function () { //add change event to select box
            if (this.checked) {
                $("#iconValidOrError").removeAttr("data-validation-error");
                $("#iconValidOrError").attr("data-validation-valid", $(this).attr('name'));
                $("#iconValidOrError").show();
            }

        });
    };

    //****************Edit account interest paid to click to check box  *********************************************************
    var wireEditAcctInterestPaidToCheckboxClick = function () {
        $('#FixedRateCashIsaId').click(function () { //add change event to select box
            if (!this.checked) { // uncheck the box
                $('#AddNewPayeeId').removeAttr("onclick");
                $('#AddNewPayeeId').removeAttr("disabled");
                $("#Key").prop("selectedIndex", 0);
                $('#accountSelectSectionId').show();
                $('#NonCashIsaMessage').show();
                $('#Incomplete').attr('Value', 'true');
                $('#FixedRateCashIsaId').attr('value', 'true');
            }
            else // here is when I check the box
            {
                $('#AddNewPayeeId').attr("disabled", "disabled");
                $('#AddNewPayeeId').attr("onclick", "return false");
                $("#Key").prop("selectedIndex", 0);
                $('#accountSelectSectionId').hide();
                $('#NonCashIsaMessage').hide();
                $('#Incomplete').attr('Value', 'false');
                $('#FixedRateCashIsaId').attr('value', 'false');
            }
        });
    };

    //****************account type dropdown changes clear previous values entered in short apply ****************************************
    var wireShortApplyWhatTypeOfAcctDropdownChange = function () {
        $('#JAAccountType').change(function () { //add change event to select box
            var acctTypeDropDownValue = $('#JAAccountType').val();
            if (acctTypeDropDownValue.toLowerCase() == "credit card") {
                $('#JASortCodeParts_0_').val("");
                $('#JASortCodeParts_1_').val("");
                $('#JASortCodeParts_2_').val("");
                $('#JAAccountNumber').val("");
                $('#JALoanAgreementNumber').val("");
            }
            if (acctTypeDropDownValue.toLowerCase() == "loan") {
                $('#JASortCodeParts_0_').val("");
                $('#JASortCodeParts_1_').val("");
                $('#JASortCodeParts_2_').val("");
                $('#JAAccountNumber').val("");
                $('#JACardNumber').val("");
            }
            if (acctTypeDropDownValue.toLowerCase() == "savings") {
                $('#JALoanAgreementNumber').val("");
                $('#JACardNumber').val("");
            }
        });
    };

    //****************Validation for the statements dropdown in savings****************************************
    var wireStatementsButtonClick = function () {
        $('#showStatementButton').click(function () { //add change event to select box
            var valid = apply.validation.validateField($('#StatementMonth'), { "highlight": true, "quiet": false });
            return valid;
        });
    };

    //****************Validation for the edit account int paid to On the click of the button****************************************
    var wireEditAcctIntPaidToReviewAndConfirmButtonClick = function () {
        $('#EditAcctIntPaidNext').click(function () { //add change event to select box
            var dropDownValue = $('#Key').val();
            if ($('div.account-to-pay-to').is(":visible")) {
                if (dropDownValue == "") {
                    $("#validationIcon").attr("data-validation-error", "Key");
                    $('#validationIcon').removeAttr("data-validation-valid");
                    $('#validationIcon').show();
                    $('#errorMessg').attr("data-validation-error", "Key");
                    $('#errorMessg').removeAttr("data-validation-valid");
                    $('#errorMessg').text("Please select an account that you want to pay interest to.");
                    return false;
                }
            }
            return true;
        });
    };
    //****************Validation for the edit account int paid dropdown change****************************************
    var wireEditAcctIntPaidToDropdownChange = function () {
        $('#Key').change(function () { //add change event to select box
            var dropDownValue = $('#Key').val();
            if (dropDownValue == "") {
                $("#validationIcon").attr("data-validation-error", "Key");
                $('#validationIcon').removeAttr("data-validation-valid");
                $('#validationIcon').show();
                $('#errorMessg').attr("data-validation-error", "Key");
                $('#errorMessg').removeAttr("data-validation-valid");
                $('#errorMessg').text("Please select an account that you want to pay interest to.");
                return false;
            } else {
                $("#validationIcon").attr("data-validation-valid", "Key");
                $('#validationIcon').removeAttr("data-validation-error");
                $('#validationIcon').show();
                $('#errorMessg').attr("data-validation-valid", "Key");
                $('#errorMessg').removeAttr("data-validation-error");
                $('#errorMessg').text("");
            }
            return true;
        });
    };


    //********************************************************
    var wireHowDidYouHearAboutUsComboClick = function () {
        $('.optionalbenifit-howdidyouhearaboutus-select select').change(function () {
            var aboutusIndex = this.selectedIndex - 1; //get selected index
            var $optionalbenifitsection = $(this).closest('.howdidyouhearabout');

            if (aboutusIndex == "9") {
                $optionalbenifitsection.find('.optionalbenifit-colleaguenumber-input').show();
            }
            else {
                $optionalbenifitsection.find('.optionalbenifit-colleaguenumber-input').hide();
            }
        });
    };

    //********************************************************
    var wireJointApplicantExistingCutomerComboClick = function () {
        $('.additonaljadetails-existingcustomer-select select').change(function () {
            var existingCustomerIndex = this.selectedIndex - 1;
            var $furtherinformationsection = $(this).closest('.furtherinformation');

            if (existingCustomerIndex == "1") {
                $furtherinformationsection.find('.additonaljadetails-accounttype-select').show();
                $furtherinformationsection.find('.additonaljaaccountdetails').show();
            }
            else {
                $furtherinformationsection.find('.additonaljadetails-accounttype-select').hide();
                $furtherinformationsection.find('.additonaljaaccountdetails').hide();

                //Also hide the fields related to the account type for the JA and
                var jaAccountTypeList = document.getElementById("JAAccountType"); //  sets the dropdown to the default value.
                jaAccountTypeList[0].selected = "selected";

                // clear values
                $('#JASortCodeParts_0_').val("");
                $('#JASortCodeParts_1_').val("");
                $('#JASortCodeParts_2_').val("");
                $('#JAAccountNumber').val("");
                $('#JALoanAgreementNumber').val("");
                $('#JACardNumber').val("");

                $('#JointAccount_AccountType').val("Select"); //  sets the dropdown to the default value.
                // clear values
                $('#JointAccount_SortCodeParts_0_').val("");
                $('#JointAccount_SortCodeParts_1_').val("");
                $('#JointAccount_SortCodeParts_2_').val("");
                $('#JointAccount_AccountNumber').val("");
                $('#JointAccount_LoanReference').val("");
                $('#JointAccount_CardNumber').val("");

                $furtherinformationsection.find('.additonaljadetails-accountdetails-input').hide();
                $furtherinformationsection.find('.additonaljadetails-cardnumberdigits-input').hide();
                $furtherinformationsection.find('.additonaljadetails-loanagreement-input').hide();

            }

        });

    };
    // ******************************************************************** 
    var wireJointApplicantAccountTypeComboClick = function () {
        $('.additonaljadetails-accounttype-select select').change(function () {

            var existingCustomerIndex = this.selectedIndex - 1;
            var $furtherinformationsection = $(this).closest('.furtherinformation');

            $("#JAAccountNumber").val(null);
            $("#JASortCodeParts_0_").val(null);
            $("#JASortCodeParts_1_").val(null);
            $("#JASortCodeParts_2_").val(null);
            $("#JACardNumber").val(null);
            $("#JALoanAgreementNumber").val(null);

            if (existingCustomerIndex == "0") {
                $furtherinformationsection.find('.additonaljadetails-accountdetails-input').show();
                $furtherinformationsection.find('.additonaljadetails-cardnumberdigits-input').hide();
                $furtherinformationsection.find('.additonaljadetails-loanagreement-input').hide();
            }
            if (existingCustomerIndex == "1") {
                $furtherinformationsection.find('.additonaljadetails-accountdetails-input').hide();
                $furtherinformationsection.find('.additonaljadetails-cardnumberdigits-input').show();
                $furtherinformationsection.find('.additonaljadetails-loanagreement-input').hide();
            }
            if (existingCustomerIndex == "2") {
                $furtherinformationsection.find('.additonaljadetails-accountdetails-input').show();
                $furtherinformationsection.find('.additonaljadetails-cardnumberdigits-input').hide();
                $furtherinformationsection.find('.additonaljadetails-loanagreement-input').hide();
            }
            if (existingCustomerIndex == "3") {
                $furtherinformationsection.find('.additonaljadetails-accountdetails-input').hide();
                $furtherinformationsection.find('.additonaljadetails-cardnumberdigits-input').hide();
                $furtherinformationsection.find('.additonaljadetails-loanagreement-input').show();
            }

            //clear values and remove validation icon and messages ***************************************************
            // Savings account number 
            $("#JAAccountNumber").attr('class', 'account-number'); //remove red highlight around the textbox   
            $('#JAAcctNumberValIcon').attr('style', 'display: none;'); //hides the validation icon

            $("#JointAccount_AccountNumber").attr('class', 'account-number'); //remove red highlight around the textbox   
            $('#JointAccount_AcctNumberValIcon').attr('style', 'display: none;'); //hides the validation icon

            // Savings sort code 
            $("#JASortCodeParts_0_").attr('class', 'input-x-mini input-sortcode num-small-size'); //remove red highlight around the textbox
            $("#JASortCodeParts_1_").attr('class', 'input-x-mini input-sortcode num-small-size'); //remove red highlight around the textbox
            $("#JASortCodeParts_2_").attr('class', 'input-x-mini input-sortcode num-small-size'); //remove red highlight around the textbox
            $('#JASortCodeValIcon').attr('style', 'display: none;'); //hides the validation icon 

            $("#JointAccount_SortCodeParts_0_").attr('class', 'input-x-mini input-sortcode num-small-size'); //remove red highlight around the textbox
            $("#JointAccount_SortCodeParts_1_").attr('class', 'input-x-mini input-sortcode num-small-size'); //remove red highlight around the textbox
            $("#JointAccount_SortCodeParts_2_").attr('class', 'input-x-mini input-sortcode num-small-size'); //remove red highlight around the textbox
            $('#JointAccount_SortCodeValIcon').attr('style', 'display: none;'); //hides the validation icon 

            // Savings credit card number 
            $("#JACardNumber").attr('class', ''); //remove red highlight around the textbox   
            $('#JACardNumberValIcon').attr('style', 'display: none;'); //hides the validation icon 

            $("#JointAccount_CardNumber").attr('class', ''); //remove red highlight around the textbox   
            $('#JointAccount_CardNumberValIcon').attr('style', 'display: none;'); //hides the validation icon 

            // Savings Loan agreement number 
            $("#JALoanAgreementNumber").attr('class', ''); //remove red highlight around the textbox   
            $('#JALoanAgreementNumberValIcon').attr('style', 'display: none;'); //hides the validation icon

            $("#JointAccount_LoanReference").attr('class', ''); //remove red highlight around the textbox   
            $('#JointAccount_LoanReferenceValIcon').attr('style', 'display: none;'); //hides the validation icon
        });
    };


    // **************************  Sortcode ****************************************** 

    var wireJAAccountNumberFocusOut = function () {
        $('#JAAccountNumber').focusout(function () {
            apply.validation.validateField($('.account-number'), { "highlight": true, "quiet": false });
        });
    };

    var wireJACardNumberFocusOut = function () {
        $('#JACardNumber').focusout(function () {
            apply.validation.validateField($('#JACardNumber'), { "highlight": true, "quiet": false });
        });
    };

    var wireJALoanAgreementNumberFocusOut = function () {
        $('#JALoanAgreementNumber').focusout(function () {
            apply.validation.validateField($('#JALoanAgreementNumber'), { "highlight": true, "quiet": false });
        });
    };

    var wireSortCodePart1TextBoxFocusOut = function () {
        $('#JASortCodeParts_0_').focusout(function () {
            apply.validation.validateGroup($('.sort-code'), { "highlight": true, "quiet": false });
        });
        $('#JointAccount_SortCodeParts_0_').focusout(function () {
            apply.validation.validateGroup($('.sort-code'), { "highlight": true, "quiet": false });
        });
    };
    var wireSortCodePart2TextBoxFocusOut = function () {
        $('#JASortCodeParts_1_').focusout(function () {
            apply.validation.validateGroup($('.sort-code'), { "highlight": true, "quiet": false });
        });
        $('#JointAccount_SortCodeParts_1_').focusout(function () {
            apply.validation.validateGroup($('.sort-code'), { "highlight": true, "quiet": false });
        });
    };
    var wireSortCodePart3TextBoxFocusOut = function () {
        $('#JASortCodeParts_2_').focusout(function () {
            apply.validation.validateGroup($('.sort-code'), { "highlight": true, "quiet": false });
        });
        $('#JointAccount_SortCodeParts_2_').focusout(function () {
            apply.validation.validateGroup($('.sort-code'), { "highlight": true, "quiet": false });
        });
    };

    //*****Lightbox for Loans AnnualIncomeBeforeTax and JoinAppIncome when lose focus***************************************

    var determineLightBox = function ($textbox) {
        var minAmount = parseFloat($('#minannualincome').val());
        var maxAmount = parseFloat($('#maxannualincome').val());
        var inputAmount = parseFloat($textbox.val());
        var shownbox;

        if (inputAmount <= minAmount) {
            shownbox = $textbox.data('shownminbox');
            if (!shownbox) {
                $textbox.data('shownminbox', '1');
                showMinAnnualIncomeLightBox($textbox);
            }
        }
        if (inputAmount > maxAmount) {
            shownbox = $textbox.data('shownmaxbox');
            if (!shownbox) {
                $textbox.data('shownmaxbox', '1');
                showMaxAnnualIncomeLightBox($textbox);
            }
        }
    }

    var wireAnnualIncomeBeforeTaxTextBoxFocusOut = function () {
        $('#AnnualIncomeBeforeTax').bind('keydown', function (e) {
            var minAmount = parseFloat($('#minannualincome').val());
            var maxAmount = parseFloat($('#maxannualincome').val());
            var inputAmount = parseFloat($(this).val());

            if (e.keyCode === 9) { //Tab key
                if ((inputAmount > minAmount) && (inputAmount <= maxAmount)) {
                    return true;
                }

                if ((inputAmount <= minAmount) && $(this).data('shownminbox') === '1') {
                    return true;
                }

                if ((inputAmount > maxAmount) && $(this).data('shownmaxbox') === '1') {
                    return true;
                }

                if ((isNaN(inputAmount))) {
                    return true;
                }

                if ((isNaN(minAmount) && isNaN(maxAmount))) {
                    return true;
                }

                e.preventDefault();

                var valid = apply.validation.validateField($(this), { "highlight": true, "quiet": false });
                if (valid) {
                    determineLightBox($(this));
                }
            }
            return true;
        });

        $('#AnnualIncomeBeforeTax').focusout(function () {
            var valid = apply.validation.validateField($(this), { "highlight": true, "quiet": false });
            if (valid) {
                determineLightBox($(this));
            }
        });
    }

    var wirePartnerAnnualIncomeBeforeTaxTextBoxFocusOut = function () {
        $('#PartnerAnnualIncomeBeforeTax').bind('keydown', function (e) {
            var minAmount = parseFloat($('#minannualincome').val());
            var maxAmount = parseFloat($('#maxannualincome').val());
            var inputAmount = parseFloat($(this).val());

            if (e.keyCode === 9) { //Tab key
                if ((inputAmount > minAmount) && (inputAmount <= maxAmount)) {
                    return true;
                }

                if ((inputAmount <= minAmount) && $(this).data('shownminbox') === '1') {
                    return true;
                }

                if ((inputAmount > maxAmount) && $(this).data('shownmaxbox') === '1') {
                    return true;
                }

                if ((isNaN(inputAmount))) {
                    return true;
                }

                e.preventDefault();

                var valid = apply.validation.validateField($(this), { "highlight": true, "quiet": false });
                if (valid) {
                    determineLightBox($(this));
                }
            }
            return true;
        });

        $('#PartnerAnnualIncomeBeforeTax').focusout(function () {
            var valid = apply.validation.validateField($(this), { "highlight": true, "quiet": false });
            if (valid) {
                determineLightBox($(this));
            }
        });
    }

    //*****Validation of ColleagueNumber it loses focus  **********************************************************
    var wireColleagueNumberComboChange = function () {
        $('#ColleagueNumber').focusout(function () {
            var valueOfHowDidYouHearDropdown = $('#HowDidYouHearAboutUs').val();
            if (valueOfHowDidYouHearDropdown != "") {
                if (valueOfHowDidYouHearDropdown == "I'm a J Sainsbury's colleague") {
                    apply.validation.validateField($('#ColleagueNumber'), { "highlight": true, "quiet": false });
                }
            }


        });
    };

    //*****Validation of Postcode in RESET CREDENTIALS  **********************************************************  
    var wirePostcodeTextboxChange = function () {
        $('#PostCode').focusout(function () {
            var delay = 500;  //half a  second
            setTimeout(function () {
                apply.validation.validateField($('#PostCode'), { "highlight": true, "quiet": false });
            }, delay);
        });


    };

    //*****Validation of Postcode in RESET CREDENTIALS  **********************************************************  
    var wireResetCredButtonClick = function () {
        $('#ResetCredSubmitBtnId').click(function () {
            var delay = 500;  //half a  second
            setTimeout(function () {
                apply.validation.validateField($('#PostCode'), { "highlight": true, "quiet": false });
            }, delay);
        });

    };


    //*****Validation for New message text area  **********************************************************
    var wireNewMssgTextAreaChange = function (e) {

        $('#MessageBody').focusout(function () {
            var result = apply.validation.validateField($('#MessageBody'), { "highlight": true, "quiet": false });
            if (!result) {
                $('#mssgTextAreaId').removeAttr("data-validation-valid");
                $("#mssgTextAreaId").attr("data-validation-error", "MessageBody");
                $("#mssgTextAreaId").show();
            } else {
                $('#mssgTextAreaId').removeAttr("data-validation-error");
                $("#mssgTextAreaId").attr("data-validation-valid", "MessageBody");
                $("#mssgTextAreaId").show();
            }
            return result;
        });
    };


    //*****Validation for help and FAQ text area**********************************************************
    var wireNewMssgTextAreaChangeHelpAndFAQ = function (e) {

        $('#Message').focusout(function () {
            var result = apply.validation.validateField($('#Message'), { "highlight": true, "quiet": false });
            if (!result) {
                $('#mssgTextAreaId').removeAttr("data-validation-valid");
                $("#mssgTextAreaId").attr("data-validation-error", "Message");
                $("#mssgTextAreaId").show();
            } else {
                $('#mssgTextAreaId').removeAttr("data-validation-error");
                $("#mssgTextAreaId").attr("data-validation-valid", "Message");
                $("#mssgTextAreaId").show();
            }
            return result;
        });
    };


    //***** Validation of pay credit card amount it loses focus  **********************************************************
    var wirePayCreditCardAmountChange = function () {

        $('#payment_specific').focusout(function () {
            $('#amount_specific').focus();
        });
        $('#payment_specific').change(function () {
            $('#amount_specific').focus();
        });

        $('#amount_specific').focusout(function () {
            $('#otherAmount').attr('style', 'display: inline;'); //add new style attribute
            $('#PaymentAmount_ErrorMsg').attr('style', 'display: inline;'); //add new style attribute
        });
    };

    var wireManageDirectDebitCardAmountChange = function () {
        $('#how_much_3').focusout(function () {
            $('#amount_pounds').focus();
        });
        $('#how_much_3').change(function () {
            $('#amount_pounds').focus();
        });

        $('#amount_pounds').focusout(function () {
            $('#otherAmount').attr('style', 'display: inline;'); //add new style attribute
            $('#otherAmountErrorMessage').attr('style', 'display: inline;'); //add new style attribute
        });
    };

    //*****Validation for Title and Gender Main applicant  **********************************************************
    var wireTitleComboChange = function () {
        $('#Title').change(function () {
            var valueOfGenderDropdown = $('#Gender').val();
            if (valueOfGenderDropdown != "") {
                apply.validation.validateField($('#Gender'), { "highlight": true, "quiet": false });
            }
        });
        // Joint applicant
        $('#JATitle').change(function () {
            var valueOfGenderDropdown = $('#JAGender').val();
            if (valueOfGenderDropdown != "") {
                apply.validation.validateField($('#JAGender'), { "highlight": true, "quite": false });
            }
        });
    };

    //***** FORCE Validation to be triggered for next time at address fields *****//
    var wireAddressStartLivingComboChange = function () {
        $('#PreviousAddress_AddressStartLivingMonth, #PreviousAddress_AddressStartLivingYear').change(function () {
            // validate current address
            apply.validation.validateField($('#CurrentAddress_AddressStartLivingMonth'), { "highlight": true, "quiet": false });
            apply.validation.validateField($('#CurrentAddress_AddressStartLivingYear'), { "highlight": true, "quiet": false });
        });


        $('#AchPreviousAddress_AddressStartLivingMonth, #AchPreviousAddress_AddressStartLivingYear').change(function () {
            // validate current address
            apply.validation.validateField($('#AchCurrentAddress_AddressStartLivingMonth'), { "highlight": true, "quiet": false });
            apply.validation.validateField($('#AchCurrentAddress_AddressStartLivingYear'), { "highlight": true, "quiet": false });
        });



        $('#JAPreviousAddress_AddressStartLivingMonth, #JAPreviousAddress_AddressStartLivingYear').change(function () {
            // validate current address
            apply.validation.validateField($('#JACurrentAddress_AddressStartLivingMonth'), { "highlight": true, "quiet": false });
            apply.validation.validateField($('#JACurrentAddress_AddressStartLivingYear'), { "highlight": true, "quiet": false });
        });

        $('#EarlierPreviousAddress_AddressStartLivingMonth, #EarlierPreviousAddress_AddressStartLivingYear').change(function () {
            // validate current address
            apply.validation.validateField($('#PreviousAddress_AddressStartLivingMonth'), { "highlight": true, "quiet": false });
            apply.validation.validateField($('#PreviousAddress_AddressStartLivingYear'), { "highlight": true, "quiet": false });
        });

        $('#JAEarlierPreviousAddress_AddressStartLivingMonth, #JAEarlierPreviousAddress_AddressStartLivingYear').change(function () {
            // validate current address
            apply.validation.validateField($('#JAPreviousAddress_AddressStartLivingMonth'), { "highlight": true, "quiet": false });
            apply.validation.validateField($('#JAPreviousAddress_AddressStartLivingYear'), { "highlight": true, "quiet": false });
        });
    };

    //***** FORCE Validation to be triggered for previous time at address fields   CURRENT MONTH DROP DOWN **********************************************************
    var wireCurrentMonthComboChange = function () {
        $('#CurrentAddress_AddressStartLivingMonth').change(function () {
            var currentAddreessMonthDropdown = $('#CurrentAddress_AddressStartLivingMonth').val();
            var currentAddreessYearDropdown = $('#CurrentAddress_AddressStartLivingYear').val();
            if (currentAddreessMonthDropdown != "" && currentAddreessYearDropdown != "") {
                apply.validation.validateField($('#PreviousAddress_AddressStartLivingMonth'), { "highlight": true, "quiet": false });
            }
        });
    };

    //***** FORCE Validation to be triggered for earlier time at address fields   PREVIOUS MONTH DROP DOWN **********************************************************
    var wirePreviousMonthComboChange = function () {
        $('#PreviousAddress_AddressStartLivingMonth').change(function () {
            var previousAddreessMonthDropdown = $('#PreviousAddress_AddressStartLivingMonth').val();
            var previousAddreessYearDropdown = $('#PreviousAddress_AddressStartLivingYear').val();
            if (previousAddreessMonthDropdown != "" && previousAddreessYearDropdown != "") {
                apply.validation.validateField($('#EarlierPreviousAddress_AddressStartLivingMonth'), { "highlight": true, "quiet": false });
            }
        });
    };

    //***** JOINT APPLICANT -----FORCE Validation to be triggered for previous time at address fields   CURRENT MONTH DROP DOWN **********************************************************
    var wireJACurrentMonthComboChange = function () {

        $('#JACurrentAddress_AddressStartLivingMonth').change(function () {
            var currentAddreessMonthDropdown = $('#JACurrentAddress_AddressStartLivingMonth').val();
            var currentAddreessYearDropdown = $('#JACurrentAddress_AddressStartLivingYear').val();
            if (currentAddreessMonthDropdown != "" && currentAddreessYearDropdown != "") {
                apply.validation.validateField($('#JAPreviousAddress_AddressStartLivingMonth'), { "highlight": true, "quiet": false });
            }
        });
    };

    //***** JOINT APPLICANT ----- FORCE Validation to be triggered for earlier time at address fields   PREVIOUS MONTH DROP DOWN **********************************************************
    var wireJAPreviousMonthComboChange = function () {
        $('#JAPreviousAddress_AddressStartLivingMonth').change(function () {
            var previousAddreessMonthDropdown = $('#JAPreviousAddress_AddressStartLivingMonth').val();
            var previousAddreessYearDropdown = $('#JAPreviousAddress_AddressStartLivingYear').val();
            if (previousAddreessMonthDropdown != "" && previousAddreessYearDropdown != "") {
                apply.validation.validateField($('#JAEarlierPreviousAddress_AddressStartLivingMonth'), { "highlight": true, "quiet": false });
            }
        });
    };

    var wireJASortCodeChange = function () {
        $('div.sort-code input[name^="JASortCode"]').change(function () {
            if ($(this).parent().is(':visible')) {
                apply.validation.validateField($(this).parent(), { "highlight": true, "quiet": false });
            }
        });
    };

    var wireJAAccountNumberChange = function () {
        $('#JAAccountNumber').change(function () {
            if ($(this).parent().is(':visible')) {
                apply.validation.validateField($(this).parent(), { "highlight": true, "quiet": false });
            }
        });
    };

    /**
             * Populates address form with relevant address details
             * @param {object} address The address object
             * @param {$} $container The relevant address container (e.g current address, previous address, employers address, correspondance address) 
             */
    var populateAddress = function (address, $container, flatNo) {
        var postcode = address.Postcode.substring(0, address.Postcode.indexOf("~"));
        var flat = address.Postcode.substring(address.Postcode.indexOf("~") + 1);

        //Set the FlatNumber
        if (flat) {
            var $flatNumber = $container.find(".address-details  input[name$=FlatNumber]");
            if ($flatNumber.length > 0) { //Set value of the Flat Number, this is called FlatNumber in short apply. If the backend returns a value the field should not be editable.
                $flatNumber.val(flat).prop("readonly", true);
            }
        }

        //Set the House Number
        if (address.BuildingNumber || address.FlatNumber) {
            var $addressHouseNumber = $container.find(".address-details  input[name$=AddressHouseNumber]");
            if ($addressHouseNumber.length == 0) {
                $addressHouseNumber = $container.find(".address-details  input[name$=BuildingNumber]");
            }

            if ($addressHouseNumber.length > 0) { //Set value of the House Number, this is called AddressHouseNumber in short apply. If the backend returns a value the field should not be editable.
                $addressHouseNumber.val(address.BuildingNumber ? address.BuildingNumber : address.FlatNumber).prop("readonly", true);
            }
        }

        //Set the House Name
        if (address.BuildingName) {
            var $addressHouseName = $container.find(".address-details  input[name$=AddressHouseName]");
            if ($addressHouseName.length == 0) {
                $addressHouseName = $container.find(".address-details  input[name$=BuildingName]");
            }

            if ($addressHouseName.length > 0) { //Set value of the House Name, this is called AddressHouseName in short apply. If the backend returns a value the field should not be editable.
                $addressHouseName.val(address.BuildingName).prop("readonly", true);
            }
        }

        //Set the Street Name field
        if (address.AddressLine1) {
            var $addressLine1 = $container.find(".address-details  input[name$=AddressLine1]");
            if ($addressLine1.length > 0) { //Set value of the Street name, this is called AddressLine1 in short apply. If the backend returns a value the field should not be editable.
                $addressLine1.val(address.AddressLine1).prop("readonly", true);
                $addressLine1.closest(".form-row").find("span.help-block").css("display", "block");
            }

            var $streetName = $container.find(".address-details  input[name$=StreetName]");
            if ($streetName.length > 0) { //Set value of the Street name, this is called StreetName in edit details. If the backend returns a value the field should not be editable.
                $streetName.val(address.AddressLine1).prop("readonly", true);
                $streetName.closest(".form-row").find("span.help-block").css("display", "block");
            }
        }

        //Set the District  field
        var $addressLine2 = $container.find(".address-details  input[name$=AddressLine2]");
        if ($addressLine2.length > 0) { //Set value of the District, this is called AddressLine2 in short apply. If the backend returns a value the field should not be editable.
            $addressLine2.val(address.AddressLine2).prop("readonly", true);
            $addressLine2.closest(".form-row").find("span.help-block").css("display", "block");
        }

        var $district = $container.find(".address-details  input[name$=District]");
        if ($district.length > 0) { //Set value of the District, this is called District in edit details. If the backend returns a value the field should not be editable.
            $district.val(address.AddressLine2).prop("readonly", true);
            $district.closest(".form-row").find("span.help-block").css("display", "block");
        }


        //Set the Town/City field
        if (address.TownOrCity) {
            var $addressTown = $container.find(".address-details  input[name$=AddressTown]");
            if ($addressTown.length > 0) { //Set value of the Town/City, this is called AddressTown in short apply. If the backend returns a value the field should not be editable.
                $addressTown.val(address.TownOrCity).prop("readonly", true);
                $addressTown.closest(".form-row").find("span.help-block").css("display", "block");
            }

            var $townOrCity = $container.find(".address-details  input[name$=TownOrCity]");
            if ($townOrCity.length > 0) { //Set value of the Town/City, this is called TownOrCity in edit details. If the backend returns a value the field should not be editable.
                $townOrCity.val(address.TownOrCity).prop("readonly", true);
                $townOrCity.closest(".form-row").find("span.help-block").css("display", "block");
            }
        }

        //Set the County field
        var $addressCounty = $container.find(".address-details  input[name$=AddressCounty]");
        if ($addressCounty.length > 0) { //Set value of the County, this is called AddressCounty in short apply. If the backend returns a value the field should not be editable.
            $addressCounty.val(address.County).prop("readonly", true);
            $addressCounty.closest(".form-row").find("span.help-block").css("display", "block");
        }

        var $county = $container.find(".address-details  input[name$=County]");
        if ($county.length > 0) { //Set value of the County, this is called County in edit details. If the backend returns a value the field should not be editable.
            $county.val(address.County).prop("readonly", true);
            $county.closest(".form-row").find("span.help-block").css("display", "block");
        }

        //Set the Postcode field
        $container.find('.address-postcode input[name$=Postcode]').val(postcode).prop('readonly', true); //set value of PostCode field

        var addressSectionId = $container.attr('id');
        var addressSectionsToShow = '.address-details, .address-details, .address-postcode, .address-living';
        $container.find(addressSectionsToShow).each(function () { //show relevant containers
            $(this).data('collapsible').show();
        });

        $container.find('.address-find, .address-lookup-select').each(function () { //hide relevant fields
            $(this).data('collapsible').hide(0);
        });
        $container.find('input[name$=HasBeenLoadedFromLookup]').val(true);

        apply.validation.validateGroup($container, { removeOnly: true }); //validate address container

        $container.find(".address-details input").trigger('change');
        $container.find(".address-postcode input").trigger('change'); //trigger silent validation by simulating a change event on one of the fields
    };


    /**F
         * Populates BFPO address form with relevant address details
         * @param {object} address The address object
         * @param {$} $container The relevant address container (e.g current address, previous address, employers address, correspondance address) 
         */
    var populateBFPOAddress = function (address, $container) {
        // clear bfpo-details input and status
        $container.find(".bfpo-details input")
            .val("")
            .data('changed', false)
            .removeClass("validation-error-highlight");
        $container.find(".bfpo-details input").closest('.form-row').find("span.help-block").css("display", "none");

        var isEditDetails = $("#your-address-edit").length > 0;
        if (isEditDetails) {
            $container.find('.bfpo-details input[name$=AddressBfpoLocation3]').val(address.BfpoLocation3).prop('readonly', true);
            $container.find('.bfpo-details input[name$=AddressBfpoLocation4]').val(address.BfpoLocation4).prop('readonly', true);

            if (address.BfpoCode != null && address.BfpoCode != "") {
                $container.find('.bfpo-code input[name$=AddressBfpoCode]').val(address.BfpoCode).prop('readonly', true);  // For EDIT DETAILS only
            }
        }
        else {
            $container.find('.bfpo-details input[name$=AddressBFPOLocation3]').val(address.BfpoLocation3).prop('readonly', true);
            $container.find('.bfpo-details input[name$=AddressBFPOLocation4]').val(address.BfpoLocation4).prop('readonly', true);

            if (address.BfpoCode != null && address.BfpoCode != "") {
                $container.find('.bfpo-code input[name$=AddressBFPOCode]').val(address.BfpoCode).prop('readonly', true);
            }
        }

        var addressSectionId = $container.attr('id');
        var bfpoAddressSectionsToShow = '.bfpo-details, .bfpo-code, .address-living';
        $container.find(bfpoAddressSectionsToShow).each(function () { //show relevant containers
            $(this).data('collapsible').show();
        });
        $container.find('.address-find, .address-lookup-select').each(function () { //hide relevant fields
            $(this).data('collapsible').hide(0);
        });
        $container.find('input[name$=HasBeenLoadedFromLookup]').val(true);

        apply.validation.validateGroup($container, { removeOnly: true }); //validate address container

        if (isEditDetails) {
            $container.find('.bfpo-details input[name$=AddressBfpoLocation3]').trigger('change');
            $container.find('.bfpo-code input[name=AddressBfpoCode]').trigger('change'); //// For EDIT DETAILS only
        }
        else {
            $container.find('.bfpo-details input[name$=AddressBFPOLocation3]').trigger('change');
            $container.find('.bfpo-code input[name$=AddressBFPOCode]').trigger('change'); //trigger silent validation by simulating a change event on one of the fields
        }
    };


    /**
         * Updates form when address has been pre-populated 
         */
    var setupAddress = function ($container) {
        $container.find('.address-details, .address-postcode, .address-living').each(function () { //show relevant containers
            $(this).data('collapsible').show();
        });
        $container.find('.address-find, .address-lookup-select').each(function () { //hide relevant fields
            $(this).data('collapsible').hide(0);
        });

        apply.validation.validateGroup($container, { removeOnly: true }); //validate address container

        $container.find('.address-postcode input[name$=Postcode]').trigger('change'); //trigger silent validation by simulating a change event on one of the fields
    };


    /**
         * Event handler for manual address entry button on address and bfpo manual address
         */
    var wireTypeAddressManuallyClick = function () {
        $('body').on('click', '.address-supply-manual', function () { //on click event...        
            var $whichAddress = $(this).closest('.address-section'),
                isBFPO = IsBFPO($whichAddress);

            removePostcodeErrorMessage($whichAddress);

            removeBFPOErrorMessage($whichAddress);

            if (isBFPO) {
                removeBFPOErrorMessage($whichAddress);
                $whichAddress.find('.bfpo-details, .bfpo-address-find, .address-living').each(function () { //show relevant containers
                    $(this).data('collapsible').show();
                });
                $whichAddress.find('.bfpo-address-find, .address-lookup-select').each(function () { //hide relevant fields
                    $(this).data('collapsible').hide(0);
                });
                $whichAddress.find('p.address-section-error').hide();
            }
            else {
                $whichAddress.find('.address-details, .address-postcode, .address-living, .address-back').each(function () { //show relevant containers
                    $(this).find(".help-block").hide();
                    $(this).find("span.validation-icon").hide();
                    $(this).data('collapsible').show();
                });
                $whichAddress.find('.address-find, .address-lookup-select, .address-lookup-select').each(function () { //hide relevant fields
                    $(this).data('collapsible').hide(0);
                });
                $whichAddress.find('p.address-section-error').hide();
            }


            $whichAddress.find('.address-supply-lookup.btn.btn-primary').each(function () {
                $(this).siblings("span.validation-icon[data-validation-valid]").hide();
            });

            enableAddressInput($whichAddress, isBFPO);

            disableFindAddressButton($whichAddress);

            apply.validation.validateGroup($whichAddress, { removeOnly: true }); //validate address container

            return false;
        });

        $('body').on('click', '.personal-address-supply-normal', function () {
            var $whichAddress = $(this).closest('.address-section');
            $whichAddress.find('.normal-address-details').each(function () {
                $(this).data('collapsible').show();
            });
            $whichAddress.find('.bfpo-address-details').each(function () {
                $(this).data('collapsible').hide(0);
            });

            $('#AddressBfpoLocation1').val('');
            $('#AddressBfpoLocation2').val('');
            $('#AddressBfpoLocation3').val('');
            $('#AddressBfpoCode').val('');
            $('#normalAddress').show();
            $('#BFPOAddress').hide();
            $('#personal-address-supply-bfpo').show();
            $('#personal-address-supply-normal').hide();
            $('#AddressSubType').val('');

            return false;
        });

        $('body').on('click', '.personal-address-supply-bfpo', function () {
            var $whichAddress = $(this).closest('.address-section');
            $whichAddress.find('.bfpo-address-details').each(function () {
                $(this).data('collapsible').show();
            });
            $whichAddress.find('.normal-address-details').each(function () {
                $(this).data('collapsible').hide(0);
            });

            $('#FlatNumber').val('');
            $('#BuildingNumber').val('');
            $('#BuildingName').val('');
            $('#StreetName').val('');
            $('#District').val('');
            $('#TownOrCity').val('');
            $('#County').val('');
            $('#Postcode').val('');
            $('#normalAddress').hide();
            $('#BFPOAddress').show();
            $('#personal-address-supply-bfpo').hide();
            $('#personal-address-supply-normal').show();
            $('#AddressSubType').val('BFPO');

            return false;
        });

        $('body').on('click', '.bfpo-address-supply-manual', function () { //on click event...                    
            var $whichAddress = $(this).closest('.address-section');
            $('#AddressSubType').val('BFPO');
            $whichAddress.find('.address-lookup-select').removeAttr("data-searchtype");
            removeBFPOErrorMessage($whichAddress);

            $whichAddress.find('.bfpo-details, .bfpo-code, .address-living').each(function () { //show relevant containers
                $(this).data('collapsible').show();
                $(this).find(".help-block").hide();
                $(this).find(".validation-icon").hide();


            });
            $whichAddress.find('.bfpo-address-find, .bfpo-address-lookup-select').each(function () { //hide relevant fields
                $(this).data('collapsible').hide(0);
            });
            enableAddressInput($whichAddress, true);
            disableFindAddressButton($whichAddress);
            disableChooseAddress($whichAddress);

            apply.validation.validateGroup($whichAddress, { removeOnly: true }); //validate address container
            return false;
        });
    };

    var UncheckCopyAddressFromMainApplicant = function () {
        $('#JACopyAddressFromMainApplicant').prop("checked", false);
        $('.custom-checkbox-btn').removeClass('active');
        $('.custom-checkbox-btn').find('i').removeClass('icon-check');
        $('.custom-checkbox-btn').find('i').addClass('icon-check-empty');

    }

    var IsBFPO = function ($whichAddress) {
        var inBFPOSection = false;
        var $BFPOSection = $whichAddress.find('.bfpo-details'), $BFPOCodeSection = $whichAddress.find('.bfpo-code');
        if ($BFPOSection.length && $BFPOSection.is(':hidden')) {
            if ($BFPOCodeSection.length && !$BFPOCodeSection.is(':hidden')) {
                inBFPOSection = true;
            } else {
                var $lookupSection = $whichAddress.find('.address-lookup-select');
                if ($lookupSection.length && !$lookupSection.is(':hidden') && $lookupSection.attr('data-searchtype') == 'bfpocode') {
                    inBFPOSection = true;
                }
                else {
                    inBFPOSection = false;
                }
            }
        } else {
            inBFPOSection = true;
        }
        return inBFPOSection;
    };

    /**
         * Event handler for address back button
         */
    var wireTypeBackAddressClick = function () {
        $('body').on('click', '.address-back-lookup', function () { //on click event                     
            var $whichAddress = $(this).closest('.address-section'), isBFPO = IsBFPO($whichAddress),
                $BFPOSection = $whichAddress.find('.bfpo-details');
            var $nextSection = $whichAddress.nextAll('.address-section');
            var $prevNextSection = $nextSection.nextAll('.address-section');
            $('#AddressSubType').val('');
            $whichAddress.find('.bfpo-address-details input[name$=AddressBFPOCode]').val('').prop('readonly', false); //clear value of AddressBFPOCode field
            if ($('#AddressSubType').val() != undefined) { //Edit details address ONLY
                $whichAddress.find('.bfpo-address-details input[name$=AddressBfpoCode]').val('').prop('readonly', false); //clear value of AddressBfpoCode field
            }

            var addressSectionId = $whichAddress.attr('id');

            if (isBFPO) {
                $whichAddress.find(".bfpo-details input, .bfpo-code input").val("").data("changed", false).removeClass("validation-error-highlight");
                $whichAddress.find(".bfpo-details input, .bfpo-code input").closest('.form-row').find("span.help-block").css("display", "none");
                $whichAddress.find(".address-living select").val("").data("changed", false).removeClass("validation-error-highlight");
                $whichAddress.find(".address-living select").closest('.form-row').find("span.help-block").css("display", "none");
                removeBFPOErrorMessage($whichAddress);

                var bfpoAddressSectionsToHide = '.bfpo-details, .bfpo-address-lookup-select, .address-lookup-select, .address-living';
                $whichAddress.find(bfpoAddressSectionsToHide).each(function () { //show relevant containers
                    $(this).data('collapsible').hide();
                });

                $whichAddress.find('.bfpo-address-lookup, .bfpo-code, .bfpo-address-find').each(function () {
                    if ($(this).data('collapsible') !== undefined) {
                        $(this).data('collapsible').show();
                    }
                });

                if ($BFPOSection.length && $BFPOSection.is(':hidden')) {
                    // coming back from bfpo select, only go back to BFPO find address
                    var $bfpoLookupSection = $whichAddress.find('.address-lookup-select[data-searchtype="bfpocode"]');
                    if ($bfpoLookupSection.length > 0) {
                        $bfpoLookupSection.removeAttr("data-searchtype");
                    }
                    else {
                        // Need to return to main address lookup
                        isBFPO = false; // drop into next if statement
                    }
                }
                // it is BFPO
                if (isBFPO) {
                    $('#AddressSubType').val('BFPO'); // set for validation
                }
                enableFindAddressButton($whichAddress);
                enableChooseAddress($whichAddress);
                var whatAddressSection = $whichAddress.attr('id');
                hideBFPOHeadings(whatAddressSection);
            }
            if (!isBFPO) { // Second if check to allow dropping in from previous if check

                removeBFPOErrorMessage($whichAddress);
                var addressSectionsToHide = '.bfpo-address-details, .address-living, .address-details, .address-back, .address-lookup-select';
                $whichAddress.find(addressSectionsToHide).each(function () { //show relevant containers
                    $(this).data('collapsible').hide();
                });

                $whichAddress.find('.address-postcode, .address-find').each(function () {
                    $(this).data('collapsible').show();
                    $(this).find('span.help-block, span.validation-icon').hide();
                });


                //it is NOT BFPO
                enableChooseAddress($whichAddress);
                enableFindAddressButton($whichAddress);

            }

            ////////////// Find previous address sections to hide//////////////////////////////////
            var whatAddressSection = $whichAddress.attr('id');
            if (whatAddressSection == "currentAddress" || whatAddressSection == "previousAddress") {
                if ($nextSection.data('collapsible') != null) {
                    $nextSection.data('collapsible').hide(); //hide next address

                    $('#PreviousAddress_AddressStartLivingMonth').val("");
                    $('#PreviousAddress_AddressStartLivingYear').val("");

                }
            }


            else if (whatAddressSection == "jacurrentAddress" || whatAddressSection == "japreviousAddress") {
                if ($nextSection.data('collapsible') != null) {
                    $nextSection.data('collapsible').hide(); //hide next address

                    $('#JAPreviousAddress_AddressStartLivingMonth').val("");
                    $('#JAPreviousAddress_AddressStartLivingYear').val("");

                }
            }

            else if (whatAddressSection == "currentAddress") {
                if ($prevNextSection.data('collapsible') != null) {
                    $prevNextSection.data('collapsible').hide(); //hide last address
                }

                $('#EarlierPreviousAddress_AddressStartLivingMonth').val("");
                $('#EarlierPreviousAddress_AddressStartLivingYear').val("");
            }
            else if (whatAddressSection == "jacurrentAddress") {
                if ($prevNextSection.data('collapsible') != null) {
                    $prevNextSection.data('collapsible').hide(); //hide last address
                }

                $('#JAEarlierPreviousAddress_AddressStartLivingMonth').val("");
                $('#JAEarlierPreviousAddress_AddressStartLivingYear').val("");
            }

            else if (whatAddressSection == "currentAddress") {
                if ($prevNextSection.data('collapsible') != null & $nextSection.data('collapsible') != null) //reset current living date
                {
                    $('#CurrentAddress_AddressStartLivingMonth').val("");
                    $('#CurrentAddress_AddressStartLivingYear').val("");
                }
            }
            else if (whatAddressSection == "jacurrentAddress") {
                if ($prevNextSection.data('collapsible') != null & $nextSection.data('collapsible') != null) {//reset current living date
                    $('#JACurrentAddress_AddressStartLivingMonth').val("");
                    $('#JACurrentAddress_AddressStartLivingYear').val("");

                    $('#JACurrentAddress_ResidentialStatus').val("Select residential status");
                }
            }

            else if (whatAddressSection == "previousAddress") {
                apply.validation.validateField($('#CurrentAddress_AddressStartLivingMonth'), { "highlight": true, "quiet": false });
                apply.validation.validateField($('#CurrentAddress_AddressStartLivingYear'), { "highlight": true, "quiet": false });
            }
            else if (whatAddressSection == "japreviousAddress") {
                apply.validation.validateField($('#JACurrentAddress_AddressStartLivingMonth'), { "highlight": true, "quiet": false });
                apply.validation.validateField($('#JACurrentAddress_AddressStartLivingYear'), { "highlight": true, "quiet": false });
            }
            else if (whatAddressSection == "earlierPreviousAddress") {
                apply.validation.validateField($('#PreviousAddress_AddressStartLivingMonth'), { "highlight": true, "quiet": false });
                apply.validation.validateField($('#PreviousAddress_AddressStartLivingYear'), { "highlight": true, "quiet": false });
            }
            else if (whatAddressSection == "jaearlierPreviousAddress") {
                apply.validation.validateField($('#JAPreviousAddress_AddressStartLivingMonth'), { "highlight": true, "quiet": false });
                apply.validation.validateField($('#JAPreviousAddress_AddressStartLivingYear'), { "highlight": true, "quiet": false });
            }


            //////////////////////////////////////////////////////////////////////////////////////

            enableAddressInput($whichAddress, isBFPO);

            //enableFindAddressButton2($whichAddress);
            apply.validation.validateGroup($whichAddress, { removeOnly: true }); //validate address container

            return false;

        });
    };

    var clearAddressFields = function ($whichAddress) {
        $whichAddress.find('.address-details   input[name$=FlatNumber]').val('').prop('readonly', false); //set value of flat number field
        $whichAddress.find('.address-details   input[name$=HouseNumber]').val('').prop('readonly', false); //set value of house number field
        $whichAddress.find('.address-details   input[name$=HouseName]').val('').prop('readonly', false); //set value of house name field
        $whichAddress.find('.address-details  input[name$=Line1]').val('').prop('readonly', false); //set value of address line 1 field
        $whichAddress.find('.address-details  input[name$=Line2]').val('').prop('readonly', false); //set value of address line 2 field
        $whichAddress.find('.address-details  input[name$=Town]').val('').prop('readonly', false); //set value of town field
        $whichAddress.find('.address-details  input[name$=County]').val('').prop('readonly', false); //set value of county field
        $whichAddress.find('.address-postcode input[name$=Postcode]').val('').prop('readonly', false); //set value of PostCode field
        $whichAddress.find('.address-living select[name$=AddressStartLivingMonth]').val('').prop('readonly', false); //set value of PostCode field
        $whichAddress.find('.address-living select[name$=AddressStartLivingYear]').val('').prop('readonly', false); //set value of PostCode field

        // clear fields for the edit address in Edit details 
        $whichAddress.find('.address-details   input[name$=FlatNumber]').val('').prop('readonly', false); //set value of flat number field
        $whichAddress.find('.address-details   input[name$=BuildingNumber]').val('').prop('readonly', false); //set value of house number field
        $whichAddress.find('.address-details   input[name$=BuildingName]').val('').prop('readonly', false); //set value of house name field
        $whichAddress.find('.address-details  input[name$=StreetName]').val('').prop('readonly', false); //set value of address line 1 field
        $whichAddress.find('.address-details  input[name$=District]').val('').prop('readonly', false); //set value of address line 2 field
        $whichAddress.find('.address-details  input[name$=TownOrCity]').val('').prop('readonly', false); //set value of town field
        $whichAddress.find('.address-details  input[name$=County]').val('').prop('readonly', false); //set value of county field
        $whichAddress.find('.address-postcode input[name$=Postcode]').val('').prop('readonly', false); //set value of PostCode field

        $whichAddress.find('.help-block').hide();
    }

    var clearBFPOFields = function ($whichAddress) {
        $whichAddress.find('.bfpo-details input[name$=AddressBFPOLocation1]').val('').prop('readonly', false);
        $whichAddress.find('.bfpo-details input[name$=AddressBFPOLocation2]').val('').prop('readonly', false);
        $whichAddress.find('.bfpo-details input[name$=AddressBFPOLocation3]').val('').prop('readonly', false);
        $whichAddress.find('.bfpo-details input[name$=AddressBFPOLocation4]').val('').prop('readonly', false);
        $whichAddress.find('.lookup-wrapper input[name$=AddressBFPOCode]').val('').prop('readonly', false);

        $whichAddress.find('.address-living select[name$=AddressStartLivingMonth]').val('').prop('readonly', false); //set value of PostCode field
        $whichAddress.find('.address-living select[name$=AddressStartLivingYear]').val('').prop('readonly', false); //set value of PostCode field

        //Clear BFPO fields for EDIT DETAILS only
        $whichAddress.find('.bfpo-details input[name$=AddressBfpoLocation1]').val('').prop('readonly', false);
        $whichAddress.find('.bfpo-details input[name$=AddressBfpoLocation2]').val('').prop('readonly', false);
        $whichAddress.find('.bfpo-details input[name$=AddressBfpoLocation3]').val('').prop('readonly', false);
        $whichAddress.find('.bfpo-details input[name$=AddressBfpoLocation4]').val('').prop('readonly', false);
        $whichAddress.find('.lookup-wrapper input[name$=AddressBfpoCode]').val('').prop('readonly', false);
    }

    var enableAddressInput = function ($whichAddress, isBFPO) {
        if (isBFPO) {
            //Clear BFPO fields for EDIT DETAILS
            $whichAddress.find(".bfpo-details input").val(undefined).data("changed", false).prop('readonly', false).removeClass("validation-error-highlight");
            $whichAddress.find(".bfpo-details input").closest('.form-row').find("span.help-block").css("display", "none");
            $whichAddress.find(".bfpo-code input").val("").data("changed", false).prop('readonly', false).removeClass("validation-error-highlight");
            $whichAddress.find(".bfpo-code input").closest('.form-row').find("span.help-block").css("display", "none");
        } else {
            // clear fields for the edit address in Edit details 
            $whichAddress.find(".address-details input").val(undefined).data("changed", false).prop('readonly', false).removeClass("validation-error-highlight");
            $whichAddress.find(".address-details input").closest('.form-row').find("span.help-block").css("display", "none");
            $whichAddress.find(".address-details input").closest('.form-row').find("span.help-block").css("display", "none");
            $('#CurrentAddress_AddressLine2').siblings("span.validation-icon[data-validation-valid]").hide();
            $('#CurrentAddress_AddressCounty').siblings("span.validation-icon[data-validation-valid]").hide();
            $whichAddress.find(".address-postcode input").val("").data("changed", false).prop('readonly', false).removeClass("validation-error-highlight");
            $whichAddress.find(".address-postcode input").closest('.form-row').find("span.help-block").css("display", "none");
        }

        $whichAddress.find(".address-living select").val("").data("changed", false).removeClass("validation-error-highlight");
        $whichAddress.find(".address-living select").closest('.form-row').find("span.help-block").css("display", "none");
    }

    function removeBFPOCodeFieldHighlight($whichAddress) {
        var whatAddressSection = $whichAddress.attr('id');
        if (whatAddressSection == "currentAddress") {  //CURRENT ADDRESS
            if ($("#CurrentAddress_AddressBFPOCode").attr('class')) {
                $('#CurrentAddress_AddressBFPOCode').removeAttr("class"); //remove attribute that highlights the text field in red
            }

            if ($("#AddressBfpoCode").attr('class')) { // for EDIT ADDRESS DETAILS only
                $('#AddressBfpoCode').removeAttr("class"); //remove attribute that highlights the text field in red
            }
        }
        if (whatAddressSection == "previousAddress") {  //PREVIOUS ADDRESS
            if ($("#PreviousAddress_AddressBFPOCode").attr('class')) {
                $('#PreviousAddress_AddressBFPOCode').removeAttr("class"); //remove attribute that highlights the text field in red
            }
        }


        if (whatAddressSection == "achCurrentAddress") {  // ACH CURRENT ADDRESS
            if ($("#AchCurrentAddress_AddressBFPOCode").attr('class')) {
                $('#AchCurrentAddress_AddressBFPOCode').removeAttr("class"); //remove attribute that highlights the text field in red
            }

            if ($("#AchAddressBfpoCode").attr('class')) { // for EDIT ADDRESS DETAILS only
                $('#AchAddressBfpoCode').removeAttr("class"); //remove attribute that highlights the text field in red
            }
        }
        if (whatAddressSection == "achPreviousAddress") {  //ACH PREVIOUS ADDRESS
            if ($("#AchPreviousAddress_AddressBFPOCode").attr('class')) {
                $('#AchPreviousAddress_AddressBFPOCode').removeAttr("class"); //remove attribute that highlights the text field in red
            }
        }


        if (whatAddressSection == "earlierPreviousAddress") {  //EARLIER ADDRESS
            if ($("#EarlierPreviousAddress_AddressBFPOCode").attr('class')) {
                $('#EarlierPreviousAddress_AddressBFPOCode').removeAttr("class"); //remove attribute that highlights the text field in red
            }
        }

        if (whatAddressSection == "jacurrentAddress") {  //CURRENT ADDRESS
            if ($("#JACurrentAddress_AddressBFPOCode").attr('class')) {
                $('#JACurrentAddress_AddressBFPOCode').removeAttr("class"); //remove attribute that highlights the text field in red
            }
        }
        if (whatAddressSection == "japreviousAddress") {  //PREVIOUS ADDRESS
            if ($("#JAPreviousAddress_AddressBFPOCode").attr('class')) {
                $('#JAPreviousAddress_AddressBFPOCode').removeAttr("class"); //remove attribute that highlights the text field in red
            }
        }
        if (whatAddressSection == "jaearlierPreviousAddress") {  //EARLIER ADDRESS
            if ($("#JAEarlierPreviousAddress_AddressBFPOCode").attr('class')) {
                $('#JAEarlierPreviousAddress_AddressBFPOCode').removeAttr("class"); //remove attribute that highlights the text field in red
            }
        }
    }

    /**
     * Event handler for manual BFPO address entry button
     */
    var wireEnterBFPOAddressClick = function () {
        $('body').on('click', '.address-supply-bfpo', function () { //on click event...      
            var $whichAddress = $(this).closest('.address-section');
            removePostcodeErrorMessage($whichAddress);
            removeBFPOErrorMessage($whichAddress);

            removeBFPOCodeFieldHighlight($whichAddress);

            $('#AddressSubType').val('BFPO');

            $whichAddress.find('.address-details, .address-postcode, .address-living, .address-lookup-select, .address-find').each(function () { //hide relevant fields
                $(this).data('collapsible').hide();
            });
            $whichAddress.find('.bfpo-address-details, .bfpo-code, .bfpo-address-find, .address-back').each(function () { //show relevant containers
                $(this).data('collapsible').show();
            });

            $whichAddress.find('.address-postcode input[name$=Postcode]').val('').prop('readonly', false); //clear value of PostCode field
            $whichAddress.find('.bfpo-code input[name$=AddressBFPOCode]').val('').prop('readonly', false); // clear value of bfpo code

            $whichAddress.find('.bfpo-code input[name$=AddressBfpoCode]').val('').prop('readonly', false); // clear value of bfpo code for edit details address ONLY

            $whichAddress.find('[name$=IsAddressBfpoFormat]').each(function () {
                $(this).val('true');
            });

            apply.validation.validateGroup($whichAddress, { removeOnly: true }); //validate address container

            enableFindAddressButton($whichAddress);
            //// * here I modify the headings and paragraph  */
            var whatAddressSection = $whichAddress.attr('id');
            hideBFPOHeadings(whatAddressSection);
            clearAddressFields($whichAddress);
            clearBFPOFields($whichAddress);
            return false;
        });
    };

    function hideBFPOHeadings(addressSectionName) {
        if (addressSectionName === "currentAddress" || addressSectionName === "achCurrentAddress") {
            $('#weSupportBFPO').hide();
            $('#currentAddressHeader').hide();
            $('#normalAddress').hide();
            $('#BFPOAddress').show();
            $('#currentBFPOAddressHeader').show();
        }
        // hide previous address header and show the new for BFPO
        if (addressSectionName === "previousAddress" || addressSectionName === "achPreviousAddress") {
            $('#previousAddressHeader').hide();
            $('#previousBFPOAddressHeader').show();
        }
        // hide prior previous address header and show the new for BFPO
        if (addressSectionName == "earlierPreviousAddress") {
            $('#priorPreviousAddressHeader').hide();
            $('#priorPreviousBFPOAddressHeader').show();
        }

        //now for JOINT APPLICANT *****************
        if (addressSectionName == "jacurrentAddress") {
            $('#weSupportBFPOJa').hide();
            $('#currentAddressHeaderJa').hide();
            $('#normalAddressJa').hide();
            $('#BFPOAddressJa').show();
        }
        if (addressSectionName == "japreviousAddress") {
            // hide previous address header and show the new for BFPO
            $('#previousAddressHeaderJa').hide();
            $('#previousBFPOAddressHeaderJa').show();
        }
        if (addressSectionName == "jaearlierPreviousAddress") {
            // hide prior previous address header and show the new for BFPO
            $('#priorPreviousAddressHeaderJa').hide();
            $('#priorPreviousBFPOAddressHeaderJa').show();
        }
    }


    var wireValidateBFPOCodeOnFocusOutChangeForCurrentAddress = function () {
        $('#CurrentAddress_AddressBFPOCode').blur(function () {
            var isBFPOCodeValid = apply.validation.validateField($('#CurrentAddress_AddressBFPOCode'), { "highlight": true, "quiet": false });

            if (isBFPOCodeValid) {
                $('#CurrentAddress_AddressBFPOCode_span').attr('data-validation-valid', 'CurrentAddress.AddressBFPOCode'); //add new attribute
                $('#CurrentAddress_AddressBFPOCode_span').removeAttr("data-validation-error"); //remove attribute
                $('#CurrentAddress_AddressBFPOCode_span').attr('style', 'display: none;'); //add new attribute to make the message dissapear
            }
        });
    };


    var wireValidateBFPOCodeOnFocusOutChangeForPreviousAddress = function () {
        $('#PreviousAddress_AddressBFPOCode').blur(function () {
            var isBFPOCodeValid = apply.validation.validateField($('#PreviousAddress_AddressBFPOCode'), { "highlight": true, "quiet": false });
            if (isBFPOCodeValid) {
                $('#PreviousAddress_AddressBFPOCode_span').attr('data-validation-valid', 'PreviousAddress.AddressBFPOCode'); //add new attribute
                $('#PreviousAddress_AddressBFPOCode_span').removeAttr("data-validation-error"); //remove attribute
                //$('#PreviousAddress_AddressBFPOCode_span').attr('style', 'display: none;'); //add new attribute to make the message dissapear

                $('#PreviousAddress_AddressBFPOCode_span1').attr('data-validation-valid', 'PreviousAddress.AddressBFPOCode'); //add new attribute
                $('#PreviousAddress_AddressBFPOCode_span1').removeAttr("data-validation-error"); //remove attribute
                //$('#PreviousAddress_AddressBFPOCode_span1').attr('style', 'display: none;'); //add new attribute to make the message dissapear
            }

        });
    };




    var wireValidateBFPOCodeOnFocusOutChangeForCurrentAddressACH = function () {
        $('#AchCurrentAddress_AddressBFPOCode').blur(function () {
            var isBFPOCodeValid = apply.validation.validateField($('#AchCurrentAddress_AddressBFPOCode'), { "highlight": true, "quiet": false });

            if (isBFPOCodeValid) {
                $('#AchCurrentAddress_AddressBFPOCode_span').attr('data-validation-valid', 'AchCurrentAddress.AddressBFPOCode'); //add new attribute
                $('#AchCurrentAddress_AddressBFPOCode_span').removeAttr("data-validation-error"); //remove attribute
                $('#AchCurrentAddress_AddressBFPOCode_span').attr('style', 'display: none;'); //add new attribute to make the message dissapear
            }
        });
    };


    var wireValidateBFPOCodeOnFocusOutChangeForPreviousAddressACH = function () {
        $('#AchPreviousAddress_AddressBFPOCode').blur(function () {
            var isBFPOCodeValid = apply.validation.validateField($('#AchPreviousAddress_AddressBFPOCode'), { "highlight": true, "quiet": false });
            if (isBFPOCodeValid) {
                $('#AchPreviousAddress_AddressBFPOCode_span').attr('data-validation-valid', 'AchPreviousAddress.AddressBFPOCode'); //add new attribute
                $('#AchPreviousAddress_AddressBFPOCode_span').removeAttr("data-validation-error"); //remove attribute
                //$('#PreviousAddress_AddressBFPOCode_span').attr('style', 'display: none;'); //add new attribute to make the message dissapear

                $('#AchPreviousAddress_AddressBFPOCode_span1').attr('data-validation-valid', 'AchPreviousAddress.AddressBFPOCode'); //add new attribute
                $('#AchPreviousAddress_AddressBFPOCode_span1').removeAttr("data-validation-error"); //remove attribute
                //$('#PreviousAddress_AddressBFPOCode_span1').attr('style', 'display: none;'); //add new attribute to make the message dissapear
            }

        });
    };







    var wireValidateBFPOCodeOnFocusOutChangeForEarlierPreviousAddress = function () {
        $('#EarlierPreviousAddress_AddressBFPOCode').blur(function () {
            var isBFPOCodeValid = apply.validation.validateField($('#EarlierPreviousAddress_AddressBFPOCode'), { "highlight": true, "quiet": false });
            if (isBFPOCodeValid) {
                $('#EarlierPreviousAddress_AddressBFPOCode_span').attr('data-validation-valid', 'EarlierPreviousAddress.AddressBFPOCode'); //add new attribute
                $('#EarlierPreviousAddress_AddressBFPOCode_span').removeAttr("data-validation-error"); //remove attribute
                //$('#EarlierPreviousAddress_AddressBFPOCode_span').attr('style', 'display: none;'); //add new attribute to make the message dissapear

                $('#EarlierPreviousAddress_AddressBFPOCode_span1').attr('data-validation-valid', 'EarlierPreviousAddress.AddressBFPOCode'); //add new attribute
                $('#EarlierPreviousAddress_AddressBFPOCode_span1').removeAttr("data-validation-error"); //remove attribute
                //$('#EarlierPreviousAddress_AddressBFPOCode_span1').attr('style', 'display: none;'); //add new attribute to make the message dissapear
            }
        });
    };
    var wireValidateBFPOCodeOnFocusOutChangeForJACurrentAddress = function () {
        $('#JACurrentAddress_AddressBFPOCode').blur(function () {
            var isBFPOCodeValid = apply.validation.validateField($('#JACurrentAddress_AddressBFPOCode'), { "highlight": true, "quiet": false });
            if (isBFPOCodeValid) {
                $('#JACurrentAddress_AddressBFPOCode_span').attr('data-validation-valid', 'JACurrentAddress.AddressBFPOCode'); //add new attribute
                $('#JACurrentAddress_AddressBFPOCode_span').removeAttr("data-validation-error"); //remove attribute
                //$('#JACurrentAddress_AddressBFPOCode_span').attr('style', 'display: none;'); //add new attribute to make the message dissapear
            }
        });
    };
    var wireValidateBFPOCodeOnFocusOutChangeForJAPreviousAddresss = function () {
        $('#JAPreviousAddress_AddressBFPOCode').blur(function () {
            var isBFPOCodeValid = apply.validation.validateField($('#JAPreviousAddress_AddressBFPOCode'), { "highlight": true, "quiet": false });
            if (isBFPOCodeValid) {
                $('#JAPreviousAddress_AddressBFPOCode_span').attr('data-validation-valid', 'JAPreviousAddress.AddressBFPOCode'); //add new attribute
                $('#JAPreviousAddress_AddressBFPOCode_span').removeAttr("data-validation-error"); //remove attribute
                $('#JAPreviousAddress_AddressBFPOCode_span').attr('style', 'display: none;'); //add new attribute to make the message dissapear

                $('#JAPreviousAddress_AddressBFPOCode_span1').attr('data-validation-valid', 'JAPreviousAddress.AddressBFPOCode'); //add new attribute
                $('#JAPreviousAddress_AddressBFPOCode_span1').removeAttr("data-validation-error"); //remove attribute
                $('#JAPreviousAddress_AddressBFPOCode_span1').attr('style', 'display: none;'); //add new attribute to make the message dissapear
            }
        });
    };
    var wireValidateBFPOCodeOnFocusOutChangeForJAEarlierPreviousAddress = function () {
        $('#JAEarlierPreviousAddress_AddressBFPOCode').blur(function () {
            var isBFPOCodeValid = apply.validation.validateField($('#JAEarlierPreviousAddress_AddressBFPOCode'), { "highlight": true, "quiet": false });
            if (isBFPOCodeValid) {
                $('#JAEarlierPreviousAddress_AddressBFPOCode_span').attr('data-validation-valid', 'JAEarlierPreviousAddress.AddressBFPOCode'); //add new attribute
                $('#JAEarlierPreviousAddress_AddressBFPOCode_span').removeAttr("data-validation-error"); //remove attribute
                $('#JAEarlierPreviousAddress_AddressBFPOCode_span').attr('style', 'display: none;'); //add new attribute to make the message dissapear

                $('#JAEarlierPreviousAddress_AddressBFPOCode_span1').attr('data-validation-valid', 'JAEarlierPreviousAddress.AddressBFPOCode'); //add new attribute
                $('#JAEarlierPreviousAddress_AddressBFPOCode_span1').removeAttr("data-validation-error"); //remove attribute
                $('#JAEarlierPreviousAddress_AddressBFPOCode_span1').attr('style', 'display: none;'); //add new attribute to make the message dissapear
            }
        });
    };

    disableFindAddressButton = function ($whichAddress) {
        $whichAddress.find('.address-supply-lookup.btn.btn-primary').each(function () {
            $(this).hide().attr('disabled', 'true');
        });
    }
    disableChooseAddress = function ($whichAddress) {

        $whichAddress.find('.address-lookup-select').each(function () {//hide relevant containers
            $(this).hide().attr('disabled', 'true');
            $(this).data('collapsible').hide(0);
        });
        $whichAddress.find('.bfpo-code').each(function () { //show relevant containers
            $(this).data('collapsible').show();
        });
    }
    enableFindAddressButton = function ($whichAddress) {
        $whichAddress.find(".address-lookup-select select").closest('.form-row').find("span.help-block").css("display", "none");
        $whichAddress.find('.address-supply-lookup.btn.btn-primary').each(function () {
            $(this).show().removeAttr('disabled');

            var $currentAddressElement = $('#jacurrentAddress');

            var whatAddressSection = $whichAddress.attr('id');
            if (whatAddressSection == "currentAddress" || whatAddressSection === "achCurrentAddress") {
                $('#weSupportBFPO').show();
                $('#currentAddressHeader').show();

                $whichAddress.find('.address-postcode').each(function () {
                    if ($(this).css('display') === 'none') {
                        $('#normalAddress').hide();
                        $('#BFPOAddress').show();
                    }
                    else {
                        $('#normalAddress').show();
                        $('#BFPOAddress').hide();
                    }
                });

                $('#currentBFPOAddressHeader').hide();
            }
            if (whatAddressSection == "previousAddress" || whatAddressSection === "achPreviousAddress") {
                $('#previousAddressHeader').show();
                $('#previousBFPOAddressHeader').hide();
            }
            if (whatAddressSection == "earlierPreviousAddress") {
                $('#priorPreviousAddressHeader').show();
                $('#priorPreviousBFPOAddressHeader').hide();
            }

            //  for joint applicant **********
            if (whatAddressSection == "jacurrentAddress") {
                $('#weSupportBFPOJa').show();
                $('#currentAddressHeaderJa').show();
                $('#normalAddressJa').show();
                $('#BFPOAddressJa').hide();
            }
            if (whatAddressSection == "japreviousAddress") {
                $('#previousAddressHeaderJa').show();
                $('#previousBFPOAddressHeaderJa').hide();
            }
            if (whatAddressSection == "jaearlierPreviousAddress") {
                $('#priorPreviousAddressHeaderJa').show();
                $('#priorPreviousBFPOAddressHeaderJa').hide();
            }
        });
    }
    enableChooseAddress = function ($whichAddress) {
        $whichAddress.find('.address-lookup-select').each(function () {
            $(this).removeAttr('disabled');
        });
    }

    $(".address-living").find('.year').change(function () {
        var $whichAddress = $(this).closest('.address-section');
        apply.validation.validateSectionBySelector($whichAddress.find(".address-living"), false, { "highlight": true, "quiet": false });
        //$whichAddress.find(".address-living").validateSection({ "highlight": true, "quiet": false });
        $whichAddress.find(".address-living").find(".help-block").show();
    });

    /**
    * Event Handler for "When did you start living there?" select inputs
    */
    var wireStartLivingThereComboClick = function () {
        $(".address-living").find('.month, .year').change(function () { //on change events for month / year
            var $whichAddress = $(this).closest('.address-section'), $nextSection, $prevSection;
            var $startYear = $whichAddress.find('.start-living-year'), $startMonth = $whichAddress.find('.start-living-month');
            var startLivingYear = $startYear.val(); //get year
            var startLivingMonth = $startMonth.val(); //get month
            var isBFPO = IsBFPO($whichAddress);


            var whatAddressSection = $whichAddress.attr('id');
            // *** MAIN APPLICANT **********************************************************************************************************
            // if it is current vs previous 
            if (whatAddressSection == "previousAddress") {
                var startLivingYearFirst = $('#CurrentAddress_AddressStartLivingYear').val();
                var startLivingMonthFirst = $('#CurrentAddress_AddressStartLivingMonth').val();
            }
            // *** JOINT APPLICANT **********************************************************************************************************
            // if it is current vs previous 
            if (whatAddressSection == "japreviousAddress") {
                var startLivingYearFirst = $('#JACurrentAddress_AddressStartLivingYear').val();
                var startLivingMonthFirst = $('#JACurrentAddress_AddressStartLivingMonth').val();
            }

            $prevSection = $whichAddress.prevAll('.address-section');
            $nextSection = $whichAddress.nextAll('.address-section');
            $prevNextSection = $nextSection.nextAll('.address-section');


            if (startLivingYear === "" || startLivingMonth === "") { //if either are blank fields..
                if ($nextSection.data('collapsible') != null) {
                    $nextSection.data('collapsible').hide(); //hide next address
                }
                if ($prevNextSection.data('collapsible') != null) {
                    $prevNextSection.data('collapsible').hide(); //hide earlierprevious address
                }
            }
            else if (apply.uifunctions.ageInYears(new Date(startLivingYear, startLivingMonth - 1)) < 3) { //otherwise if lived there less than 3 years
                if ($nextSection.data('collapsible') != null) {
                    var isAddressVsAboveOK = timeAtAddressCurrentAgainstNext(startLivingMonthFirst, startLivingYearFirst, startLivingMonth, startLivingYear);
                    if (isAddressVsAboveOK) {

                        $nextSection.find('.bfpo-address-details, .bfpo-details, .address-living, .address-details, .address-back, .address-lookup-select').each(function () { //show relevant containers
                            $(this).data('collapsible').hide();
                        });
                        $nextSection.find('.address-lookup-select').removeAttr("data-searchtype");

                        $nextSection.find('.address-postcode, .address-find').each(function () {
                            $(this).data('collapsible').show();
                        });

                        // If we are clearing the previous address fields than we also need to clear earlierpreviousaddress
                        if ($prevNextSection.data('collapsible') != null) {
                            $prevNextSection.find('.bfpo-address-details, .bfpo-details, .address-living, .address-details, .address-back, .address-lookup-select').each(function () { //show relevant containers
                                $(this).data('collapsible').hide();
                            });
                            $prevNextSection.find('.address-lookup-select').removeAttr("data-searchtype");

                            $prevNextSection.find('.address-postcode, .address-find').each(function () {
                                $(this).data('collapsible').show();
                            });
                            $prevNextSection.data('collapsible').hide(); //hide earlierprevious address
                        }

                        enableFindAddressButton($nextSection);

                        $nextSection.data('collapsible').show(); //show next address
                        clearAddressFields($nextSection);
                        clearBFPOFields($nextSection);
                        removeNextAddressValidation($nextSection);
                    }
                    else {
                        if ($nextSection.data('collapsible') != null) {
                            clearAddressFields($nextSection);
                            clearBFPOFields($nextSection);
                            $nextSection.find('.address-lookup-select').removeAttr("data-searchtype");
                            $nextSection.data('collapsible').hide();
                        }
                    }

                    var whatAddressSection = $whichAddress.attr('id');
                    if (whatAddressSection == "currentAddress") {
                    }
                }

            }
            else { //otherwise (if lived there longer than or equal to 3 years
                clearAddressFields($nextSection);
                clearBFPOFields($nextSection);
                $nextSection.find('.address-lookup-select').removeAttr("data-searchtype");
                if ($nextSection.data('collapsible') != null) {
                    $nextSection.data('collapsible').hide(); //hide next address

                    var whatAddressSection = $whichAddress.attr('id');
                    if (whatAddressSection == "currentAddress") {
                        $('#PreviousAddress_AddressStartLivingMonth').val("");
                        $('#PreviousAddress_AddressStartLivingYear').val("");
                    }
                    //for joint applicant
                    if (whatAddressSection == "jacurrentAddress") {
                        $('#JAPreviousAddress_AddressStartLivingMonth').val("");
                        $('#JAPreviousAddress_AddressStartLivingYear').val("");
                    }

                }
                if ($prevNextSection.data('collapsible') != null) {   ////gc added
                    $prevNextSection.data('collapsible').hide(); //hide next address

                }
            }

            if (startLivingYear != "" && startLivingMonth != "") {
                $startMonth.trigger('blur');
                $startYear.trigger('blur');
                $startYear.focus();
            }

            if ($startYear.hasClass('validation-error-highlight')) {
                $startMonth.addClass('validation-error-highlight');
            }
            else {
                $startMonth.removeClass('validation-error-highlight');
            }

        });
    };

    function timeAtAddressCurrentAgainstNext(currentAddressMonth, currentAddressYear, previousAddressMonth, previousAddressYear) {
        if (currentAddressMonth != "" && currentAddressYear != "" && previousAddressMonth != "" && previousAddressYear != "") {
            if (currentAddressYear - previousAddressYear < 0) {
                return false;
            }
            else {
                if (currentAddressYear - previousAddressYear == 0) {
                    if (currentAddressMonth - previousAddressMonth <= 0) {
                        return false;
                    }
                }
            }
        }
        return true;
    }

    var postcodeChanged = function () {
        var errorSpan = '#' + $(this).prop('id') + '_span';
        var $thisInput = $(this);
        //if ($thisInput.val()) {
        var $whichAddress = $(this).closest('.address-section');
        var valid = $thisInput.validateInput({ "highlight": true, "quiet": false });
        $whichAddress.find(".address-postcode").find(".help-block").show();

        if (valid === '') {
            //is valid
            $whichAddress.find(".address-postcode").find(".validation-icon").attr('style', 'display: block;');
        }

        //}

        setTimeout(function () {

            if ($(errorSpan).text()) {
                $(errorSpan).show();
            } else {
                if (!$(errorSpan).data('validation-valid')) {
                    $(errorSpan).hide();
                }
            }
        }, 100);
    }

    var wirePostcodeChange = function () {
        $('input[name$=AddressPostcode]').each(function () {
            $(this).on('focusout blur', postcodeChanged);
            //$(this).on('keyup blur mouseup', postcodeChanged);
        });
    };

    var wireInputChange = function () {
        $('.input-change').each(function () {
            $(this).on('focusout', function () {
                $(this).parent().find(".validation-icon").show();
            });
        });
    }

    //$("#JACurrentAddress_AddressPostcode").keyup(function () {
    //    var $whichAddress = $(this).closest('.address-section');
    //    $whichAddress.find(".help-block").hide();
    //    $whichAddress.find(".validation-icon").hide();
    //    //$("#JACurrentAddress_AddressPostcode")[0].parentNode.find(".help-block").hide();
    //});
    //$("#JAPreviousAddress_AddressPostcode").keyup(function () {
    //    $("#JAPreviousAddress_AddressPostcode")[0].parentNode.find(".help-block").hide();
    //});
    //$("#JAEarlierPreviousAddress_AddressPostcode").keyup(function () {
    //    $("#JAEarlierPreviousAddress_AddressPostcode")[0].parentNode.find(".help-block").hide();
    //});


    var securityDetailsCredentialsTypeComboclick = function () {
        $('#CredentialsType').change(function () {
            var credentialsTypeComboValue = $('#CredentialsType').val();
            var authenticationType = $('#AuthenticationType').val();

            if (credentialsTypeComboValue.toLowerCase() == "username") {
                $("#username").show();
                $("#password").hide();
                AddValidationAttributesForUsername();
                RemoveValidationAttributesForPasswords();
                if (authenticationType.toLowerCase() == "legacy") {
                    $("#pin").show();
                    AddValidationAttributesForPins();
                }
                else {
                    $("#pin").hide();
                    RemoveValidationAttributesForPins();
                }
            }
            if (credentialsTypeComboValue.toLowerCase() == "password") {
                $("#password").show();
                $("#username").hide();
                AddValidationAttributesForPasswords();
                RemoveValidationAttributesForUsername();
                if (authenticationType.toLowerCase() == "legacy") {
                    $("#pin").show();
                    AddValidationAttributesForPins();
                }
                else {
                    $("#pin").hide();
                    RemoveValidationAttributesForPins();
                }
            }
            if (credentialsTypeComboValue.toLowerCase() == "pin") {
                $("#pin").show();
                $("#username").hide();
                $("#password").hide();
                AddValidationAttributesForPins();
                RemoveValidationAttributesForPasswords();
                RemoveValidationAttributesForUsername();
            }

            if (credentialsTypeComboValue.toLowerCase() == "pin & password") {
                $("#username").hide();
                $("#password").show();
                $("#pin").show();
                AddValidationAttributesForPasswords();
                AddValidationAttributesForPins();
                RemoveValidationAttributesForUsername();
            }

            if (credentialsTypeComboValue.toLowerCase() == "memorable word") {
                $("#pin").show();
                $("#username").hide();
                $("#password").hide();
                AddValidationAttributesForPins();
                RemoveValidationAttributesForPasswords();
                RemoveValidationAttributesForUsername();
            }

            if (credentialsTypeComboValue.toLowerCase() == "memorable word & password") {
                $("#pin").show();
                $("#password").show();
                $("#username").hide();
                AddValidationAttributesForPasswords();
                AddValidationAttributesForPins();
                RemoveValidationAttributesForUsername();
            }

            if (credentialsTypeComboValue.toLowerCase() == "") {
                $("#username").hide();
                $("#password").hide();
                $("#pin").hide();
                AddValidationAttributesForPasswords();
                AddValidationAttributesForPins();
                AddValidationAttributesForUsername();
            }
            //****** CLEAR ALL THE FIELDS VALUES AND ERROR MESSAGES AND ICONS WHEN DROP DOWN CHANGES ****************
            // *** PIN ***
            //Loop through the fields error messages and remove them for PIN
            $("#pin").find('.help-block').each(function () {
                $(this).text("");
                var fieldName = $(this).attr('data-validation-error');
                if (fieldName !== undefined) {
                    //remove error messages
                    $(this).attr('data-validation-valid', fieldName);
                    $(this).removeAttr("data-validation-error");
                }
            });
            //clear the fields values
            $("#Pin").val("");
            $("#ConfirmPin").val("");
            //remove the error icon 
            $("#Pin").removeClass("validation-error-highlight"); //remove the red border around the textboxes
            $("#Pin").siblings('.validation-icon').attr('data-validation-valid', 'Pin');
            $("#Pin").siblings('.validation-icon').removeAttr("data-validation-error");
            $("#Pin").siblings('.validation-icon').attr('style', 'display: none;');
            //remove the error icon 
            $("#ConfirmPin").removeClass("validation-error-highlight"); //remove the red border around the textboxes
            $("#ConfirmPin").siblings('.validation-icon').attr('data-validation-valid', 'ConfirmPin');
            $("#ConfirmPin").siblings('.validation-icon').removeAttr("data-validation-error");
            $("#ConfirmPin").siblings('.validation-icon').attr('style', 'display: none;');

            // *** PASSWORD ***
            //Loop through the fields error messages and remove them for PIN
            $("#password").find('.help-block').each(function () {
                $(this).text("");
                var fieldName = $(this).attr('data-validation-error');
                if (fieldName !== undefined) {
                    //remove error messages
                    $(this).attr('data-validation-valid', fieldName);
                    $(this).removeAttr("data-validation-error");
                }
            });
            //clear the fields values
            $("#Password").val("");
            $("#ConfirmPassword").val("");
            //remove the error icon 
            $("#Password").removeClass("validation-error-highlight"); //remove the red border around the textboxes
            $("#Password").siblings('.validation-icon').attr('data-validation-valid', 'Password');
            $("#Password").siblings('.validation-icon').removeAttr("data-validation-error");
            $("#Password").siblings('.validation-icon').attr('style', 'display: none;');
            //remove the error icon 
            $("#ConfirmPassword").removeClass("validation-error-highlight"); //remove the red border around the textboxes
            $("#ConfirmPassword").siblings('.validation-icon').attr('data-validation-valid', 'ConfirmPassword');
            $("#ConfirmPassword").siblings('.validation-icon').removeAttr("data-validation-error");
            $("#ConfirmPassword").siblings('.validation-icon').attr('style', 'display: none;');

        });
    };

    function RemoveValidationAttributesForUsername() {
        $("#Username").attr("data-required-message", null);
        $("#Username").attr("data-validate-name", null);
        $("#Username").attr("data-validate", null);
        $('#Username').val('');
    }

    function AddValidationAttributesForUsername() {
        $("#Username").attr("data-required-message", "Please enter a username.");
        $("#Username").attr("data-validate-name", "Username");
        $("#Username").attr("data-validate", "required pattern maxlength");
    }

    function RemoveValidationAttributesForPasswords() {
        $("#Password").attr("data-required-message", null);
        $("#Password").attr("data-validate-name", null);
        $("#Password").attr("data-validate", null);
        $('#Password').val('');
        $("#ConfirmPassword").attr("data-required-message", null);
        $("#ConfirmPassword").attr("data-validate-name", null);
        $("#ConfirmPassword").attr("data-validate", null);
        $('#ConfirmPassword').val('');
    }

    function AddValidationAttributesForPasswords() {
        $("#Password").attr("data-required-message", "Please enter a password.");
        $("#Password").attr("data-validate-name", "Password");
        $("#Password").attr("data-validate", "minlength required pattern maxlength");
        $("#ConfirmPassword").attr("data-required-message", "Please confirm your password.");
        $("#ConfirmPassword").attr("data-validate-name", "ConfirmPassword");
        $("#ConfirmPassword").attr("data-validate", "compare minlength required maxlength");
    }

    function RemoveValidationAttributesForPins() {
        $("#Pin").attr("data-required-message", null);
        $("#Pin").attr("data-validate-name", null);
        $("#Pin").attr("data-validate", null);
        $('#Pin').val('');
        $("#ConfirmPin").attr("data-required-message", null);
        $("#ConfirmPin").attr("data-validate-name", null);
        $("#ConfirmPin").attr("data-validate", null);
        $('#ConfirmPin').val('');
    }

    function AddValidationAttributesForPins() {
        var whichPage = $('#SettingPIN').val();
        if (whichPage == "ForgottenCredentials") {
            $("#Pin").attr("data-required-message", "Please enter a 6-digit online PIN. Click the help icon for more details.");
            $("#ConfirmPin").attr("data-required-message", "Your 6-digit online PIN and online PIN confirmation must match.");
        }
        else {
            $("#Pin").attr("data-required-message", "Please enter an online PIN.");
            $("#ConfirmPin").attr("data-required-message", "Please re-enter your online PIN.");
        }
        $("#Pin").attr("data-validate-name", "Pin");
        $("#Pin").attr("data-validate", "required pattern maxlength validatepinnumber");
        $("#ConfirmPin").attr("data-validate-name", "ConfirmPin");
        $("#ConfirmPin").attr("data-validate", "compare required maxlength validatepinnumber");
    }



    //**********************************************************************************************

    var submitButtonclick = function () {
        $('#editaccountname').click(function () {

            $("#account-details-section").hide();
            $("#order-payin-slip").hide();
            $("#edit-account-name").show();
            $("#interest-paid-to").hide();
            return false;
        });
    };



    // Check username doesn't exist
    var UserNameCheck = function () {

        $('#CredentialsSubmit').click(function () {
            var valid = $("form").validate({ "highlight": false, "quiet": true });
            if (!valid) {
                return $("form").showAlert();
            }

            var credentialsType = $('#CredentialsType').val();
            var response = "";
            var rqToken = $('input[name="__RequestVerificationToken"]').val();
            var headers = {};
            headers['__RequestVerificationToken'] = rqToken;
            if (credentialsType == "Username") {
                var username = $('#Username').val();
                var postAccountData = JSON.stringify({ username: username });
                $.ajax({
                    url: applyConfig.baseUrl + 'servicing/security-details/usernamecheck',
                    headers: headers,
                    async: false,
                    data: postAccountData,
                    contentType: 'application/json; charset=utf-8',
                    success: function (data) {
                        response = data;

                    },
                    type: "POST"
                });
                if (response.Status != "1") {

                    $('#Username').siblings("span").addClass("help-block help-block-error");
                    $('#Username').siblings("span.validation-icon").removeAttr("data-validation-valid");
                    $('#Username').siblings("span.validation-icon").attr("data-validation-error", "Username");
                    $('#Username').siblings("span.validation-icon[data-validation-error]").show();

                    var error = $("form").find("[{0}=\"{2}\"], [{1}=\"{2}\"]".format('data-validation-error', 'data-validation-valid', 'Username'));
                    $(error).attr('data-validation-error', 'Username');
                    $(error).text('The username already exists. Please select another username.');
                    return false;
                }
            }
            return true;
        });

        $('#RegistrationSubmit').click(function () {

            var valid = $("form").validate({ "highlight": false, "quiet": true });
            if (!valid) {
                return $("form").showAlert();
            }

            if ($('#Username').attr('disabled') !== undefined) {
                return true;
            }

            var response = "";
            var rqToken = $('input[name="__RequestVerificationToken"]').val();
            var headers = {};
            headers['__RequestVerificationToken'] = rqToken;
            var username = $('#Username').val();
            var postAccountData = JSON.stringify({ username: username });
            $.ajax({
                type: "POST",
                url: applyConfig.baseUrl + 'servicing/register/usernamecheck',
                headers: headers,
                async: false,
                data: postAccountData,
                contentType: 'application/json; charset=utf-8',
                success: function (data) {
                    response = data;

                },
                error: function (xhr, textStatus, errorThrown) {
                    window.location.href = applyConfig.baseUrl + 'servicing/error';
                }
            });
            if (response.Status != "1") {

                $('#Username').siblings("span").addClass("help-block help-block-error");
                $('#Username').siblings("span.validation-icon").removeAttr("data-validation-valid");
                $('#Username').siblings("span.validation-icon").attr("data-validation-error", "Username");
                $('#Username').siblings("span.validation-icon[data-validation-error]").show();

                var error = $("form").find("[{0}=\"{2}\"], [{1}=\"{2}\"]".format('data-validation-error', 'data-validation-valid', 'Username'));
                $(error).attr('data-validation-error', 'Username');
                $(error).text('The username already exists. Please select another username.');
                return false;

            } else {
                return true;
            }
            return true;
        });
    };

    var SelfCertify = function () {
        $('#btnSelfCertify').click(SelfCertifyOpen);
    };

    var SelfCertifyClose = function () {
        $('#btnSelfCertifyClose').click(function () {
            $.magnificPopup.close();
            return false;
        });
    };

    // BANK LOOK UP CALL
    var BankCheckSubmit = function () {

        $('#btnSearchTransactions').click(function () {
            var valid = apply.validation.validateSectionBySelector('#SearchPanel', true, { "highlight": true, "quiet": false });
            if (!valid) {
                return false;
            }
            return true;
        });

        //NEW PAYEE SUBMIT
        $('#btnPayeeSubmit').click(function () {

            var valid = $("form").validate({ "highlight": false, "quiet": true });
            if (!valid) {
                validateCheck();
                validateCheckError();
                return $("form").showAlert();
            }

            var response = "";
            var rqToken = $('input[name="__RequestVerificationToken"]').val();
            var headers = {};
            headers['__RequestVerificationToken'] = rqToken;
            var accountnumber = $('#TargetAccountNumber').val();
            var sortcode = $('#SortCodeParts_0_').val() + $('#SortCodeParts_1_').val() + $('#SortCodeParts_2_').val();
            var postAccountData = JSON.stringify({ accountnumber: accountnumber, sortcode: sortcode });
            $.ajax({
                url: applyConfig.baseUrl + 'servicing/makepayment/validatebanklookupbwa',
                headers: headers,
                async: false,
                data: postAccountData,
                contentType: 'application/json; charset=utf-8',
                success: function (data) {
                    response = data;

                },
                type: "POST"
            });
            $("#errorBannerExternalAcct").css("display", "none"); //remove the External Account  banner if it is displaying 

            if (response.ResponseStatus == "5") {
                $("#errorBannerExternalAcct").css("display", "block");
                document.body.scrollTop = 0;
                return false;
            }
            if (response.ResponseStatus != "4") { //4 IS VALID ACCOUNT

                $('#TargetAccountNumber').siblings("span").addClass("help-block help-block-error");
                $('#TargetAccountNumber').siblings("span.validation-icon").removeAttr("data-validation-valid");
                $('#TargetAccountNumber').siblings("span.validation-icon").attr("data-validation-error", "TargetAccountNumber");
                $('#TargetAccountNumber').siblings("span.validation-icon[data-validation-error]").show();
                var accountError = $("form").find("[{0}=\"{2}\"], [{1}=\"{2}\"]".format("data-validation-error", "data-validation-valid", "TargetAccountNumber"));
                $(accountError).attr('data-validation-error', 'TargetAccountNumber');
                $(accountError).text('Please enter a valid account number.');

                $('#TargetAccountSortcode').siblings("span").addClass("help-block help-block-error");
                $('#TargetAccountSortcode').siblings("span.validation-icon").removeAttr("data-validation-valid");
                $('#TargetAccountSortcode').siblings("span.validation-icon").attr("data-validation-error", "TargetAccountSortcode");
                $('#TargetAccountSortcode').siblings("span.validation-icon[data-validation-error]").show();
                var sortcodeError = $("form").find("[{0}=\"{2}\"], [{1}=\"{2}\"]".format("data-validation-error", "data-validation-valid", "TargetAccountSortcode"));
                $(sortcodeError).attr('data-validation-error', 'TargetAccountSortcode');
                $(sortcodeError).text('Please enter a valid sort code.');

                return false;

            } else {
                return true;
            }
            //  }

            return false;
        });

        //SCHEDULED PAYMENTS EDIT
        $('#btnPaymentSubmit').click(function () {
            var valid = $("form").validate({ "highlight": false, "quiet": true });
            if (!valid) {
                validateCheck();
                validateCheckError();
                return $("form").showAlert();
            }

            var response = "";
            var rqToken = $('input[name="__RequestVerificationToken"]').val();
            var headers = {};
            headers['__RequestVerificationToken'] = rqToken;
            var accountnumber = $('#accountNumber').val();
            var sortcode = $('#sortCode').val();
            var postAccountData = JSON.stringify({ accountnumber: accountnumber, sortcode: sortcode });
            $.ajax({
                url: applyConfig.baseUrl + 'servicing/scheduledpayments/validatebanklookup',
                headers: headers,
                async: false,
                data: postAccountData,
                contentType: 'application/json; charset=utf-8',
                success: function (data) {
                    response = data;
                },
                type: "POST"
            });

            if (response.ResponseStatus != "4") { //4 IS VALID ACCOUNT
                $("#errorBanner").css("display", "block");
                return false;

            } else {
                return true;
            }
        });

        //MAKE PAYMENT INDEX
        $('#btnMakePaymentSubmit').click(function () {
            var valid = $("form").validate({ "highlight": false, "quiet": true });
            if (!valid) {
                validateCheck();
                validateCheckError();
                return $("form").showAlert();
            }

            var response = "";
            var rqToken = $('input[name="__RequestVerificationToken"]').val();
            var headers = {};
            headers['__RequestVerificationToken'] = rqToken;

            var accountnumber = $('#TargetAccountNumber').val();
            var sortcode = $('#TargetAccountSortcode').val();
            if (sortcode == null || sortcode == "") {
                sortcode = $('#SortCodeParts_0_').val() + $('#SortCodeParts_1_').val() + $('#SortCodeParts_2_').val();
            }

            var strUrl = 'servicing/makepayment/validatebanklookup';
            var targetDropdown = $('#Target');
            var selectedOption = targetDropdown.find(':selected');
            if (selectedOption.index() === 0) {
                strUrl = strUrl + "bwa";
            }

            var postAccountData = JSON.stringify({ accountnumber: accountnumber, sortcode: sortcode });
            $.ajax({
                url: applyConfig.baseUrl + strUrl,
                headers: headers,
                async: false,
                data: postAccountData,
                contentType: 'application/json; charset=utf-8',
                success: function (data) {
                    response = data;
                },
                type: "POST"
            });

            $("#errorBannerExternalAcct").css("display", "none"); //remove the External Account  banner if it is displaying 

            if (response.ResponseStatus == "5") {
                $("#errorBannerExternalAcct").css("display", "block");
                $("html, body").animate({ scrollTop: 0 }, "fast");
                document.body.scrollTop = 0;
                return false;
            }
            if (response.ResponseStatus != "4") { //4 IS VALID ACCOUNT
                var acctToPayDropdown = $("#Target :selected").text();
                if (acctToPayDropdown.toUpperCase() != "NEW PAYEE") {
                    $("#errorBanner").css("display", "block");
                } else {
                    //here I have to to put the validation message manually on the right hand side of Account number
                    // error message for ACCT. NUMBER
                    $('#TargetAccountNumber').siblings("span").addClass("help-block help-block-error");
                    $('#TargetAccountNumber').siblings("span.validation-icon").removeAttr("data-validation-valid");
                    $('#TargetAccountNumber').siblings("span.validation-icon").attr("data-validation-error", "TargetAccountNumber");
                    $('#TargetAccountNumber').siblings("span.validation-icon[data-validation-error]").show();

                    var error = $("form").find("[{0}=\"{2}\"], [{1}=\"{2}\"]".format('data-validation-error', 'data-validation-valid', 'TargetAccountNumber'));
                    $(error).attr('data-validation-error', 'TargetAccountNumber');
                    $(error).text('Please enter a valid account number.');
                    // error message for SORT CODE
                    $('#TargetAccountSortcode').siblings("span").addClass("help-block help-block-error");
                    $('#TargetAccountSortcode').siblings("span.validation-icon").removeAttr("data-validation-valid");
                    $('#TargetAccountSortcode').siblings("span.validation-icon").attr("data-validation-error", "TargetAccountSortcode");
                    $('#TargetAccountSortcode').siblings("span.validation-icon[data-validation-error]").show();

                    var error = $("form").find("[{0}=\"{2}\"], [{1}=\"{2}\"]".format('data-validation-error', 'data-validation-valid', 'TargetAccountSortcode'));
                    $(error).attr('data-validation-error', 'TargetAccountSortcode');
                    $(error).text('Please enter a valid sort code.');
                }
                return false;
            }
            else {
                return true;
            }
        });

        // Credit Card Payment
        $('#btnPayCreditCardSubmit').click(function () {
            var valid = apply.validation.validateSectionBySelector('.card-servicing-section', true, { "highlight": true, "quiet": false });

            var $rbMinimumPayment = $("#payment_minimum");
            var $rbStatementBalance = $("#payment_statement_balance");
            var $rbTotalBalance = $("#payment_total_balance");
            var $rbOtherAmount = $("#payment_specific");
            if ($rbMinimumPayment.is(':checked')) {
                $rbStatementBalance.closest(".input-container").find('span.validation-icon').css('display', 'none');
                $rbTotalBalance.closest(".input-container").find('span.validation-icon').css('display', 'none');
                $rbOtherAmount.closest(".input-container").find('span.validation-icon').css('display', 'none');
            }
            else if ($rbStatementBalance.is(':checked')) {
                $rbMinimumPayment.closest(".input-container").find('span.validation-icon').css('display', 'none');
                $rbTotalBalance.closest(".input-container").find('span.validation-icon').css('display', 'none');
                $rbOtherAmount.closest(".input-container").find('span.validation-icon').css('display', 'none');
            }
            else if ($rbTotalBalance.is(':checked')) {
                $rbMinimumPayment.closest(".input-container").find('span.validation-icon').css('display', 'none');
                $rbStatementBalance.closest(".input-container").find('span.validation-icon').css('display', 'none');
                $rbOtherAmount.closest(".input-container").find('span.validation-icon').css('display', 'none');
            }
            else if ($rbOtherAmount.is(':checked')) {
                $rbMinimumPayment.closest(".input-container").find('span.validation-icon').css('display', 'none');
                $rbStatementBalance.closest(".input-container").find('span.validation-icon').css('display', 'none');
                $rbTotalBalance.closest(".input-container").find('span.validation-icon').css('display', 'none');
            }
            else {
                $rbOtherAmount.closest(".input-container").find('span.validation-icon').css('display', 'none');
            }

            if (!valid) {
                validateCheck(32);
                return false;
            }

            return true;
        });

        // Change Limit entry
        $('#btnChangeLimitContinue').click(function () {
            var valid = apply.validation.validateSectionBySelector('.change-limit-section', true, { "highlight": true, "quiet": false });
            if (!valid) {
                validateCheck(32);
                return false;
            }

            return true;
        });

        // Change Limit confirm
        $('#btnChangeLimitConfirm').click(function () {
            var $thisConfirmButton = $(this);

            if ($thisConfirmButton.is(':disabled')) {
                return false;
            }

            var valid = apply.validation.validateSectionBySelector('.change-limit-section', true, { "highlight": true, "quiet": false });
            if (!valid) {
                validateCheck(32);
                return false;
            }

            $thisConfirmButton.prop('disabled', true);
            $thisConfirmButton.closest("form").submit();

            return true;
        });

        // Balance transfer
        $('#btnBalanceTransferSubmit').click(function () {
            var valid = apply.validation.validateSectionBySelector('.card-servicing-section', true, { "highlight": true, "quiet": false });
            if (!valid) {
                validateCheck(32);
                return false;
            }

            return true;
        });

        // Transfer Money
        $('#btnTransferMoneySubmit').click(function () {
            var valid = apply.validation.validateSectionBySelector('.card-servicing-section', true, { "highlight": true, "quiet": false });
            if (!valid) {
                validateCheck(32);
                return false;
            }

            var response = "";
            var rqToken = $('input[name="__RequestVerificationToken"]').val();
            console.log(rqToken);
            var headers = {};
            headers['__RequestVerificationToken'] = rqToken;
            // if ($("#TargetAccountNumber").is(":visible")) {
            var accountnumber = $('#AccountNumber').val();
            var sortcode = $('#SortCodeParts_0_').val() + $('#SortCodeParts_1_').val() + $('#SortCodeParts_2_').val();
            var postAccountData = JSON.stringify({ accountnumber: accountnumber, sortcode: sortcode });
            $.ajax({
                url: applyConfig.baseUrl + 'servicing/moneytransfer/validatebanklookup',
                headers: headers,
                async: false,
                data: postAccountData,
                contentType: 'application/json; charset=utf-8',
                success: function (data) {
                    response = data;
                },
                type: "POST"
            });
            if (response.ResponseStatus != "4") { //4 IS VALID ACCOUNT
                $('#AccountNumber').siblings("span").addClass("help-block help-block-error");
                $('#AccountNumber').siblings("span.validation-icon").removeAttr("data-validation-valid");
                $('#AccountNumber').siblings("span.validation-icon").attr("data-validation-error", "AccountNumber");
                $('#AccountNumber').siblings("span.validation-icon[data-validation-error]").show();
                var accountError = $("form").find("[{0}=\"{2}\"], [{1}=\"{2}\"]".format("data-validation-error", "data-validation-valid", "AccountNumber"));
                $(accountError).attr('data-validation-error', 'AccountNumber');
                $(accountError).text('Please enter a valid account number.');

                $('#SortCode').siblings("span").addClass("help-block help-block-error");
                $('#SortCode').siblings("span.validation-icon").removeAttr("data-validation-valid");
                $('#SortCode').siblings("span.validation-icon").attr("data-validation-error", "SortCode");
                $('#SortCode').siblings("span.validation-icon[data-validation-error]").show();
                var sortcodeError = $("form").find("[{0}=\"{2}\"], [{1}=\"{2}\"]".format("data-validation-error", "data-validation-valid", "SortCode"));
                $(sortcodeError).attr('data-validation-error', 'SortCode');
                $(sortcodeError).text('Please enter a valid sort code.');
                validateCheck(32);

                return false;

            } else {
                return true;
            }
        });

        // Add Additional Card Holder
        $('#btnAddAdditionalCardHolderConfirm').click(function () {

            var valid = apply.validation.validateSectionBySelector('.card-servicing-section', true, { "highlight": true, "quiet": false });

            var $copyAddressFromMainApplicantElement = $('#CopyAddressFromMainApplicant');

            var copyAddressFromMainApplicant = $copyAddressFromMainApplicantElement.prop('checked');

            if (!copyAddressFromMainApplicant) {
                valid &= apply.validation.validateAchCompleteAddress($('#currentAddress'), { "highlight": true, "quiet": false });
                valid &= apply.validation.validateFindAddressClicked($('#currentAddress'), 'CurrentAddress');
                valid &= apply.validation.validateField($('#AdditionalCardholderCheck'), { "highlight": true, "quiet": false });

                if ($('#previousAddress').hasClass('opened')) { //if previous address section is active, then validate
                    valid &= apply.validation.validateAchCompleteAddress($('#previousAddress'), { "highlight": true, "quiet": false });
                    valid &= apply.validation.validateFindAddressClicked($('#previousAddress'), 'PreviousAddress');
                }
            }

            if (!valid) {
                validateCheck(32);
                return false;
            }

            return true;
        });
    };

    var wireDirectDebitSetupPage = function () {
        $(function () {
            var $repaymentFixed = $("#repaymentFixed")[0];
            if ($repaymentFixed !== undefined && $repaymentFixed.checked === false) {
                $(".other-amount-section").find("input[type='text']").attr("disabled", true);
                $(".other-amount-section").find("label").removeClass("required");
            }
        });

        $(".dd-payment-options").change(function () {
            var $repaymentFixed = $("#repaymentFixed")[0];
            if ($repaymentFixed.checked === true) {
                //$(".other-amount-section").find("label").addClass("required");
                $(".other-amount-section").find("input[type='text']").removeAttr("disabled");
                $("#repaymentMinimum").closest(".input-container").find('span.help-block').css('display', 'none');
                $("#repaymentFull").closest(".input-container").find('span.help-block').css('display', 'none');
            }
            else {
                $(".other-amount-section").find("label").removeClass("required");
                $(".other-amount-section").find("input[type='text']").val("")
                    .removeClass("validation-error-highlight")
                    .attr("disabled", true);
                $("#repaymentFixed").closest(".input-container").find('span.help-block, span.validation-icon').css('display', 'none');

                var $repaymentFull = $("#repaymentFull")[0];
                if ($repaymentFull.checked === true) {
                    $("#repaymentMinimum").closest(".input-container").find('span.help-block').css('display', 'none');
                    $("#repaymentFull").closest(".input-container").find('span.help-block').css('display', 'block');
                }
                else {
                    $("#repaymentFull").closest(".input-container").find('span.help-block').css('display', 'none');
                    $("#repaymentMinimum").closest(".input-container").find('span.help-block').css('display', 'block');
                }
            }
        });

        $("#btnDirectDebitSubmitContinue").click(function () {
            var valid = apply.validation.validateSectionBySelector('.card-servicing-section', true, { "highlight": true, "quiet": false });
            var $repaymentFixed = $("#repaymentFixed");
            if ($repaymentFixed.length > 0 && $repaymentFixed[0].checked === false) {
                $("#repaymentFixed").closest(".input-container").find('span.help-block, span.validation-icon').css('display', 'none');

                var $repaymentFull = $("#repaymentFull")[0];
                if ($repaymentFull.checked === true) {
                    $("#repaymentMinimum").closest(".input-container").find('span.help-block').css('display', 'none');
                    $("#repaymentFull").closest(".input-container").find('span.help-block').css('display', 'block');
                }
                else {
                    $("#repaymentFull").closest(".input-container").find('span.help-block').css('display', 'none');
                    $("#repaymentMinimum").closest(".input-container").find('span.help-block').css('display', 'block');
                }
            }

            if (!valid) {
                validateCheck(32);
                return false;
            }

            var response = "";
            var rqToken = $('input[name="__RequestVerificationToken"]').val();
            var headers = {};
            headers['__RequestVerificationToken'] = rqToken;
            // if ($("#TargetAccountNumber").is(":visible")) {
            var accountnumber = $('#AccountNumber').val();
            var sortcode = $('#SortCodeParts_0_').val() + $('#SortCodeParts_1_').val() + $('#SortCodeParts_2_').val();
            var postAccountData = JSON.stringify({ accountnumber: accountnumber, sortcode: sortcode });
            $.ajax({
                url: applyConfig.baseUrl + 'servicing/direct-debit/validatebanklookup',
                headers: headers,
                async: false,
                data: postAccountData,
                contentType: 'application/json; charset=utf-8',
                success: function (data) {
                    response = data;

                },
                error: function (xhr, textStatus, errorThrown) {
                    response = "";
                },
                type: "POST"
            });

            if (response.ResponseStatus != "4") { //4 IS VALID ACCOUNT
                $('#AccountNumber').siblings("span").addClass("help-block help-block-error");
                $('#AccountNumber').siblings("span.validation-icon").removeAttr("data-validation-valid");
                $('#AccountNumber').siblings("span.validation-icon").attr("data-validation-error", "AccountNumber");
                $('#AccountNumber').siblings("span.validation-icon[data-validation-error]").show();
                var accountError = $("form").find("[{0}=\"{2}\"], [{1}=\"{2}\"]".format("data-validation-error", "data-validation-valid", "AccountNumber"));
                $(accountError).attr('data-validation-error', 'AccountNumber');
                $(accountError).text('Please enter a valid account number.');

                $('#SortCode').siblings("span").addClass("help-block help-block-error");
                $('#SortCode').siblings("span.validation-icon").removeAttr("data-validation-valid");
                $('#SortCode').siblings("span.validation-icon").attr("data-validation-error", "SortCode");
                $('#SortCode').siblings("span.validation-icon[data-validation-error]").show();
                var sortcodeError = $("form").find("[{0}=\"{2}\"], [{1}=\"{2}\"]".format("data-validation-error", "data-validation-valid", "SortCode"));
                $(sortcodeError).attr('data-validation-error', 'SortCode');
                $(sortcodeError).text('Please enter a valid sort code.');

                return false;
            }

            return true;
        });
    };

    var orderpayinslipclick = function () {
        $('#orderpayinslip').click(function () {

            $("#account-details-section").hide();
            $("#edit-account-name").hide();
            $("#order-payin-slip").show();
            $("#interest-paid-to").hide();
            return false;
        });
    };

    var editaccountinterestpaidtoclick = function () {
        $('#interestpaidto').click(function () {

            $("#account-details-section").hide();
            $("#edit-account-name").hide();
            $("#order-payin-slip").hide();
            $("#interest-paid-to").show();
            return false;
        });
    };

    var accounttopaytoclick = function () {
        $('.account-to-pay-to select').change(function () {

            var aboutusIndex = this.selectedIndex - 1; //get selected index


            return false;

        });
    };

    var paynowclick = function () {
        $('#paynowclick').click(function () {
            $("#edit").hide();
            $("#review").hide();
            $("#info").show();
            return true;
        });
    };

    /**
         * Inline validation handlers
         */

    var wireInlineValidation = function () {
        // Hide green tick which is displayed by default
        $('.validation-icon[data-validation-valid]').hide();
        var delay = false; //delay will store yes if currently within the timeout status. This is to prevent throttling.
        $('input[data-validate], select[data-validate], .validate-group input, .validate-group select').on('change blur', function () { //on change or blur of a input / select with data-validate or within a validate-group
            var $this = $(this); //get local handle on current element
            if ($(this).data('compare')) { //if has a compare attribute
                $this.data('changed', true); //data-changed used to track if the user has modified the input

                var completed = true; //completed used to track if all elements in the group have been modified
                var $associated = $('#' + $(this).data('compare')); //get associated elements
                if (!$(this).data('changed')) { //if the current element has changed...
                    completed = false;
                } else {
                    $associated.each(function () { //iterate through the associated elements and see if elements have changed
                        if (!$(this).data('changed')) {
                            completed = false;
                        }
                    });
                }
                if (completed) { //if all modified, validate current input
                    apply.validation.validateField($(this), { "highlight": true, "quiet": false });
                }

                else { //else validate and validate associated inputs.
                    apply.validation.validateField($(this), { "highlight": true, "quiet": false });
                    $associated.each(function () {
                        apply.validation.validateField($(this), { "highlight": true, "quiet": false });
                    });
                }
            } else if ($(this).closest('.validate-group').length) { //if input is part of validate group
                $(this).data('changed', true); //set changed attribute
                var changed = true;
                var $children = $(this).closest('.validate-group').find('input, select'); //get all children of validate group
                $children.each(function () {
                    if (!$(this).data('changed') && $(this).val() == "") { //track each child to see if it has been modified

                        changed = false;
                    }
                });
                if (changed) { //if all modified, then validate group
                    var $group = $(this).closest('.validate-group');
                    if ($group.hasClass('select-full-date') || $group.hasClass('sort-code') || $group.hasClass('amount') || $group.hasClass('input-group') || $group.hasClass('input-group-x')) { //if a sort code or full date then validateInput can be called on the group
                        apply.validation.validateField($group, { "highlight": true, "quiet": false });


                        var $whichAddress = $(this).closest('.input-container');
                        if ($whichAddress.length >= 1 && $whichAddress.find(".help-block")[0].innerText != '') {
                            $whichAddress.find(".validation-icon").show();
                        }
                    }
                    else if ($group.hasClass('transaction-from-group')) {
                        apply.validation.validatePaymentDateField($group, { "highlight": true, "quiet": false });
                    }
                    else { //otherwise call validate on the group.
                        apply.validation.validateGroup($group, { "highlight": true, "quiet": false });
                    }
                }
            } else if ($(this).closest('.validate-group-any').length) { //if input is part of validate group, and any modified
                $(this).data('changed', true); //set changed attribute
                var changed = true;
                var $group = $(this).closest('.validate-group-any');
                var $children = $group.find('input'); //get all children of validate group
                $children.each(function () {
                    if (!$(this).data('changed') && $(this).val() == "") { //track each child to see if it has been modified
                        changed = false;
                    }
                });
                var isCurrentFieldValid = apply.validation.validateField($(this), { "highlight": true, "quiet": false });
                // if current field is valid or all fields have changed then validate group
                if (isCurrentFieldValid || changed) {
                    apply.validation.validateGroup($group, { "highlight": true, "quiet": false });
                }
            } else { //if a normal input, not caght by one of the above, then validateInput
                apply.validation.validateField($(this), { "highlight": true, "quiet": false });
            }
        }).on('change keyup', function () { //on a change or key up event, run silent validation, only removing current errors
            //prevent throttling on keyup event by setting a slight delay
            if (!delay) {  //if no delay status then set new timeout
                delay = true;
                setTimeout(function () { //on timeout then validate active section silently
                    var valid = $("form").validate({ "highlight": false, "quiet": true });
                    var $section = $('.form-section-content.opened');
                    var edited = !$section.closest('.form-section').find('.form-section-edit').hasClass('hide'); //get handle on section's edit button

                    if (valid) { //if valid then add appropriate classes and change icon to a tick if relevant
                        if ($('button[type="submit"]').length) {
                            $('button[type="submit"]').addClass('btn-success');
                        }
                        else {
                            $('input[type="submit"]').addClass('btn-success');
                        }
                        if ($('.btn-change') != undefined) {
                            $('.btn-change').addClass('btn-success');
                        }

                        $(document.activeElement).next(".validation-icon[data-validation-valid]").show();
                        if (edited) {
                            $(document.activeElement).next(".validation-icon[data-validation-valid]").hide();
                        }
                    } else { //if not valid then remove appropriate classes and change icon to a cross if relevant
                        if ($('button[type="submit"]').length) {
                            $('button[type="submit"]').removeClass('btn-success');
                        }
                        else {
                            $('input[type="submit"]').removeClass('btn-success');
                        }
                        if ($('.btn-change') != undefined) {
                            $('.btn-change').removeClass('btn-success');
                        }
                        $(document.activeElement).next(".validation-icon[data-validation-error]").show();
                        if (edited) {
                            $(document.activeElement).next(".validation-icon[data-validation-error]").hide();
                        }
                    };
                    delay = false;
                }, 200);
            }
        });
    };

    $("input[name='AddAdditionalCardHolder'], input[name='RequestBalanceTransfer'], input[name='RequestMoneyTransfer']").change(function () {
        $this = $(this);
        var targetId = "#" + $this.attr('name') + "Details";
        var value = $this.val().toLowerCase();

        if (value === "true") {
            $(targetId).slideDown();

            if ($('#AchCurrentAddress.address-section').is(":hidden")) {
                $('#AchCurrentAddress.address-section').show();
            }

            // bt
            if ($this.attr('name') == "RequestBalanceTransfer" && !$('div.form-section-content.form-row.select-row').is(':visible')) {
                $(targetId).find('.form-row.select-row').show();
            }

            //mt
            if ($this.attr('name') == "RequestMoneyTransfer" && !$(targetId).find('.divider').is(':visible')) {
                $(targetId).find('.divider').show().addClass('opened'); // show div
            }

            if ($("#btnCreditCardSubmit").hasClass('btn-success')) {
                $("#btnCreditCardSubmit").removeClass('btn-success');
            }
        }
        else {
            $(targetId).slideUp();

            var targetTextInputs = targetId + " input[type='text'], " + targetId + " input[type='tel']";
            $(targetTextInputs).val('').data('changed', false);
            $(targetTextInputs).removeClass("validation-error-highlight");

            $(targetTextInputs).closest('.form-row').find('span.help-block').attr('style', 'display: none;');

            var targetInputGroupSelector = targetId + " .validate-group";
            $(targetInputGroupSelector).closest('.form-row').find('span.help-block').attr('style', 'display: none;');

            var targetSelectInputs = targetId + " select:visible";
            $(targetSelectInputs).val('').data('changed', false).change();
            $(targetSelectInputs).removeClass("validation-error-highlight");
            $(targetSelectInputs).closest('.form-row').find('span.help-block').attr('style', 'display: none;');



            /**
             * handle of balance transfer section while section closing
             */
            if ($this.attr('name') == "RequestBalanceTransfer" && $('div.form-section-content.form-row.select-row').is(':visible')) {
                $(targetId).val('').data('changed', false).change();
                $(targetId).removeClass('validation-error-highlight');
                $(targetId).closest('.form-row').find('span.help-block').attr('style', 'display: none;');
                $(targetId).find('.form-row.select-row').hide().removeClass('opened');
            }


            /**
             * handle of money transfer section while section closing
            */
            if ($this.attr('name') == "RequestMoneyTransfer" && !$(targetId).find('.divider').is(':visible')) {

                $('#mtAcctNumberId').val('').data('changed', false).change();
                $('#mtAcctNumberId').removeClass('validation-error-highlight');
                $('#mtAcctNumberId').closest('.form-row').find('span.help-block').attr('style', 'display: none;');

                $('#MtSortCodeParts_0_').val('').data('changed', false).change();
                $('#MtSortCodeParts_0_').removeClass('validation-error-highlight');
                $('#MtSortCodeParts_0_').closest('.form-row').find('span.help-block').attr('style', 'display: none;');

                $('#MtSortCodeParts_1_').val('').data('changed', false).change();
                $('#MtSortCodeParts_1_').removeClass('validation-error-highlight');
                $('#MtSortCodeParts_1_').closest('.form-row').find('span.help-block').attr('style', 'display: none;');

                $('#MtSortcodeParts_2_').val('').data('changed', false).change();
                $('#MtSortCodeParts_2_').removeClass('validation-error-highlight');
                $('#MtSortCodeParts_2_').closest('.form-row').find('span.help-block').attr('style', 'display: none;');

                $('#MtAmountToTransfer').val('').data('changed', false).change();
                $('#MtAmountToTransfer').removeClass('validation-error-highlight');
                $('#MtAmountToTransfer').closest('.form-row').find('span.help-block').attr('style', 'display: none;');

                $(targetId).find('.divider').hide().removeClass('opened');   // hide div

            }


            if ($this.attr('name') === "AddAdditionalCardHolder") {
                if ($("#AchCopyAddressFromMainApplicant").prop("checked")) {
                    $("#AchCopyAddressFromMainApplicant").prop("checked", false).change();
                }

                else if ($("#CopyAddressFromMainApplicant").prop("checked")) {
                    $("#CopyAddressFromMainApplicant").prop("checked", false).change();
                }

                $("#AchCurrentAddress_AddressPostcode").removeAttr('readonly');//removed the read only for when the radio ACH button slider 

                $(targetId).find('.address-details, .address-lookup-select, .address-living, .bfpo-details, .bfpo-code, .bfpo-address-find, .address-back').hide().removeClass('opened');
                $(targetId).find('.address-postcode, .address-find').show().addClass('opened');
                $(targetId).find('.find-address-button').show();

                //Here I show the "Find address" button that was hidden when an address was found and the list of address were shown
                $(targetId).find('.address-supply-lookup.btn.btn-primary').show().removeAttr('disabled');

                /* handle current address postcode filed*/
                $(targetId).find('.address-section').hide().removeClass('opened');

                $(targetId).find('#AchPreviousAddress.address-section').hide().removeClass('opened');
            }
        }
    });


    /**
     * Validates a group of fields
     @param {$} $container The fields to validate
     @param {object} options The validation options
    */
    var validateGroup = function ($container, options) {
        var valid = true;
        if ($container !== undefined) {
            $container.find('[data-validate]').each(function () {
                if (!validateField($(this), options)) {
                    valid = false;
                }
            });
        }
        return valid;
    };


    /**
         * Validates the field\
         @param {$} $field The field to validate
         @param {object} options The validation options
        */
    var validateField = function ($field, options) {
        if (options === "undefined" || options === undefined || options === null) {
            options = {};
        }
        if ($field !== undefined) {
            var valid = ($field.validateInput(options) == ''); //check if input is valid
            if (!options.quiet && !options.removeOnly) { //if non quiet validation
                $field.nextAll('.help-block').first().show();
                if (valid) {
                    //handle valid scenario
                } else {
                    //handle invalid scenario
                }
            }
            return valid;
        } else {
            return true;
        }
    };


    var wireAccountCheck = function () {

        ////////////////////////////////////////////////////////////////////////////
        // Removed for demo
        return;
        ////////////////////////////////////////////////////////////////////////////

        var $accountDetails = $('.account-details'); //the account details container
        var $accountNo = $accountDetails.find('.account-number'); //the account number input
        var $sortCode1 = $accountDetails.find('.sort-code1'); //the sort code input part 1
        var $sortCode2 = $accountDetails.find('.sort-code2'); //the sort code input part 2
        var $sortCode3 = $accountDetails.find('.sort-code3'); //the sort code input part 3
        var loading = false;
        $accountDetails.on('change', 'input', function () { //on changing an input within the account details container
            var accountNo = $accountNo.val(); //get account number
            var sortCode1 = $sortCode1.val(); //get sort code 1
            var sortCode2 = $sortCode2.val(); //get sort code 2
            var sortCode3 = $sortCode3.val(); //get sort code 3
            var sortCode = sortCode1 + '-' + sortCode2 + '-' + sortCode3; //set combined sort code

            if ($accountNo.data('changed') && $sortCode1.data('changed') && $sortCode2.data('changed') && $sortCode3.data('changed') &&
                !$accountNo.hasClass('validation-error-highlight') && !$sortCode1.hasClass('validation-error-highlight') &&
                !$sortCode2.hasClass('validation-error-highlight') && !$sortCode3.hasClass('validation-error-highlight') &&
                !loading) { //if valid account number and sortcode, and not in a loading state...
                loading = true;
                $accountNo.prop('disabled', true);
                $sortCode1.prop('disabled', true);
                $sortCode2.prop('disabled', true);
                $sortCode3.prop('disabled', true);
                $('<i class="icon-spinner icon-spin"></i>').insertAfter($sortCode3); //add loading icon after sort code 3
                $.ajax(applyConfig.baseUrl + 'servicing/service/verifyaccountsortcode?accountnumber=' + accountNo + '&sortcode=' + sortCode, //ajax request to validate url
                    {
                        success: function (result) { //on success ajax query...
                            apply.uifunctions.resetTimeout();
                            if (result.ResponseStatus === "Valid") { //if account is valid, then set class and remove any errors
                                $accountDetails.addClass('valid');
                                apply.uifunctions.removeAlert($accountDetails.find('.account-details-error'));
                                apply.uifunctions.removeAlert($accountDetails.find('.account-details-server-error'));
                                $accountNo.removeClass('validation-error-highlight');
                                $sortCode1.removeClass('validation-error-highlight');
                                $sortCode2.removeClass('validation-error-highlight');
                                $sortCode3.removeClass('validation-error-highlight');
                            } else {
                                apply.uifunctions.removeAlert($accountDetails.find('.account-details-server-error'));
                                if (result.ResponseStatus === "InvalidAccount") { //if account is valid, then set class and remove any errors
                                    apply.uifunctions.showAlert($accountDetails.find('.account-details-error'), 'Please enter valid account details', false);
                                } else if (result.ResponseStatus === "InvalidSortcode") { //if sort code is valid, then set class and remove any errors
                                    apply.uifunctions.showAlert($accountDetails.find('.account-details-error'), 'Please enter valid sort code details', false);
                                } else if (result.ResponseStatus === "NotFound") { //if account is not found, then set class and remove any errors
                                    apply.uifunctions.showAlert($accountDetails.find('.account-details-error'), 'Your account details could not be found', false);
                                } else { //if an unknown error has occurred, then remove class and show error
                                    apply.uifunctions.showAlert($accountDetails.find('.account-details-error'), 'An unknown error has occurred. Please try again', false);
                                }
                                $accountDetails.removeClass('valid');
                                $accountNo.addClass('validation-error-highlight');
                                $sortCode1.addClass('validation-error-highlight');
                                $sortCode2.addClass('validation-error-highlight');
                                $sortCode3.addClass('validation-error-highlight');
                            }
                            $sortCode3.next('i').remove(); //remove loading icon
                            loading = false;
                            $accountNo.prop('disabled', false);
                            $sortCode1.prop('disabled', false);
                            $sortCode2.prop('disabled', false);
                            $sortCode3.prop('disabled', false);
                        },

                        // ReSharper disable UnusedParameter
                        error: function (e) { //on ajax fail, then show alert and remove valid class and loading icon.
                            apply.uifunctions.resetTimeout();
                            apply.uifunctions.removeAlert($accountDetails.find('.account-details-error'));
                            apply.uifunctions.showAlert($accountDetails.find('.account-details-server-error'), 'There was a problem with the server. If this error persists, then please continue anyway.', false);
                            $accountDetails.removeClass('valid');
                            $sortCode3.next('i').remove();

                            loading = false;
                            $accountNo.prop('disabled', false);
                            $sortCode1.prop('disabled', false);
                            $sortCode2.prop('disabled', false);
                            $sortCode3.prop('disabled', false);
                        }
                        // ReSharper restore UnusedParameter
                    }
                );
            }
        });
    };


    function SubmitForm(headers, postData, $thisSubmitButton, $finishSection) {

        var responseData;

        var $form = $('form');
        $form.submit();


        return responseData;
    }

    var attemptCount = 0;
    var submitButtonClicked = false;

    var userHasSubmittedApplication = function () {

        return submitButtonClicked;
    };

    var editDetailsSaveButtonclick = function () {
        $('#SaveEditDetailsId').click(function () {
            var $whichAddress = $('#currentAddress');
            var isBFPO = IsBFPO($whichAddress);
            var postCodeErrorId = "Postcode";
            var valid = true;
            var isPostcodeValid = true;
            var isManualEntry = false;
            var elementCode = $whichAddress.find('input[name$=Postcode]');
            var selectAddressOpen = false;

            var $field = $('.address-lookup-select').find('[name="ChooseAddress"]');
            var $bfpofield = $('.bfpo-address-lookup-select').find('[name="ChooseAddress"]');

            if (!isBFPO) {
                var isSelectAddressOpen = $whichAddress.find('.address-lookup-select').hasClass('opened');
                $bfpofield.removeAttr('data-validate');

                if (isSelectAddressOpen) {
                    $field.attr('data-validate', 'required');
                    apply.validation.validateField($field, { "highlight": true, "quiet": false });
                    valid = false;
                } else {
                    $field.removeAttr('data-validate');
                }

                isManualEntry = $whichAddress.find('.address-details').hasClass('opened');

                if (!apply.validation.validateField($('#FlatNumber'), { "highlight": true, "quiet": false })) {
                    valid = false;
                }
                if (!apply.validation.validateField($('#BuildingNumber'), { "highlight": true, "quiet": false })) {
                    valid = false;
                }
                if (!apply.validation.validateField($('#BuildingName'), { "highlight": true, "quiet": false })) {
                    valid = false;
                }
                if (!apply.validation.validateField($('#StreetName'), { "highlight": true, "quiet": false })) {
                    valid = false;
                }
                if (!apply.validation.validateField($('#District'), { "highlight": true, "quiet": false })) {
                    valid = false;
                }
                if (!apply.validation.validateField($('#TownOrCity'), { "highlight": true, "quiet": false })) {
                    valid = false;
                }
                if (!apply.validation.validateField($('#County'), { "highlight": true, "quiet": false })) {
                    valid = false;
                }
                if (!apply.validation.validateField($('#Postcode'), { "highlight": true, "quiet": false })) {
                    valid = false;
                    isPostcodeValid = false;
                }

            } else {
                var isBfpoSelectAddressOpen = $whichAddress.find('.bfpo-address-lookup-select').hasClass('opened');
                $field.removeAttr('data-validate');

                if (isBfpoSelectAddressOpen) {
                    $bfpofield.attr('data-validate', 'required');
                    apply.validation.validateField($bfpofield, { "highlight": true, "quiet": false });
                    valid = false;
                } else {
                    $bfpofield.removeAttr('data-validate');
                }

                postCodeErrorId = "AddressBfpoCode";
                elementCode = $whichAddress.find('input[name$=AddressBfpoCode]');
                isManualEntry = $whichAddress.find('.bfpodetails').hasClass('opened');
                if (!apply.validation.validateField($('#AddressBfpoLocation1'), { "highlight": true, "quiet": false })) {
                    $('#AddressBfpoLocation1').siblings('span.help-block').attr('style', 'display: block;');
                    valid = false;
                }
                if (!apply.validation.validateField($('#AddressBfpoLocation2'), { "highlight": true, "quiet": false })) {
                    $('#AddressBfpoLocation2').siblings('span.help-block').attr('style', 'display: block;');
                    valid = false;
                }
                if (!apply.validation.validateField($('#AddressBfpoCode'), { "highlight": true, "quiet": false })) {
                    valid = false;
                    isPostcodeValid = false;
                }
                if (!isManualEntry) {
                    valid = false;
                }
            }

            var error = $whichAddress.find("[{0}=\"{2}\"], [{1}=\"{2}\"]".format("data-validation-error", "data-validation-valid", postCodeErrorId));

            if (valid) {
                return true;
            } else {
                if (!isManualEntry && isPostcodeValid) {
                    //alert(1);
                    $(error).attr('data-validation-error', elementCode.attr('name'));
                    $(error).removeAttr('data-validation-valid');
                    $(error).text('Please click ' + "'" + "find address" + "'" + '.');
                    $(error).attr('style', 'display: block;');

                } else if (isManualEntry && isPostcodeValid) {
                    //alert(2);
                    //$(error).attr('data-validation-error', elementCode.attr('name'));
                } else {
                    //alert(3);
                    $(error).attr('data-validation-error', elementCode.attr('name'));
                    $(error).removeAttr('data-validation-valid');
                    elementCode.addClass('validation-error-highlight');
                }
                //}
                return false;
            }
        });

    };

    var submitButtonclick = function () {
        $('#btnSubmit').click(function () {
            //replace after submit text next to Submit button
            $('#submitText').text($('#afterSubmitText').val());
            $('#submitText').addClass('save-text');
            $('#submitText').addClass('submit-inprogress');
            $(".js-loan-aboutyou-section :input").prop("disabled", false);

            var questions = [], answers = [], response = "", jaCustomerCheckResponse = "", jaEligibilityResponse = "", $finishSection; // KL
            var validSec = apply.validation.validateSection({ "highlight": true });

            if ($('.savings-details').length == 1) {
                var $whichAddress = $(this).parents('div').find('#currentAddress.address-section');
                var validPostBfpoCode = validatePostcodeOrBFPOCodeForFindAddress($whichAddress, true);
                validSec = validSec && validPostBfpoCode;
            }

            if (!validSec) {
                apply.uifunctions.showAlert();
                $('#submitText').text('');
                $('#submitText').removeClass('save-text');
                $('#submitText').removeClass('submit-inprogress');

                var isLoanProduct = $('#IsLoanProduct').attr("value");
                var outcome = $("#SoftsearchOutcome").val();

                if (isLoanProduct && outcome === "Passed") {
                    $(".js-loan-aboutyou-section :input").prop("disabled", true);
                }

                $(".help-block:visible").each(function (index, value) {
                    if (value.innerText != '') {
                        var $helpBlock = $(".help-block:visible").eq(index);
                        var tid = $helpBlock.attr('id');
                        if (tid == undefined) {
                            tid = $.now().toString();
                            $helpBlock.attr("id", tid);
                        }
                        $('html,body').animate({ scrollTop: $("#" + tid).offset().top + "px" }, 100);
                        return false;
                    }
                });
                validateCheck();
                validateCheckError();
                return false;
            }
            var $thisSubmitButton = $(this);
            $thisSubmitButton.data('original-text', $thisSubmitButton.text()); //set original text for button in data attribute
            $thisSubmitButton.html('<i class="icon-spinner icon-spin"></i>'); //replace text for button with loading icon (using font awesome web font)             
            $thisSubmitButton.prop('disabled', true);

            var rqToken = $('input[name="__RequestVerificationToken"]').val();
            var headers = {};
            headers['__RequestVerificationToken'] = rqToken;
            $finishSection = $(this).closest('#jointholder');
            apply.uifunctions.removeAlert($finishSection.find('.form-error'));

            var customErrorMessages = [];
            if (typeof errorMessages !== 'undefined' && !isEmpty(errorMessages)) {
                customErrorMessages = errorMessages;
            }

            //ensure all joint applicant details are validated
            ProductEligibility.Init($("input[name='ProductTypeCode']").val(), $('select#JAExistingCustomerOptionSelected option:selected').text(), $finishSection, customErrorMessages, applyConfig.baseUrl);


            if (ProductEligibility.IsProductEligibilityRequired()) {

                if (apply.validation.validateField($('select#JAExistingCustomerOptionSelected'), { "highlight": true, "quiet": false })) {

                    if (ProductEligibility.IsExistingCustomerWithDetailsSelected()) {

                        if (ProductEligibility.ValidateProductEligibilityPreRequisites($finishSection)) {

                            var existingCustomerCheckResponse = ProductEligibility.CheckForExistingCustomer($finishSection);

                            if (existingCustomerCheckResponse.ExistingCustomer && !existingCustomerCheckResponse.SuspectedCustomer && existingCustomerCheckResponse.PartyId.length > 0) {
                                // Perform a product eligibility check
                                if (!ProductEligibility.CheckProductEligibilityForCustomer(existingCustomerCheckResponse.PartyId)) {

                                    ProductEligibility.ShowErrorMessage();

                                    $thisSubmitButton.html($thisSubmitButton.data('original-text'));
                                    $thisSubmitButton.prop('disabled', false);
                                    $('#submitText').text('');
                                    $('#submitText').removeClass('save-text');
                                    $('#submitText').removeClass('submit-inprogress');
                                    $(".js-loan-aboutyou-section :input").prop("disabled", true);

                                    $('html,body').animate({ scrollTop: "0px" }, 100);

                                    return false;

                                } else {

                                    ProductEligibility.HideErrorMessage();
                                }
                            }
                        }
                    }
                }
            }

            if ($("#AccountNumber").is(":visible")) {
                var accountnumber = $('#AccountNumber').val();
                var sortcode = $('#SortCodeParts_0_').val() + $('#SortCodeParts_1_').val() + $('#SortCodeParts_2_').val();
                var postAccountData = JSON.stringify({ accountnumber: accountnumber, sortcode: sortcode });
                var url = 'servicing/savingsapplication/validatebanklookup';
                if ($('.loan-details').length == 1) {
                    url = 'servicing/loansapplication/validatebanklookup';
                }

                $.ajax({
                    url: applyConfig.baseUrl + url,
                    headers: headers,
                    async: false,
                    data: postAccountData,
                    contentType: 'application/json; charset=utf-8',
                    success: function (data) {
                        response = data;

                    },
                    type: "POST"
                });

                if (response != "" && response.ResponseStatus != 4 && response.ResponseStatus != 5) {

                    var accountError = $("form").find("[{0}=\"{2}\"], [{1}=\"{2}\"]".format("data-validation-error", "data-validation-valid", "AccountNumber"));
                    $(accountError).removeAttr('data-validation-valid');
                    $(accountError).attr('data-validation-error', 'AccountNumber');
                    $(accountError).text('Please enter a valid account number.');

                    var sortcodeError = $("form").find("[{0}=\"{2}\"], [{1}=\"{2}\"]".format("data-validation-error", "data-validation-valid", "SortCode"));
                    $(sortcodeError).removeAttr('data-validation-valid');
                    $(sortcodeError).attr('data-validation-error', 'SortCode');
                    $(sortcodeError).text('Please enter a valid sort code.');

                    $('#AccountNumber').addClass('validation-error-highlight');
                    $('#SortCodeParts_0_').addClass('validation-error-highlight');
                    $('#SortCodeParts_1_').addClass('validation-error-highlight');
                    $('#SortCodeParts_2_').addClass('validation-error-highlight');

                    $thisSubmitButton.html($thisSubmitButton.data('original-text'));
                    $thisSubmitButton.prop('disabled', false);
                    $('#submitText').text('');
                    $('#submitText').removeClass('save-text');
                    $('#submitText').removeClass('submit-inprogress');
                    $(".js-loan-aboutyou-section :input").prop("disabled", true);
                    validateCheck();
                    validateCheckError();
                    addAlertMessage(firstErrorMessage);

                    return false;
                }
            }
            apply.validation.validateField($('#PersonalDetailsAreCorrect'), { "highlight": true, "quiet": false });

            if (navigator.userAgent.match(/Android/i) || navigator.userAgent.match(/iPhone/i) || navigator.userAgent.match(/iPad/i)) {
            } else {
                if ($('.loan-details').length == 1) {
                    progressPopup();
                }
            }

            var x = validateRadio($finishSection);

            if (typeof x != 'undefined') {
                if (!x) {
                    $('#submitText').text('');
                    $('#submitText').removeClass('save-text');
                    return false;
                }
            }

            attemptCount = attemptCount + 1;


            if ($('#idiq-details').length) {
                var $qasection = $('#idiq-details').find('.qaset');
                if ($qasection.length) {

                    $qasection.find(".question-text").each(function () {
                        questions.push($(this).text());
                    });

                    $qasection.find("select option:selected").each(function () {
                        answers.push($(this).text());
                    });

                    $qasection.find("input[type='radio']:checked + label").each(function () {
                        answers.push($(this).text());
                    });

                    $qasection.find(':text').each(function () {
                        answers.push($(this).text());
                    });
                }
            }

            // check whether form has already been submitted and prevent duplicate submissions
            if (userHasSubmittedApplication()) return false;
            submitButtonClicked = true;

            // create json object to populate all apply form fields
            var applicationFormViewModel = new Object();
            applicationFormViewModel = compress($("#main-form"));

            var postData = JSON.stringify({ questions: questions, answers: answers, attemptCount: attemptCount, model: applicationFormViewModel });

            $.when(SubmitForm(headers, postData, $thisSubmitButton, $finishSection)).done(function (data1) { });
            return false;
        });

        // Pre Prime
        $('#btnAcceptPrePrime').click(function () {
            var $thisSubmitButton = $(this); //add local reference to object
            var $otherButton = $('#btnDeclinePrePrime');
            if ($thisSubmitButton.data('in-progress') ||
                $otherButton.data('in-progress')) {
                return false;
            }
            $thisSubmitButton.data('in-progress', true);

            var valid = apply.validation.validateSectionBySelector('.loan-offer-section', false, { "highlight": true, "quiet": false });
            if (!valid) {
                $thisSubmitButton.removeData('in-progress');
                return false;
            }

            $thisSubmitButton.data('original-text', $thisSubmitButton.text()); //set original text for button in data attribute
            $thisSubmitButton.html('<i class="icon-spinner icon-spin"></i>'); //replace text for button with loading icon (using font awesome web font)
            return true;
        });

        // Decline Pre Prime
        $('#btnDeclinePrePrime').click(function () {
            var $thisSubmitButton = $(this); //add local reference to object
            var $otherButton = $('#btnAcceptPrePrime');
            if ($thisSubmitButton.data('in-progress') ||
                $otherButton.data('in-progress')) {
                return false;
            }
            $thisSubmitButton.data('in-progress', true);
            $thisSubmitButton.data('original-text', $thisSubmitButton.text()); //set original text for button in data attribute
            $thisSubmitButton.html('<i class="icon-spinner icon-spin"></i>'); //replace text for button with loading icon (using font awesome web font)
            return true;
        });

        // Offer
        $('#btnAccept').click(function () {
            var $thisSubmitButton = $('#btnAccept'); //add local reference to object
            var $otherButton = $('#btnDecline');
            if ($thisSubmitButton.data('in-progress') ||
                $otherButton.data('in-progress')) {
                return false;
            }
            $thisSubmitButton.data('in-progress', true);

            var valid = apply.validation.validateSectionBySelector('.loan-offer-section', false, { "highlight": true, "quiet": false });
            if (!valid) {
                $thisSubmitButton.removeData('in-progress');
                return false;
            }

            $thisSubmitButton.data('original-text', $thisSubmitButton.text()); //set original text for button in data attribute
            $thisSubmitButton.html('<i class="icon-spinner icon-spin"></i>'); //replace text for button with loading icon (using font awesome web font)
            return true;
        });

        // Loan Offer Decline
        $('#btnDecline').click(function () {
            var $thisSubmitButton = $(this); //add local reference to object
            var $otherButton = $('#btnAccept');
            if ($thisSubmitButton.data('in-progress') ||
                $otherButton.data('in-progress')) {
                return false;
            }
            $thisSubmitButton.data('in-progress', true);
            $thisSubmitButton.data('original-text', $thisSubmitButton.text()); //set original text for button in data attribute
            $thisSubmitButton.html('<i class="icon-spinner icon-spin"></i>'); //replace text for button with loading icon (using font awesome web font)
            return true;
        });

        $('#btnSendDocs').click(function () {
            var $thisSubmitButton = $(this); //add local reference to object
            var $otherButton = $('#btnDoNotSend');
            if ($thisSubmitButton.data('in-progress') ||
                $otherButton.data('in-progress')) {
                return false;
            }
            $thisSubmitButton.data('in-progress', true);
            $thisSubmitButton.data('original-text', $thisSubmitButton.text()); //set original text for button in data attribute
            $thisSubmitButton.html('<i class="icon-spinner icon-spin"></i>'); //replace text for button with loading icon (using font awesome web font)
            return true;
        });

        $('#btnDoNotSend').click(function () {
            var $thisSubmitButton = $(this); //add local reference to object
            var $otherButton = $('#btnSendDocs');
            if ($thisSubmitButton.data('in-progress') ||
                $otherButton.data('in-progress')) {
                return false;
            }
            $thisSubmitButton.data('in-progress', true);
            $thisSubmitButton.data('original-text', $thisSubmitButton.text()); //set original text for button in data attribute
            $thisSubmitButton.html('<i class="icon-spinner icon-spin"></i>'); //replace text for button with loading icon (using font awesome web font)
            return true;
        });

        // Downsell
        $('#btnAcceptDownSell').click(function () {
            var $thisSubmitButton = $(this); //add local reference to object
            var $otherButton = $('#btnDeclineDownSell');
            if ($thisSubmitButton.data('in-progress') ||
                $otherButton.data('in-progress')) {
                return false;
            }
            $thisSubmitButton.data('in-progress', true);

            var valid = apply.validation.validateSectionBySelector('.loan-offer-section', false, { "highlight": true, "quiet": false });
            if (!valid) {
                $thisSubmitButton.removeData('in-progress');
                validateCheck();
                validateCheckError();
                addAlertMessage(firstErrorMessage);
                return false;
            }

            $thisSubmitButton.data('original-text', $thisSubmitButton.text()); //set original text for button in data attribute
            $thisSubmitButton.html('<i class="icon-spinner icon-spin"></i>'); //replace text for button with loading icon (using font awesome web font)
            return true;
        });

        // decline Downsell
        $('#btnDeclineDownSell').click(function () {
            var $thisSubmitButton = $(this); //add local reference to object
            var $otherButton = $('#btnAcceptDownSell');
            if ($thisSubmitButton.data('in-progress') ||
                $otherButton.data('in-progress')) {
                return false;
            }
            $thisSubmitButton.data('in-progress', true);
            $thisSubmitButton.data('original-text', $thisSubmitButton.text()); //set original text for button in data attribute
            $thisSubmitButton.html('<i class="icon-spinner icon-spin"></i>'); //replace text for button with loading icon (using font awesome web font)
            return true;
        });

        // Upsell
        $('#btnContinueUpSell').click(function () {
            var $thisSubmitButton = $(this); //add local reference to object
            if ($thisSubmitButton.data('in-progress')) {
                return false;
            }
            $thisSubmitButton.data('in-progress', true);

            var valid = apply.validation.validateSectionBySelector('.loan-offer-section', false, { "highlight": true, "quiet": false });
            if (!valid) {
                $thisSubmitButton.removeData('in-progress');
                validateCheck();
                validateCheckError();
                addAlertMessage(firstErrorMessage);
                return false;
            }

            $thisSubmitButton.data('original-text', $thisSubmitButton.text()); //set original text for button in data attribute
            $thisSubmitButton.html('<i class="icon-spinner icon-spin"></i>'); //replace text for button with loading icon (using font awesome web font)
            return true;
        });
    };

    function creditCardApplicantbankLookup(headers, accountnumber, sortcode) {
        console.log(applyConfig.baseUrl);
        var postAccountData = JSON.stringify({ accountnumber: accountnumber, sortcode: sortcode });
        var url = 'servicing/service/validatebanklookup';
        $.ajax({
            url: applyConfig.baseUrl + url,
            headers: headers,
            async: false,
            data: postAccountData,
            contentType: 'application/json; charset=utf-8',
            success: function (data) {
                response = data;
            },
            error: function (xhr, textStatus, errorThrown) {
                response = "";
            },
            type: "POST"
        });

        if (response != "" && response.ResponseStatus != 4 && response.ResponseStatus != 5) {
            var accountError = $("form").find("[{0}=\"{2}\"], [{1}=\"{2}\"]".format("data-validation-error", "data-validation-valid", "AccountNumber"));
            $(accountError).removeAttr('data-validation-valid');
            $(accountError).attr('data-validation-error', 'AccountNumber');
            $(accountError).text('Please enter a valid account number.');

            var sortcodeError = $("form").find("[{0}=\"{2}\"], [{1}=\"{2}\"]".format("data-validation-error", "data-validation-valid", "SortCode"));
            $(sortcodeError).removeAttr('data-validation-valid');
            $(sortcodeError).attr('data-validation-error', 'SortCode');
            $(sortcodeError).text('Please enter a valid sort code.');

            $('#AccountNumber').addClass('validation-error-highlight');
            $('#SortCodeParts_0_').addClass('validation-error-highlight');
            $('#SortCodeParts_1_').addClass('validation-error-highlight');
            $('#SortCodeParts_2_').addClass('validation-error-highlight');

            $('#submitText').text('');
            $('#submitText').removeClass('save-text');
            $('#submitText').removeClass('submit-inprogress');
            validateCheck();
            console.log("BankLookup Failed.");
            return false;
        }
        console.log("BankLookup Passed.");
        return true;
    }


    function moneytransferBankLookup(headers, mtaccountnumber, mtsortcode) {
        console.log(applyConfig.baseUrl);
        var postAccountData = JSON.stringify({ accountnumber: mtaccountnumber, sortcode: mtsortcode });
        var url = 'servicing/service/validatebanklookup';
        $.ajax({
            url: applyConfig.baseUrl + url,
            headers: headers,
            async: false,
            data: postAccountData,
            contentType: 'application/json; charset=utf-8',
            success: function (data) {
                response = data;
            },
            error: function (xhr, textStatus, errorThrown) {
                response = "";
            },
            type: "POST"
        });

        if (response != "" && response.ResponseStatus != 4 && response.ResponseStatus != 5) {

            var mtaccountError = $("form").find("[{0}=\"{2}\"], [{1}=\"{2}\"]".format("data-validation-error", "data-validation-valid", "MtAccountNumber"));
            $(mtaccountError).removeAttr('data-validation-valid');
            $(mtaccountError).attr('data-validation-error', 'MtAccountNumber');
            $(mtaccountError).text('Please enter a valid account number.');

            var mtsortcodeError = $("form").find("[{0}=\"{2}\"], [{1}=\"{2}\"]".format("data-validation-error", "data-validation-valid", "MtSortCode"));
            $(mtsortcodeError).removeAttr('data-validation-valid');
            $(mtsortcodeError).attr('data-validation-error', 'MtSortCode');
            $(mtsortcodeError).text('Please enter a valid sort code.');

            $('#mtAcctNumberId').addClass('validation-error-highlight');
            $('#MtSortCodeParts_0_').addClass('validation-error-highlight');
            $('#MtSortCodeParts_1_').addClass('validation-error-highlight');
            $('#MtSortCodeParts_2_').addClass('validation-error-highlight');

            $('#submitText').text('');
            $('#submitText').removeClass('save-text');
            $('#submitText').removeClass('submit-inprogress');
            validateCheck();
            console.log("BankLookup Failed.");
            return false;
        }
        console.log("BankLookup Passed.");
        return true;
    }

    var wireAchCopyAddressFromMainApplicantClick = function () {
        $('#AchCopyAddressFromMainApplicant, #CopyAddressFromMainApplicant').change(function () {
            console.log("wireAchCopyAddressFromMainApplicantClick: " + $(this).attr('id'));
            var $achAddressContainer = $(this).closest('.address-container');
            var $achCurrentAddressSection;
            if ($achAddressContainer.find('#currentAddress.address-section').length) {
                $achCurrentAddressSection = $achAddressContainer.find('#currentAddress.address-section');
            }
            else {
                // address section in credit card apply
                $achCurrentAddressSection = $achAddressContainer.find('#achCurrentAddress.address-section');
            }
            var copyAddressFromMainApplicant = $(this).prop('checked') ? true : false;
            if (copyAddressFromMainApplicant) {
                $achCurrentAddressSection.hide().removeClass('opened');

                $achCurrentAddressSection.find('input[type="text"]').val('')
                    .removeClass('validation-error-highlight')
                    .closest('.form-row').find('span.help-block').attr('style', 'display: none;');

                $achCurrentAddressSection.find('select').val('')
                    .removeClass('validation-error-highlight')
                    .closest('.form-row').find('span.help-block').attr('style', 'display: none;');

                $achCurrentAddressSection.find('.address-details, .address-lookup-select, .address-living, .bfpo-details, .bfpo-code, .bfpo-address-find, .address-back').hide().removeClass('opened');
                $achCurrentAddressSection.find('.address-postcode, .address-find').show().addClass('opened');
                $achCurrentAddressSection.find('.find-address-button').show();

                $achAddressContainer.find('#previousAddress.address-section').hide().removeClass('opened');
                $achAddressContainer.find('#achPreviousAddress.address-section').hide().removeClass('opened');
            }
            else {
                $("#AchCurrentAddress_AddressPostcode").removeAttr('readonly'); //here I remove that attribute that makes this postbox field read only CHECKBOX

                $achCurrentAddressSection.find(".validation-icon").hide();
                $achCurrentAddressSection.show().addClass('opened');

                if ($("input#CurrentAddress_AddressPostcode").is('[readonly]')) {
                    $("input#CurrentAddress_AddressPostcode").removeAttr('readonly');
                }

                $achCurrentAddressSection.find('.address-supply-lookup.btn.btn-primary').show().removeAttr('disabled');
            }
        });
    };

    var wireCreditCardSubmitButtonClick = function () {
        // Submit Credit Card Application
        $('#btnCreditCardSubmit').click(function () {
            //replace after submit text next to Submit button
            $('#submitText').text($('#afterSubmitText').val());
            $('#submitText').addClass('save-text');
            $('#submitText').addClass('submit-inprogress');

            var questions = [], answers = [], response = "", $finishSection;
            var validSec = apply.validation.validateSection({ "highlight": true });
            if (!validSec) {
                apply.uifunctions.showAlert();
                $('#submitText').text('');
                $('#submitText').removeClass('save-text');
                $('#submitText').removeClass('submit-inprogress');

                $(".help-block:visible").each(function (index, value) {
                    if (value.innerText != '') {
                        var $helpBlock = $(".help-block:visible").eq(index);
                        var tid = $helpBlock.attr('id');
                        if (tid == undefined) {
                            tid = $.now().toString();
                            $helpBlock.attr("id", tid);
                        }
                        $('html,body').animate({ scrollTop: $("#" + tid).offset().top + "px" }, 100);
                        return false;
                    }
                });

                return false;
            }
            var $thisSubmitButton = $('#btnSubmit'); //add local reference to object - global 
            $thisSubmitButton.data('original-text', $thisSubmitButton.text()); //set original text for button in data attribute
            $thisSubmitButton.html('<i class="icon-spinner icon-spin"></i>'); //replace text for button with loading icon (using font awesome web font)             
            $thisSubmitButton.prop('disabled', true);

            var rqToken = $('input[name="__RequestVerificationToken"]').val();
            var headers = {};
            headers['__RequestVerificationToken'] = rqToken;
            $finishSection = $(this).closest('#jointholder');
            apply.uifunctions.removeAlert($finishSection.find('.form-error'));

            // Bank Wizard
            var accountnumber = $('#AccountNumber').val();
            var sortcode = $('#SortCodeParts_0_').val() + $('#SortCodeParts_1_').val() + $('#SortCodeParts_2_').val();
            var bwAccountResult = creditCardApplicantbankLookup(headers, accountnumber, sortcode);
            console.log("bwAccountResult: " + bwAccountResult);
            var bwMtAccountResult = true;
            if ($("#mtAcctNumberId").is(":visible")) {
                var mtaccountnumber = $('#mtAcctNumberId').val();
                var mtsortcode = $('#MtSortCodeParts_0_').val() + $('#MtSortCodeParts_1_').val() + $('#MtSortCodeParts_2_').val();
                bwMtAccountResult = moneytransferBankLookup(headers, mtaccountnumber, mtsortcode);
            }

            if (!bwAccountResult || !bwMtAccountResult) {
                $thisSubmitButton.html($thisSubmitButton.data('original-text'));
                $thisSubmitButton.prop('disabled', false);
                return false;
            }
            apply.validation.validateField($('#PersonalDetailsAreCorrect'), { "highlight": true, "quiet": false });

            if (navigator.userAgent.match(/Android/i) || navigator.userAgent.match(/iPhone/i) || navigator.userAgent.match(/iPad/i)) {
            } else {
                if ($('.creditcard-details').length == 1) {
                    progressPopup();
                }
            }

            var x = validateRadio($finishSection);

            if (typeof x != 'undefined') {
                if (!x) {
                    $('#submitText').text('');
                    $('#submitText').removeClass('save-text');
                    return false;
                }
            }

            attemptCount = attemptCount + 1;

            if ($('#idiq-details').length) {
                var $qasection = $('#idiq-details').find('.qaset');
                if ($qasection.length) {

                    $qasection.find(".question-text").each(function () {
                        questions.push($(this).text());
                    });

                    $qasection.find("select option:selected").each(function () {
                        answers.push($(this).text());
                    });

                    $qasection.find("input[type='radio']:checked + label").each(function () {
                        answers.push($(this).text());
                    });

                    $qasection.find(':text').each(function () {
                        answers.push($(this).text());
                    });
                }
            }

            // check whether form has already been submitted and prevent duplicate submissions
            if (userHasSubmittedApplication()) return false;
            submitButtonClicked = true;

            // create json object to populate all apply form fields
            var applicationFormViewModel = new Object();
            applicationFormViewModel = compress($("#main-form"));

            var postData = JSON.stringify({ questions: questions, answers: answers, attemptCount: attemptCount, model: applicationFormViewModel });

            $.when(SubmitForm(headers, postData, $thisSubmitButton, $finishSection)).done(function (data1) { });
            return false;
        });

        // Credit Card Offer
        $('#btnAcceptOfferCreditCard').click(function () {
            var valid = apply.validation.validateSectionBySelector('.loan-offer-section', false, { "highlight": true, "quiet": false });
            if (valid) {
                //$('[type="submit"]').prop('disabled', true);
                return true;
            }
            validateCheck();
            return false;
        });
    };

    // retrieve BFPO fields when retrieving an application
    var BFPOFieldsRetrieve = function (addressSection) {
        var $whichAddress = $('#' + addressSection).find('*');

        $whichAddress.find('.bfpo-address-details, .address-back, .bfpo-code, .bfpo-details').each(function () { //show relevant containers
            $(this).data('collapsible').show();
        });

        // hide normal address fields
        $whichAddress.find('.address-details, .address-postcode, .address-find, .address-lookup-select').each(function () { //hide relevant fields
            $whichAddress.find('.address-details, .address-postcode, .address-lookup-select, .address-find').each(function () { //hide relevant fields
                $(this).data('collapsible').hide(0);
            });
        });

        // show time at address
        $whichAddress.find('.address-living').each(function () { //show relevant containers
            $(this).data('collapsible').show();
        });

        $whichAddress.find('.address-postcode input[name$=Postcode]').val('').prop('readonly', false); //clear value of PostCode field

        $whichAddress.find('[name$=IsAddressBfpoFormat]').each(function () {
            $(this).val('true');
        });

        apply.validation.validateGroup($whichAddress, { removeOnly: true }); //validate address container

        // here I modify the headings and paragraph
        hideBFPOHeadings(addressSection);

        return false;
    };

    $(document).ready(function () {
        if ($(".ts-pla").length > 0) {
            var dotNode = $(".ts-pla").find(".table1").find(".td3").find(".div6").find(".f116")[3];
            if (dotNode != undefined) {
                dotNode.parentNode.removeChild(dotNode);
            }
        }
        if ($(".ts-ca").length > 0) {
            $(".ts-ca").find(".table5").find("img").attr('src', '/content/img/signature-carol-roberts.jpg');
        }
    });

    $("input[name='TaxResident']").change(function () {

        $('#divNInumber').attr('style', 'display: none;');
        $('#NationalInsuranceNumber').val("");

        var value = $("input[type='radio'][name='TaxResident']:checked").val();
        if (value == "True") {
            $('#divNInumber').attr('style', 'display: block;');
        }
        //here we remove error message and/or icons
        $("#NationalInsuranceNumber").attr('class', ''); //remove red highlight around the textbox
        $('#NINOValIcon').attr('style', 'display: none;'); //hides the validation icon 

    });

    $("input[name='TaxExternal']").change(function () {

        $('#divNIExternalDetails').attr('style', 'display: none;');
        $('#divNIAdditionalExternal').attr('style', 'display: none;');
        $('#divNIAdditionalExternalDetails').attr('style', 'display: none;');
        $("[name=TaxAdditionalExternal]").val(["False"]);

        $('#TaxExternalCountry').val("");
        $('#TaxExternalID').val("");
        $('#TaxAdditionalExternalCountry').val("");
        $('#TaxAdditionalExternalID').val("");

        var value = $("input[type='radio'][name='TaxExternal']:checked").val();
        if (value == "True") {
            $('#divNIExternalDetails').attr('style', 'display: block;');
            $('#divNIAdditionalExternal').attr('style', 'display: block;');
        }
        //here we remove error message and/or icons
        $('#TaxExternalCountryDDLValIcon').attr('style', 'display: none;');
        $("#TaxExternalCountry").attr('class', ''); //remove red highlight around the textbox

        $("#TaxExternalID").attr('class', ''); //remove red highlight around the textbox
        $('#TaxExternalTaxIdentValIcon').attr('style', 'display: none;'); //hides the validation icon   
    });

    $("input[name='TaxAdditionalExternal']").change(function () {
        $('#divNIAdditionalExternalDetails').attr('style', 'display: none;');
        $('#TaxAdditionalExternalCountry').val("");
        $('#TaxAdditionalExternalID').val("");

        var value = $("input[type='radio'][name='TaxAdditionalExternal']:checked").val();
        if (value == "True") {
            $('#divNIAdditionalExternalDetails').attr('style', 'display: block;');
        }
        // Remove validation messages and icons
        $("#TaxAdditionalExternalCountry").attr('class', ''); //remove red highlight around the textbox
        $('#TaxAdditionalExtCountryDDLValIcon').attr('style', 'display: none;'); //hides the validation icon  

        $("#TaxAdditionalExternalID").attr('class', ''); //remove red highlight around the textbox
        $('#TaxAddExtTaxIdentValIcon').attr('style', 'display: none;'); //hides the validation icon  
    });
    //*********** JOINT Applicant set of fields ********************
    $("input[name='JATaxResident']").change(function () {

        $('#divJANInumber').attr('style', 'display: none;');
        $('#JANationalInsuranceNumber').val("");

        var value = $("input[type='radio'][name='JATaxResident']:checked").val();
        if (value == "True") {
            $('#divJANInumber').attr('style', 'display: block;');
        }
        //here we remove error message and/or icons
        $("#JANationalInsuranceNumber").attr('class', ''); //remove red highlight around the textbox
        $('#JANINOValIcon').attr('style', 'display: none;'); //hides the validation icon 
    });

    $("input[name='JATaxExternal']").change(function () {
        $('#divJANIExternalDetails').attr('style', 'display: none;');
        $('#divJANIAdditionalExternal').attr('style', 'display: none;');
        $('#divJANIAdditionalExternalDetails').attr('style', 'display: none;');
        $("[name=JATaxAdditionalExternal]").val(["False"]);

        $('#JATaxExternalCountry').val("");
        $('#JATaxExternalID').val("");
        $('#JATaxAdditionalExternalCountry').val("");
        $('#JATaxAdditionalExternalID').val("");

        var value = $("input[type='radio'][name='JATaxExternal']:checked").val();
        if (value == "True") {
            $('#divJANIExternalDetails').attr('style', 'display: block;');
            $('#divJANIAdditionalExternal').attr('style', 'display: block;');
        }
        // Remove validation messages and icons
        $('#JATaxExternalCountryDDLValIcon').attr('style', 'display: none;');
        $("#JATaxExternalCountry").attr('class', ''); //remove red highlight around the textbox

        $("#JATaxExternalID").attr('class', ''); //remove red highlight around the textbox
        $('#JATaxExternalTaxIdentValIcon').attr('style', 'display: none;'); //hides the validation icon  

    });

    $("input[name='JATaxAdditionalExternal']").change(function () {

        $('#divJANIAdditionalExternalDetails').attr('style', 'display: none;');
        $('#JATaxAdditionalExternalCountry').val("");
        $('#JATaxAdditionalExternalID').val("");

        var value = $("input[type='radio'][name='JATaxAdditionalExternal']:checked").val();
        if (value == "True") {
            $('#divJANIAdditionalExternalDetails').attr('style', 'display: block;');
        }
        $("#JATaxAdditionalExternalCountry").attr('class', ''); //remove red highlight around the textbox
        $('#JATaxAdditionalExtCountryDDLValIcon').attr('style', 'display: none;'); //hides the validation icon  

        $("#JATaxAdditionalExternalID").attr('class', ''); //remove red highlight around the textbox
        $('#JATaxAddExtTaxIdentValIcon').attr('style', 'display: none;'); //hides the validation icon 
    });

    $("#FundsSource").change(function () {
        if ($('#FundsSource').val() == "Transfer from Sainsbury’s Bank account") {
            $('#divInternalAccount').attr('style', 'display: block;');
        }
        else {
            $('#divInternalAccount').attr('style', 'display: none;');
            $('#SourceToken').val("");
        }

        if ($('#DepositSavingAmount').val() != "") {
            $('#DepositSavingAmount').blur();
        }
    });

    $("#Source").change(function () {
        var $PaidFromAccount = $('#Source option:selected');
        var $ProductCode = $PaidFromAccount.attr("productcode");

        if ($ProductCode === "3113") {
            $('#ReduceInterestText').attr('style', 'display: block;');
        } else {
            $('#ReduceInterestText').attr('style', 'display: none;');
        }
    });

    $("#LoanPurpose").change(function () {
        var loanPurpose = $('#LoanPurpose').val();

        if (loanPurpose == "RepayExternal") {
            $('#divTotalAmountToBeConsolidated').attr('style', 'display: block;');
        }
        else {
            $('#divTotalAmountToBeConsolidated').attr('style', 'display: none;');
            $('#TotalAmountToBeConsolidated').val("");
        }
    });

    $(".disable-enter").keypress(function (event) {
        if (event.keyCode == 13) {
            event.preventDefault();
        }
    });

    $(".postcode-tick-validation").find(".lookup-wrapper").find("#Postcode").change(function () {
        $(".postcode-tick-validation").find(".address-postcode").find(".validation-icon").show();
    });

    $(".activate-tick-field").on('focusout blur', function () {
        var $whichAddress = $(this).closest('.form-row');
        apply.validation.validateField($($whichAddress.find('input')), { "highlight": true, "quiet": false });
        $whichAddress.find(".help-block").show();
    });

    $(".activate-tick-control").on('focusout blur', function () {
        var $whichAddress = $(this).closest('.activate-tick-control');
        apply.validation.validateField($($whichAddress.find('input')), { "highlight": true, "quiet": false });
        $whichAddress.find(".help-block").show();
        $whichAddress.find(".validation-icon").show();
    });

    $(".activate-tick-select").on('focusout blur', function () {
        var $whichAddress = $(this).closest('.activate-tick-select');
        apply.validation.validateField($($whichAddress.find('select')), { "highlight": true, "quiet": false });
        $whichAddress.find(".help-block").show();
        $whichAddress.find(".validation-icon").show();
    });

    $(".activate-validation-tick").on('focusout blur', function () {
        var $whichAddress = $(this).closest('.activate-validation-tick');
        apply.validation.validateField($($whichAddress.find('input')), { "highlight": true, "quiet": false });
        //$whichAddress.find(".help-block").show();
        $whichAddress.find(".validation-icon").show();
    });

    $(".activate-tick").find("input").focusout(function () {
        $(".activate-tick").find(".help-block").attr('style', 'display: block !important;');
    });

    $(".activate-tick").find("input").blur(function () {
        $(".activate-tick").find(".help-block").attr('style', 'display: block !important;');
    });

    $(".activate-tick-v").find("input").focusout(function () {
        $(".activate-tick-v").find(".validation-icon").attr('style', 'display: block !important;');
    });

    $(".activate-tick-v").find("input").blur(function () {
        $(".activate-tick-v").find(".validation-icon").attr('style', 'display: block !important;');
    });

    document.onreadystatechange = function () {
        if (document.readyState === 'complete') {
            $(".show-tick-v").find(".validation-icon").show();
        }
    }

    $(document).ready(function () {
        $(".show-tick").find(".help-block").show();
        $(".show-tick-v").find(".validation-icon").show();

        var terms = $(".terms-section");
        if (terms != null) {
            if (terms.length > 0) {

                $('.terms-section').contents().find('style').remove();

            }
        }
    });



    $(".start-living-year").focusout(function () {
        //$(".start-living-year").ParentNode[0].find(".help-block").attr('style', 'display: block;');
    });

    $("#SourceToken").change(function () {

        if ($('#DepositSavingAmount').val() != "") {
            $('#DepositSavingAmount').blur();
        }
    });

    setTimeout('$("#verification-code").removeAttr("readonly");', 1000);
    setTimeout('$("#verification-code").removeAttr("readonly");', 2000);

    $('.statement').click(function () {
        window.open($(this).attr("href"));
        $.get(
            applyConfig.baseUrl + 'servicing/service/logviewstatementsevent',
            { accountId: $('#accountId').val() },
            function (result) {
            },
            "json"
        ).fail(function (xhr, status, error) {
        });

        return false;
    });

    //*****deposit amount key press . Only numeric characters should be allowed  **********************************************************
    var wireAmountKeyPress = function (container) {

        $('.numericField').focusout(function () {
            var value = this.value.toString();
            if (isNaN(value) || value == "") {
                value = "";
            } else {
                this.value = parseFloat(value).toFixed(2);
            }
        });

        var numberLength = this;
        numberLength.init = function (element) {
            $('.numericField').keydown(function (e) {
                var input = $(this).val();
                var hasLessOrEqualThanTwoDecimal = (/^\d*\.?\d{0,1}$/).test(input);

                if (e.keyCode == 9 || e.keyCode == 8 || e.keyCode == 46 || e.keyCode == 35 || e.keyCode == 36 || e.keyCode == 37 || e.keyCode == 38 || e.keyCode == 39 || e.keyCode == 46) {
                    return true;
                }
                if ((e.keyCode == 190 || e.keyCode == 110) && this.value.indexOf(".") == -1 && this.value != "") {
                    return this.value.length < $(this).attr("maxlength");
                }

                if (((e.keyCode >= 48 && e.keyCode <= 57) && e.shiftKey == false) || ((e.keyCode >= 96 && e.keyCode <= 105))) {

                    if ($(this).attr("type") == "number" && $(this)[0].validity != null && $(this)[0].validity.badInput) {
                        return false;
                    }
                    var cursorPosition = $(this).getCursorPosition();
                    var reachedMaxlenght = this.value.length >= $(this).attr("maxlength");
                    var justTypedBeforeTheDecimalPoint = cursorPosition <= this.value.indexOf(".");

                    var selection = window.getSelection();
                    strSelection = String(selection);

                    if (reachedMaxlenght && strSelection == "") { //reached the number of digits allowed and user have not made a selection of current entry
                        return false;
                    }

                    if (hasLessOrEqualThanTwoDecimal || justTypedBeforeTheDecimalPoint || strSelection != "") { //has not reached max lenght and... user typed before decimal point or still has less than two decimals
                        return true;
                    }
                    return false;
                }
                return false;
            });
            $(element).on('paste', function () {
                var input = this;
                setTimeout(function () {
                    var maxLen = $(input).attr("maxlength") - 0;
                    var text = $(input).val();
                    if (text.length > maxLen) {
                        $(input).val(text.substr(0, maxLen));
                    }
                    // do something with text
                }, 100);
            });
        };
        numberLength.init(container);
    };



    //*******only numbers filter for numeric fields like account number sortcode tlf number etc. it does not allow "." or ","      ***********************
    var wireOnlyNumbersFieldKeyPress = function (container) {
        var numberLength1 = this;
        numberLength1.init = function (element) {
            $('.onlyNumbersField').keydown(function (e) {
                if (e.keyCode == 9 || e.keyCode == 8 || e.keyCode == 46 || e.keyCode == 35 || e.keyCode == 36 || e.keyCode == 37 || e.keyCode == 38 || e.keyCode == 39 || e.keyCode == 46) {
                    return true;
                }
                if (((e.keyCode >= 48 && e.keyCode <= 57) && e.shiftKey == false) || ((e.keyCode >= 96 && e.keyCode <= 105))) {
                    if ($(this).attr("type") == "number" && $(this)[0].validity != null && $(this)[0].validity.badInput) {
                        return false;
                    }
                    return this.value.length < $(this).attr("maxlength");
                }
                return false;
            });
            $(element).on('paste', function () {
                var input = this;
                setTimeout(function () {
                    var maxLen = $(input).attr("maxlength") - 0;
                    var text = $(input).val();
                    if (text.length > maxLen) {
                        $(input).val(text.substr(0, maxLen));
                    }
                    // do something with text
                }, 100);
            });
        };
        numberLength1.init(container);
    };

    $("#btnUpdateDirectDebitSubmitContinue").click(function () {
        var valid = apply.validation.validateSectionBySelector('.card-servicing-section', true, { "highlight": true, "quiet": false });
        var $repaymentFixed = $("#repaymentFixed");
        if ($repaymentFixed.length > 0 && $repaymentFixed[0].checked === false) {
            $("#repaymentFixed").closest(".input-container").find('span.help-block, span.validation-icon').css('display', 'none');

            var $repaymentFull = $("#repaymentFull")[0];
            if ($repaymentFull.checked === true) {
                $("#repaymentMinimum").closest(".input-container").find('span.help-block').css('display', 'none');
                $("#repaymentFull").closest(".input-container").find('span.help-block').css('display', 'block');
            }
            else {
                $("#repaymentFull").closest(".input-container").find('span.help-block').css('display', 'none');
                $("#repaymentMinimum").closest(".input-container").find('span.help-block').css('display', 'block');
            }
        }
        if (!valid) {
            validateCheck(32);
            return false;
        }
        var response = "";
        var rqToken = $('input[name="__RequestVerificationToken"]').val();
        var headers = {};
        headers['__RequestVerificationToken'] = rqToken;
        // if ($("#TargetAccountNumber").is(":visible")) {
        var accountnumber = $('#SourceAccountNumber').val();
        var sortcode = $('#SortCodeParts_0_').val() + $('#SortCodeParts_1_').val() + $('#SortCodeParts_2_').val();
        var postAccountData = JSON.stringify({ accountnumber: accountnumber, sortcode: sortcode });
        $.ajax({
            url: applyConfig.baseUrl + 'servicing/direct-debit/validatebanklookup',
            headers: headers,
            async: false,
            data: postAccountData,
            contentType: 'application/json; charset=utf-8',
            success: function (data) {
                response = data;

            },
            error: function (xhr, textStatus, errorThrown) {
                response = "";
            },
            type: "POST"
        });

        if (response.ResponseStatus != "4") { //4 IS VALID ACCOUNT
            $('#SourceAccountNumber').siblings("span").addClass("help-block help-block-error");
            $('#SourceAccountNumber').siblings("span.validation-icon").removeAttr("data-validation-valid");
            $('#SourceAccountNumber').siblings("span.validation-icon").attr("data-validation-error", "SourceAccountNumber");
            $('#SourceAccountNumber').siblings("span.validation-icon[data-validation-error]").show();
            var accountError = $("form").find("[{0}=\"{2}\"], [{1}=\"{2}\"]".format("data-validation-error", "data-validation-valid", "SourceAccountNumber"));
            $(accountError).attr('data-validation-error', 'SourceAccountNumber');
            $(accountError).text('Please enter a valid account number.');

            $('#SourceSortCode').siblings("span").addClass("help-block help-block-error");
            $('#SourceSortCode').siblings("span.validation-icon").removeAttr("data-validation-valid");
            $('#SourceSortCode').siblings("span.validation-icon").attr("data-validation-error", "SourceSortCode");
            $('#SourceSortCode').siblings("span.validation-icon[data-validation-error]").show();
            var sortcodeError = $("form").find("[{0}=\"{2}\"], [{1}=\"{2}\"]".format("data-validation-error", "data-validation-valid", "SourceSortCode"));
            $(sortcodeError).attr('data-validation-error', 'SourceSortCode');
            $(sortcodeError).text('Please enter a valid sort code.');
            validateCheck(32);
            return false;
        }

        return true;
    });

    var wireGetAQuoteButton = function () {
        $("#getQuote").click(function () {

            $("#softSearchAvailableFinalFooter").addClass("mfp-hide");
            $("#softSearchBackendUnavailableFooter").addClass("mfp-hide");
            $("#softSearchPreBureauCheckFailure").addClass("mfp-hide");
            $("#softSearchPostBureauCheckDecline").addClass("mfp-hide");
            $("#softSearchNotRated").addClass("mfp-hide");

            var valid = apply.validation.validateSectionBySelector('.js-loan-aboutyou-section', true, { "highlight": true, "quiet": false });
            if (!valid) {
                $(this).removeData('btn-success');
                return false;
            } 

            getPersonaliseApr();

            event.preventDefault();
            return false;
        });
    };

    var wireEditSoftsearchClick = function () {
        $('#softsearchEdit').click(function () {
            editSoftsearch();
            event.preventDefault();
        });
    }

    var wireContinueSoftsearchClick = function () {
        $("#softsearchContinue").click(function (event) {
            displaySoftsearchAccountDetails();
            event.preventDefault();
        });
    }

    var SoftsearchLoanScoreResponse = Object.freeze({ "passed": 1, "backendunavailable": 2, "prebureaucheckfailure": 3, "notrated": 4, "postbureaucheckdecline": 5 });

    var getPersonaliseApr = function() {

        var loanApplyModel = new Object();
        loanApplyModel = compress($("#main-form"));
        var postData = JSON.stringify(loanApplyModel);

        var headers = {};
        var rqToken = $('input[name="__RequestVerificationToken"]').val();
        headers['__RequestVerificationToken'] = rqToken;
        $.ajax({
            url: applyConfig.baseUrl + 'servicing/service/loanscore',
            headers: headers,
            async: false,
            data: postData,
            contentType: 'application/json; charset=utf-8',
            success: function(data) {
                var result = data;
                if (data.ProductOutcome === "Passed") // Exit 0 - Success APR
                {
                    displaySoftsearchConfirm(result, SoftsearchLoanScoreResponse.passed);
                } else if (data.ProductOutcome === "PreBureauFail") // EXIT 2 -Pre-Bureau
                {
                    displaySoftsearchConfirm(result, SoftsearchLoanScoreResponse.prebureaucheckfailure);
                } else if (data.ProductOutcome === "NotRated") // EXIT 3
                {
                    displaySoftsearchConfirm(result, SoftsearchLoanScoreResponse.notrated);
                } else if (data.ProductOutcome === "PostBureauFail" || data.ProductOutcome === "ScorecardFail") {
                    displaySoftsearchConfirm(result, SoftsearchLoanScoreResponse.postbureaucheckdecline);
                } else // Exit 1 - Backend Unavailable
                {
                    displaySoftsearchConfirm(result, SoftsearchLoanScoreResponse.backendunavailable);
                }

                apply.uifunctions.resetTimeout();
            },
            type: "POST"
        }).fail(function(xhr, status, error) {
            displaySoftsearchConfirm(null, SoftsearchLoanScoreResponse.backendunavailable);
            console.log(error);
        });
    };

    var displaySoftsearchConfirm = function($respData, softsearchResponseType) {

        if ($respData == null) {
            $("#SoftsearchOutcome").val("BackendUnavailable");
        } else {
            $("#SoftsearchOutcome").val($respData.ProductOutcome);
        }
            
        if (softsearchResponseType !== 1) {
            $("#SoftsearchLoanTerm").val('');
            $("#SoftsearchLoanAmount").val('');
            $("#SoftsearchNumberOfRepayment").val('');
            $("#SoftsearchMonthlyRepayment").val('');
            $("#SoftsearchRepayableTotal").val('');
            $("#SoftsearchApr").val('');
            $("#SoftsearchRate").val('');
            $("#SoftsearchSecBureauChkInd").val('');
            $("#SoftsearchProductScore").val('');
        }

        //Display PersonalisedQuote section
        if (softsearchResponseType === 1) { // Success softsearchResponseType === 1
            $("#SoftsearchLoanTerm").val($respData.Count);
            $("#SoftsearchLoanAmount").val($respData.Amt);
            $("#SoftsearchNumberOfRepayment").val($respData.NumberOfRepayments);
            $("#SoftsearchMonthlyRepayment").val($respData.MonthlyRepayment);
            $("#SoftsearchRepayableTotal").val($respData.TotalRepayable);
            $("#SoftsearchApr").val($respData.PersonalisedApr);
            $("#SoftsearchRate").val($respData.PersonalisedApr);
            $("#SoftsearchSecBureauChkInd").val($respData.SecBureauChkInd);
            $("#SoftsearchProductScore").val($respData.ProductScore);

            $(".js-loan-aboutyou-section :input").prop("disabled", true);
            $("#personalisedQuote").removeClass("mfp-hide");
            $("#personalisedQuoteTable").removeClass("mfp-hide");
            $("#softSearchNotRated").addClass("mfp-hide");

            $("#softsearchEditInstructions").show();
            $("#softsearchEdit").show();
            $("#softsearchContinue").show();
            $("#getQuote").hide();

            $(".js-NumberOfRepayment").text($respData.NumberOfRepayments);
            $(".js-MonthlyRepayment").text("£" + $respData.MonthlyRepayment.format(2));
            $(".js-RepayableTotal").text("£" + $respData.TotalRepayable.format(2));
            $(".js-PersonalisedApr").text($respData.PersonalisedApr + "%");
        }
        else if (softsearchResponseType === 2) { // Exit 1 - Backend Unavailable softsearchResponseType === 2
            //SHow/Hide buttons
            $("#getQuote").hide();
            $("#softsearchEdit").show();
            $("#softsearchContinue").show();
            $("#softsearchEditInstructions").show();

            //Disable elements in about section
            $(".js-loan-aboutyou-section :input").prop("disabled", true);

            //Show personalised quote
            $("#personalisedQuote").removeClass("mfp-hide");

            //Show appropriate footer
            $("#softSearchBackendUnavailableFooter").removeClass("mfp-hide");

            clearPersonalisedQuoteValues();
            clearPersonalisedQuoteTable();
        }
        else if (softsearchResponseType === 3) { // EXIT 2 -Pre-Bureau
            //Show/Hide buttons
            $("#getQuote").hide();
            $("#softsearchEdit").hide();
            $("#softsearchContinue").hide();
            $("#softsearchHome").removeClass("mfp-hide");
            $("#personalisedQuote").removeClass("mfp-hide");
            $("#softSearchPreBureauCheckFailure").removeClass("mfp-hide");

            clearPersonalisedQuoteValues();
            clearPersonalisedQuoteTable();

            //Disable elements in about section
            $(".js-loan-aboutyou-section :input").prop("disabled", true);
        }
        else if (softsearchResponseType === 4) { // EXIT 3 notrated
            //SHow/Hide buttons
            $("#getQuote").hide();
            $("#softsearchEdit").show();
            $("#softsearchContinue").show();
            $("#softsearchEditInstructions").show();

            //Disable elements in about section
            $(".js-loan-aboutyou-section :input").prop("disabled", true);

            //Show personalised quote
            $("#personalisedQuote").removeClass("mfp-hide");

            //Show appropriate footer
            $("#softSearchNotRated").removeClass("mfp-hide");

            clearPersonalisedQuoteValues();
            clearPersonalisedQuoteTable();
        }
        else if (softsearchResponseType === 5) { // Exit 4 postbureaucheckdecline
            //SHow/Hide buttons
            $("#getQuote").hide();
            $("#softsearchEdit").hide();
            $("#softsearchContinue").show();
            $("#softsearchEditInstructions").hide();

            //Disable elements in about section
            $(".js-loan-aboutyou-section :input").prop("disabled", true);

            //Show personalised quote
            $("#personalisedQuote").removeClass("mfp-hide");

            //Show appropriate footer
            $("#softSearchPostBureauCheckDecline").removeClass("mfp-hide");

            clearPersonalisedQuoteValues();
            clearPersonalisedQuoteTable();
        }
    };

    var clearPersonalisedQuoteTable = function() {
        $(".js-NumberOfRepayment").text('');
        $(".js-MonthlyRepayment").text('');
        $(".js-RepayableTotal").text('');
        $(".js-PersonalisedApr").text('');
    };

    var clearPersonalisedQuoteValues = function () {
        $("#SoftsearchOutcome").val('');
        $("#SoftsearchLoanTerm").val('');
        $("#SoftsearchLoanAmount").val('');
        $("#SoftsearchNumberOfRepayment").val('');
        $("#SoftsearchMonthlyRepayment").val('');
        $("#SoftsearchRepayableTotal").val('');
        $("#SoftsearchApr").val('');
        $("#SoftsearchRate").val('');
        $("#SoftsearchSecBureauChkInd").val('');
        $("#SoftsearchProductScore").val('');
        $("#SoftsearchProductLikelihood").val('');
    }

    var editSoftsearch = function () {
        //Enable appropriate elements
        $(".js-loan-aboutyou-section :input").prop("disabled", false);

        //Hide the back button on the adress elements
        $("#btnBackCurrentAddress").show();
        $("#btnBackPreviousAddress").show();
        $("#btnBackEarlierPreviousAddress").show();

        //Hide PersonalisedQuote section
        $("#personalisedQuote").addClass("mfp-hide");
        $("#personalisedQuoteTable").addClass("mfp-hide");  
        $("#softSearchAvailableFinalFooter").addClass("mfp-hide");
        $("#softSearchBackendUnavailableFooter").addClass("mfp-hide");
        $("#softSearchPreBureauCheckFailure").addClass("mfp-hide");
        $("#softSearchPostBureauCheckDecline").addClass("mfp-hide");      
        $("#softSearchNotRated").addClass("mfp-hide");

        //Show/hide appropriate buttons
        $("#getQuote").show();
        $("#softsearchEdit").hide();
        $("#softsearchContinue").hide();
        $("#softsearchEditInstructions").hide();
 		$("#softsearchHome").addClass("mfp-hide");
    }

    var displaySoftsearchAccountDetails = function() {
        var outcome = $("#SoftsearchOutcome").val();
        if (outcome === "Passed") {
            $(".js-loan-aboutyou-section :input").prop("disabled", true);
            $("#getQuoteSection").hide();
            $("#personalisedQuote").removeClass("mfp-hide");
            $("#softSearchAvailableFinalFooter").removeClass("mfp-hide");
            $("#yourFinancialDetails").show();
            $("#importantInformation").show();
            $("#hasAgreed").show();
            $("#submitSection").show();
        } else {
            $(".js-loan-aboutyou-section :input").prop("disabled", false);

            $("#getQuoteSection").hide();
            $("#yourFinancialDetails").show();

            $("#personalisedQuote").addClass("mfp-hide");

            $("#importantInformation").show();
            $("#hasAgreed").show();

            $("#submitSection").show();
        }
    }

    return { //Make appropriate functions public
        wireAmountKeyPress: wireAmountKeyPress,
        wireOnlyNumbersFieldKeyPress: wireOnlyNumbersFieldKeyPress,
        paynowclick: paynowclick,
        wireApplicationTypeRadioClick: wireApplicationTypeRadioClick,
        wireAddressFindButtonClick: wireAddressFindButtonClick,
        wireAddressChooseComboClick: wireAddressChooseComboClick,

        wireDirectDebitTermsAndCondCheckboxClick: wireDirectDebitTermsAndCondCheckboxClick,
        wireEditAcctInterestPaidToCheckboxClick: wireEditAcctInterestPaidToCheckboxClick,

        wireShortApplyWhatTypeOfAcctDropdownChange: wireShortApplyWhatTypeOfAcctDropdownChange,
        wireStatementsButtonClick: wireStatementsButtonClick,
        wireEditAcctIntPaidToReviewAndConfirmButtonClick: wireEditAcctIntPaidToReviewAndConfirmButtonClick,
        wireEditAcctIntPaidToDropdownChange: wireEditAcctIntPaidToDropdownChange,
        wirePayCreditCardAmountChange: wirePayCreditCardAmountChange,


        wireManageDirectDebitCardAmountChange: wireManageDirectDebitCardAmountChange,

        wireJointApplicantSameAddressAsMainClick: wireJointApplicantSameAddressAsMainClick,

        wireJAAccountNumberFocusOut: wireJAAccountNumberFocusOut,

        wireJACardNumberFocusOut: wireJACardNumberFocusOut,

        wireJALoanAgreementNumberFocusOut: wireJALoanAgreementNumberFocusOut,

        wireSortCodePart1TextBoxFocusOut: wireSortCodePart1TextBoxFocusOut,
        wireSortCodePart2TextBoxFocusOut: wireSortCodePart2TextBoxFocusOut,
        wireSortCodePart3TextBoxFocusOut: wireSortCodePart3TextBoxFocusOut,

        wireAnnualIncomeBeforeTaxTextBoxFocusOut: wireAnnualIncomeBeforeTaxTextBoxFocusOut,
        wirePartnerAnnualIncomeBeforeTaxTextBoxFocusOut: wirePartnerAnnualIncomeBeforeTaxTextBoxFocusOut,

        wireTypeAddressManuallyClick: wireTypeAddressManuallyClick,
        wireEnterBFPOAddressClick: wireEnterBFPOAddressClick,
        wireTypeBackAddressClick: wireTypeBackAddressClick,
        wireStartLivingThereComboClick: wireStartLivingThereComboClick,
        wireInlineValidation: wireInlineValidation,
        wireAccountCheck: wireAccountCheck,
        wireTitleComboChange: wireTitleComboChange,
        wireColleagueNumberComboChange: wireColleagueNumberComboChange,
        wireNewMssgTextAreaChange: wireNewMssgTextAreaChange,
        wireNewMssgTextAreaChangeHelpAndFAQ: wireNewMssgTextAreaChangeHelpAndFAQ,
        wireAddressStartLivingComboChange: wireAddressStartLivingComboChange,
        wireCurrentMonthComboChange: wireCurrentMonthComboChange,
        wirePreviousMonthComboChange: wirePreviousMonthComboChange,
        wireJACurrentMonthComboChange: wireJACurrentMonthComboChange,
        wireJAPreviousMonthComboChange: wireJAPreviousMonthComboChange,
        wireJAAccountNumberChange: wireJAAccountNumberChange,
        wireJASortCodeChange: wireJASortCodeChange,
        wirePostcodeChange: wirePostcodeChange,
        wireInputChange: wireInputChange,
        removeBFPOErrorMessage: removeBFPOErrorMessage,
        removePostcodeErrorMessage: removePostcodeErrorMessage,
        removeBFPOCodeFieldHighlight: removeBFPOCodeFieldHighlight,
        removeNextAddressValidation: removeNextAddressValidation,
        wirePostcodeTextboxChange: wirePostcodeTextboxChange,
        wireResetCredButtonClick: wireResetCredButtonClick,
        BFPOFieldsRetrieve: BFPOFieldsRetrieve,
        ISBFPO: IsBFPO,
        extactPartialAddressFromValueString: extactPartialAddressFromValueString,
        extactAddressIDFromValueString: extactAddressIDFromValueString,
        setupAddress: setupAddress,
        clearAddressFields: clearAddressFields,
        clearBFPOFields: clearBFPOFields,
        wireHowDidYouHearAboutUsComboClick: wireHowDidYouHearAboutUsComboClick,
        securityDetailsCredentialsTypeComboclick: securityDetailsCredentialsTypeComboclick,
        submitButtonclick: submitButtonclick,
        wireAchCopyAddressFromMainApplicantClick: wireAchCopyAddressFromMainApplicantClick,
        wireCreditCardSubmitButtonClick: wireCreditCardSubmitButtonClick,

        editDetailsSaveButtonclick: editDetailsSaveButtonclick,
        orderpayinslipclick: orderpayinslipclick,
        editaccountinterestpaidtoclick: editaccountinterestpaidtoclick,
        accounttopaytoclick: accounttopaytoclick,
        validateGroup: validateGroup,
        addRequired: addRequired,
        validateField: validateField,
        BankCheckSubmit: BankCheckSubmit,
        wireDirectDebitSetupPage: wireDirectDebitSetupPage,
        UserNameCheck: UserNameCheck,
        wireJointApplicantExistingCutomerComboClick: wireJointApplicantExistingCutomerComboClick,
        wireJointApplicantAccountTypeComboClick: wireJointApplicantAccountTypeComboClick,
        userHasSubmittedApplication: userHasSubmittedApplication,
        timeAtAddressCurrentAgainstNext: timeAtAddressCurrentAgainstNext,
        wireValidateBFPOCodeOnFocusOutChangeForCurrentAddress: wireValidateBFPOCodeOnFocusOutChangeForCurrentAddress,
        wireValidateBFPOCodeOnFocusOutChangeForPreviousAddress: wireValidateBFPOCodeOnFocusOutChangeForPreviousAddress,

        wireValidateBFPOCodeOnFocusOutChangeForCurrentAddressACH: wireValidateBFPOCodeOnFocusOutChangeForCurrentAddressACH,
        wireValidateBFPOCodeOnFocusOutChangeForPreviousAddressACH: wireValidateBFPOCodeOnFocusOutChangeForPreviousAddressACH,

        wireValidateBFPOCodeOnFocusOutChangeForEarlierPreviousAddress: wireValidateBFPOCodeOnFocusOutChangeForEarlierPreviousAddress,
        wireValidateBFPOCodeOnFocusOutChangeForJACurrentAddress: wireValidateBFPOCodeOnFocusOutChangeForJACurrentAddress,
        wireValidateBFPOCodeOnFocusOutChangeForJAPreviousAddresss: wireValidateBFPOCodeOnFocusOutChangeForJAPreviousAddresss,
        wireValidateBFPOCodeOnFocusOutChangeForJAEarlierPreviousAddress: wireValidateBFPOCodeOnFocusOutChangeForJAEarlierPreviousAddress,
        SelfCertify: SelfCertify,
        SelfCertifyClose: SelfCertifyClose,
        wireGetAQuoteButton: wireGetAQuoteButton,
        wireEditSoftsearchClick: wireEditSoftsearchClick,
        wireContinueSoftsearchClick: wireContinueSoftsearchClick
    };
}();
var validateCheck = function (offset) {
    offset = offset || 0;
    $(".help-block:visible").each(function (index, value) {
        if (value.innerText != '') {
            var $helpBlock = $(".help-block:visible").eq(index);
            var tid = $helpBlock.attr('id');
            if (tid == undefined) {
                tid = $.now().toString();
                $helpBlock.attr("id", tid);
            }
            var top = $("#" + tid).offset().top - offset;
            $('html,body').animate({ scrollTop: top + "px" }, 100);
            return false;
        }
    });
}
function validateCheckError() {
    $(".help-block:visible").each(function (index, value) {
        if (value.innerText != '') {
            firstErrorMessage = value.innerText;
            return false;
        }
    });
}

function validateCheckErrors() {
    validateCheck();
    validateCheckError();
    addAlertMessage(firstErrorMessage);
}

function addAlertMessage(aMsg) {
    removeOldAlertMessage();

    var newAlert = document.createElement("div");
    newAlert.setAttribute("role", "alert");
    newAlert.setAttribute("id", "alert");

    var msg = document.createTextNode(aMsg);
    newAlert.appendChild(msg);
    document.body.appendChild(newAlert);
    var oldAlert = document.getElementById("alert");
    if (oldAlert)
        oldAlert.focus();
}

function removeOldAlertMessage() {
    var oldAlert = document.getElementById("alert");
    if (oldAlert)
        document.body.removeChild(oldAlert);
}

$(".radio-button-container").find("input[type='radio']").change(function () {
    var $whichRadioList = $(this).closest('.radio-button-container');
    var radio1 = $whichRadioList[0].childNodes[1];
    var radio2 = $whichRadioList[0].childNodes[5];
    var radio3 = $whichRadioList[0].childNodes[9];

    if (radio1.type != "radio") {
        radio1 = $whichRadioList[0].childNodes[2];
    }

    if (radio2.type != "radio") {
        radio2 = $whichRadioList[0].childNodes[6];
    }

    if (radio3 != null && radio3.type != "radio") {
        radio3 = $whichRadioList[0].childNodes[10];
    }

    if (radio1.checked) {
        $("#label_" + radio1.id).addClass("radio-selected");
        $("#label_" + radio2.id).removeClass("radio-selected");
        if (radio3 != null) {
            $("#label_" + radio3.id).removeClass("radio-selected");
        }
    }
    if (radio2.checked) {
        $("#label_" + radio1.id).removeClass("radio-selected");
        $("#label_" + radio2.id).addClass("radio-selected");
        if (radio3 != null) {
            $("#label_" + radio3.id).removeClass("radio-selected");
        }
    }
    if (radio3 != null && radio3.checked) {
        $("#label_" + radio1.id).removeClass("radio-selected");
        $("#label_" + radio2.id).removeClass("radio-selected");
        $("#label_" + radio3.id).addClass("radio-selected");
    }
});

$("input[name='IsInterestPaidIntoFixedRateIsa']").change(function () {

    var divSectionName = '#divPayingYourInterest';
    $(divSectionName).attr('style', 'display: none;');

    var value = $("input[type='radio'][name='IsInterestPaidIntoFixedRateIsa']:checked").val();
    if (value == "True") {
        //reset all input fields to blank values
        $(divSectionName).find(':input[type=text]').each(function () {
            $(this).val("");
            $(this).clearInputValidation();
        });

        //reset the sort code fields
        $(divSectionName).find(':input[type=tel]').each(function () {
            $(this).val("");
            $("#SortCode").clearInputValidation();
        });

        // hide help-blocks
        $(divSectionName).find('span.help-block').hide();

        $('#divPaidAnnuallyText').attr('style', 'display: block;');
        $('#divPaidNonIsaText').attr('style', 'display: none;');
        $(divSectionName).attr('style', 'display: none;');
    } else {
        $('#divPaidAnnuallyText').attr('style', 'display: none;');
        $('#divPaidNonIsaText').attr('style', 'display: block;');
        $(divSectionName).attr('style', 'display: block;');
    }
});

function initDatePicker(element, day, month, year, maxDate) {
    $(element).datepicker({
        dateFormat: "dd-mm-yy",
        showOn: 'both',
        buttonText: '<i class="icon-calendar icon-large" alt=""></i><span class="visuallyhidden">Date Picker</span>',
        numberOfMonths: 1,
        firstDay: 1,
        showCurrentAtPos: 0,
        prevText: "",
        nextText: "",
        constrainInput: false,
        dayNamesMin: ['S', ' M', ' T', ' W', ' T', ' F', ' S'],
        minDate: new Date(1899, 12, 01),
        maxDate: maxDate,

        onShow: function (dateText) {

            $(year).val(dateText.split('-')[2] - 0 == 0 ? "" : dateText.split('-')[2] - 0);
            $(month).val(dateText.split('-')[1] - 0 == 0 ? "" : dateText.split('-')[1] - 0);
            $(day).val(dateText.split('-')[0] - 0 == 0 ? "" : dateText.split('-')[0] - 0)  //updating the value of the textbox
                .change(); //trigger change event.
        },

        onClose: function (dateText) {

            $(year).val(dateText.split('-')[2] - 0 == 0 ? "" : dateText.split('-')[2] - 0);
            $(month).val(dateText.split('-')[1] - 0 == 0 ? "" : dateText.split('-')[1] - 0);
            $(day).val(dateText.split('-')[0] - 0 == 0 ? "" : dateText.split('-')[0] - 0)  //updating the value of the textbox
                .change(); //trigger change event.
            if ($(year).val() === "" && $(month).val() === "" && $(year).val() === "") {
                //hide span-validation-icon
                $('.validation-icon[data-validation-valid]').hide();

                // hide validation icon for short apply ACH 
                if ($("span#statusAchDateOfBirth").length > 0 && $('span#statusAchDateOfBirth').siblings('.validation-icon[data-validation-error]').length === 0) {
                    $('span#statusAchDateOfBirth').hide();
                }
            }
        }
    });

    $(day + ", " + month + ", " + year).change(function () {
        var valid = apply.validation.validateField($(this), { "highlight": true, "quiet": false });
        $(element).value = $(day).val() + "-" + $(month).val() + "-" + $(day).val();
    });
}

function hideSectionsBelowAboutYou(isSoftSearch) {
    if (!isSoftSearch) {
        $('#yourFinancialDetails').attr('style', 'display: block;');
        $('#representativeExample').attr('style', 'display: block;');
        $('#importantInformation').attr('style', 'display: block;');
        $('#hasAgreed').attr('style', 'display: block;');
        $('#submitSection').attr('style', 'display: block;');
        $("#personalisedQuote").addClass("mfp-hide");
        $("#personalisedQuoteTable").addClass("mfp-hide");
        $("#getQuoteSection").hide();
        $("#softsearchEditInstructions").hide();
        $("#softsearchContinue").hide();
        $("#softsearchEdit").hide();

        // Make sure existing messages are hidden for personalised quote
        $("#softSearchAvailableFinalFooter").addClass("mfp-hide");
        $("#softSearchAvailableFooter").addClass("mfp-hide");
        $("#softSearchBackendUnavailableFooter").addClass("mfp-hide");
        $("#softSearchPreBureauCheckFailure").addClass("mfp-hide");
        $("#softSearchPostBureauCheckDecline").addClass("mfp-hide");
        $("#softSearchNotRated").addClass("mfp-hide");
    }
    else if (isSoftSearch) {
        $('#yourFinancialDetails').attr('style', 'display: none;');
        $('#representativeExample').attr('style', 'display: none;');
        $('#softSearchAvailableFinalFooter').addClass('mfp-hide');
        $('#importantInformation').attr('style', 'display: none;');
        $('#hasAgreed').attr('style', 'display: none;');
        $('#submitSection').attr('style', 'display: none;');
        $("#getQuoteSection").show();
        $("#getQuote").show();
        $("#softsearchHome").addClass("mfp-hide");
    }
}
